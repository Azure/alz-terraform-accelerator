---
name: End to End Tests

on:
  pull_request:
    branches:
      - main
    types: ['opened', 'reopened', 'synchronize', 'labeled']
  workflow_dispatch:
    inputs:
      apply:
        description: 'Whether to run the apply and destroy steps'
        default: false
        type: boolean
  schedule:
    - cron: '0 9 * * 1'

permissions:
  id-token: write
  contents: read

jobs:
  define-matrix:
    name: Define Matrix
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Generate Matrix
        id: matrix
        run: |
          $matrix = .github/tests/scripts/generate-matrix.ps1 -runNumber "${{ github.run_number }}" -splitCount 10
          $matrixJson = ConvertTo-Json $matrix -Depth 10 -Compress
          Write-Host (ConvertTo-Json $matrix -Depth 10)
          Write-Output "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
        shell: pwsh

  e2e-test:
    needs: define-matrix
    name: "${{ matrix.name }} (${{ matrix.ShortName }})"
    environment: ${{ github.event_name == 'schedule' && 'CSUTFAUTO' || 'CSUTF' }}
    if: "${{ github.repository == 'Azure/alz-terraform-accelerator' && (contains(github.event.pull_request.labels.*.name, 'PR: Safe to test ðŸ§ª') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}"
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: 1.9.7
          terraform_wrapper: false

      - name: Setup Module Inputs
        run: |
          $tfvarsFile = @"
          starter_locations            = ["uksouth", "ukwest"]
          subscription_id_connectivity = "${{ vars.ARM_SUBSCRIPTION_ID }}"
          subscription_id_identity     = "${{ vars.ARM_SUBSCRIPTION_ID }}"
          subscription_id_management   = "${{ vars.ARM_SUBSCRIPTION_ID }}"
          "@

          $tfvarsFile | Out-File -FilePath "${{ matrix.rootModuleFolderPath }}/terraform.tfvars" -Encoding utf8 -Force
        shell: pwsh

      - name: Run Plan
        run: |
          $sourceVarFilePath = "${{ matrix.configFilePath }}"
          $destinationVarFilePath = "${{ matrix.rootModuleFolderPath }}/test.auto.tfvars"
          $splitNumber = ${{ matrix.splitNumber }}

          $fileContent = Get-Content -Path $sourceVarFilePath

          Write-Host "Processing config file: $sourceVarFilePath"

          $booleanConfigs = @()
          foreach($line in $fileContent) {
            if($line -match "^.+_enabled\s+=\strue$") {
              Write-Host "Found boolean config: $($line)"
              $booleanConfigs += $line
            }
          }

          $combinations = @()
          $configState = @{}

          foreach($config in $booleanConfigs) {
            $configState[$config] = $true
          }

          foreach($config in $booleanConfigs) {
            foreach($childConfig in $booleanConfigs) {
              $combination = $configState.Clone()
              $combinations += $combination
              $configState[$childConfig] = !$configState[$childConfig]
            }
            $configState[$config] = !$configState[$config]
          }

          if($combinations.Count -eq 0) {
            $combinations += @{}
          }

          Write-Host "Found $($combinations.Count) combinations for $sourceVarFilePath"

          $combinationNumber = 1
          foreach ($combination in $combinations) {
            if($combinationNumber % $splitNumber -ne 0) {
              $combinationNumber++
              continue
            }

            $testContent = @()
            $updatedLines = @()

            foreach ($line in $fileContent) {
              $updatedLine = $line
              if($combination.ContainsKey($line)) {
                $setting = $combination[$line].ToString().ToLower()
                $updatedLine = $line -replace "true", $setting
                $updatedLines += $updatedLine
              }
              $testContent += $updatedLine
            }

            $testContent | Out-File -FilePath $destinationVarFilePath -Encoding utf8 -Force

            Write-Host "Running plan test for combination $combinationNumber of $($combinations.Count) with settings:"
            Write-Host "$($updatedLines | ConvertTo-Json -Depth 10)"

            $outputLog = "output.log"
            $errorLog = "error.log"

            $retryCount = 1
            $maxRetries = 10
            $retryOn = @("429 Too Many Requests")

            while ($retryCount -le $maxRetries) {
              $initArguments = @("-chdir=${{ matrix.rootModuleFolderPath }}", "init")
              Write-Host "Running Terraform init with arguments: $($initArguments -join ' ')"
              $process = Start-Process `
                -FilePath "terraform" `
                -ArgumentList $initArguments `
                -RedirectStandardOutput $outputLog `
                -RedirectStandardError $errorLog `
                -PassThru `
                -NoNewWindow `
                -Wait

              if ($process.ExitCode -ne 0) {
                $errorOutput = Get-Content -Path $errorLog -Raw
                $shouldRetry = $false
                foreach($line in $errorOutput) {
                  foreach($retryError in $retryOn) {
                    if ($line -match $retryError) {
                      Write-Host "Retrying Terraform plan due to error: $line"
                      $shouldRetry = $true
                      break
                    }
                  }
                  if ($shouldRetry) {
                    break
                  }
                }

                if ($retryOn -contains $errorOutput) {
                  Write-Host "Retrying Terraform init due to error: $errorOutput"
                  $retryCount++
                  continue
                } else {
                  Write-Host "Terraform init failed with exit code $($process.ExitCode). Check the logs for details."
                  Write-Host "Output Log:"
                  Get-Content -Path $outputLog | Write-Host
                  Write-Host "Error Log:"
                  Get-Content -Path $errorLog | Write-Host
                  exit 1
                }
                break
              }

              $planArguments = @("-chdir=${{ matrix.rootModuleFolderPath }}", "plan", "-out=tfplan")
              Write-Host "Running Terraform plan with arguments: $($planArguments -join ' ')"
              $process = Start-Process `
                -FilePath "terraform" `
                -ArgumentList $planArguments `
                -RedirectStandardOutput $outputLog `
                -RedirectStandardError $errorLog `
                -PassThru `
                -NoNewWindow `
                -Wait

              if ($process.ExitCode -ne 0) {
                $errorOutput = Get-Content -Path $errorLog
                $shouldRetry = $false
                foreach($line in $errorOutput) {
                  foreach($retryError in $retryOn) {
                    if ($line -match $retryError) {
                      Write-Host "Retrying Terraform plan due to error: $line"
                      $shouldRetry = $true
                      break
                    }
                  }
                  if ($shouldRetry) {
                    break
                  }
                }

                if ($shouldRetry) {
                  Write-Host "Retrying Terraform plan due to error: $errorOutput"
                  $retryCount++
                  continue
                } else {
                  Write-Host "Terraform plan failed with exit code $($process.ExitCode). Check the logs for details."
                  Write-Host "Output Log:"
                  Get-Content -Path $outputLog | Write-Host
                  Write-Host "Error Log:"
                  Get-Content -Path $errorLog | Write-Host
                  exit 1
                }
              }
            }



            terraform -chdir="${{ matrix.rootModuleFolderPath }}" show -json tfplan > tfplan.json
            $planJson = Get-Content -Raw tfplan.json
            $planObject = ConvertFrom-Json $planJson -Depth 100

            $items = @{}
            foreach($change in $planObject.resource_changes) {
              $key = [System.String]::Join("-", $change.change.actions)
              if(!$items.ContainsKey($key)) {
                $items[$key] = 0
              }
              $items[$key]++
            }

            Write-Host "Plan Summary"
            Write-Host (ConvertTo-Json $items -Depth 10)
            Write-Host "Terraform plan completed successfully for combination $combinationNumber of $($combinations.Count)."
            $combinationNumber++
          }
        shell: pwsh
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_USE_OIDC: true

