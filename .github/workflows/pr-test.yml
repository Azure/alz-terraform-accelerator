---
name: PR Tests

on:
  pull_request:
    branches:
      - main
    types: ['opened', 'reopened', 'synchronize', 'labeled']
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  define-matrix:
    name: Define Matrix
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Generate Matrix
        id: matrix
        run: |
          $matrix = .github/tests/scripts/generate-matrix.ps1 -runNumber "${{ github.run_number }}" -primaryTestMode "plan"
          $matrixJson = ConvertTo-Json $matrix -Depth 10 -Compress
          Write-Host (ConvertTo-Json $matrix -Depth 10)
          Write-Output "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
        shell: pwsh

  e2e-test:
    needs: define-matrix
    name: "${{ matrix.name }} (${{ matrix.ShortName }})"
    environment: 'CSUTF'
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: 1.9.7
          terraform_wrapper: false

      - name: Setup Module Inputs
        run: |
          $mode = "${{ matrix.mode }}"
          $subscriptionModulePath = ".github/tests/subscription_lookup"

          $subscriptionNameConnectivity = "${{ matrix.subscriptionNameConnectivity }}"
          $subscriptionNameManagement = "${{ matrix.subscriptionNameManagement }}"
          $subscriptionNameIdentity = "${{ matrix.subscriptionNameIdentity }}"

          $tfvars = @{
            subscription_display_name_connectivity = $subscriptionNameConnectivity
            subscription_display_name_management   = $subscriptionNameManagement
            subscription_display_name_identity     = $subscriptionNameIdentity
          }

          $tfvars | ConvertTo-Json -Depth 10 | Out-File -FilePath "$subscriptionModulePath/terraform.tfvars.json" -Encoding utf8 -Force

          terraform -chdir="$subscriptionModulePath" init
          terraform -chdir="$subscriptionModulePath" apply -auto-approve -input=false
          $subscriptionIdConnectivity = (terraform -chdir="$subscriptionModulePath" output -raw subscription_id_connectivity)
          $subscriptionIdManagement = (terraform -chdir="$subscriptionModulePath" output -raw subscription_id_management)
          $subscriptionIdIdentity = (terraform -chdir="$subscriptionModulePath" output -raw subscription_id_identity)

          Write-Host "Subscription ID Connectivity: $subscriptionIdConnectivity"
          Write-Host "Subscription ID Management: $subscriptionIdManagement"
          Write-Host "Subscription ID Identity: $subscriptionIdIdentity"

          $tfvarsFile = @"
          starter_locations               = ["uksouth", "ukwest"]
          subscription_id_connectivity    = "$subscriptionIdConnectivity"
          subscription_id_identity        = "$subscriptionIdManagement"
          subscription_id_management      = "$subscriptionIdIdentity"
          root_parent_management_group_id = "${{ matrix.managementGroupId }}"
          "@

          $tfvarsFile | Out-File -FilePath "${{ matrix.rootModuleFolderPath }}/terraform.tfvars" -Encoding utf8 -Force
          Write-Debug $tfvarsFile

          if($mode -ne "apply") {
            exit 0
          }

          $subscriptions = @(
            @{
              ID = $subscriptionIdConnectivity
              Name = $subscriptionNameConnectivity
            },
            @{
              ID = $subscriptionIdManagement
              Name = $subscriptionNameManagement
            },
            @{
              ID = $subscriptionIdIdentity
              Name = $subscriptionNameIdentity
            }
          )

          foreach ($subscription in $subscriptions) {
            Write-Host "Running an apply against the $($subscription.Name) subscription to ensure the resource providers are registered. This may take a few minutes the first time it is run."
            $env:ARM_SUBSCRIPTION_ID = $subscription.ID
            terraform -chdir="$subscriptionModulePath" apply -auto-approve -input=false
          }

        shell: pwsh
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_USE_OIDC: true

      - name: Run Terraform
        run: |
          $mode = "${{ matrix.mode }}"
          $sourceVarFilePath = "${{ matrix.configFilePath }}"
          $rootModuleFolderPath = "${{ matrix.rootModuleFolderPath }}"
          $splitNumber = ${{ matrix.splitNumber }}
          $splitIncrement = ${{ matrix.splitIncrement }}
          $shortName = "${{ matrix.ShortName }}"
          $subscriptionName = "${{ matrix.subscriptionName }}"
          $managementGroupId = "${{ matrix.managementGroupId }}"

          Write-Host "Running on subscription: $subscriptionName, management group: $managementGroupId, split number: $splitNumber, mode: $mode"

          $success = .github/tests/scripts/terraform-run.ps1 `
            -mode $mode `
            -rootModuleFolderPath $rootModuleFolderPath `
            -sourceVarFilePath $sourceVarFilePath `
            -splitNumber $splitNumber `
            -splitIncrement $splitIncrement `
            -shortName $shortName `
            -logFolder "./logs"

          if(-not $success) {
            Write-Host "Terraform run failed."
            exit 1
          }

        shell: pwsh
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_USE_OIDC: true
