
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.hub_and_spoke_vnet[0].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_management_lock.rg_lock["primary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_lock" "rg_lock" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m lock_level = "CanNotDelete"
      [32m+[0m[0m name       = "lock-rg-connectivity-uksouth"
      [32m+[0m[0m scope      = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_management_lock.rg_lock["secondary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_lock" "rg_lock" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m lock_level = "CanNotDelete"
      [32m+[0m[0m name       = "lock-rg-connectivity-ukwest"
      [32m+[0m[0m scope      = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_resource_group.rg["primary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "uksouth"
      [32m+[0m[0m name     = "rg-connectivity-uksouth"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_resource_group.rg["secondary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "ukwest"
      [32m+[0m[0m name     = "rg-connectivity-ukwest"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_route.default_route["primary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_route" "default_route" {
      [32m+[0m[0m address_prefix      = "0.0.0.0/0"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "internet"
      [32m+[0m[0m next_hop_type       = "Internet"
      [32m+[0m[0m resource_group_name = "rg-connectivity-uksouth"
      [32m+[0m[0m route_table_name    = "route-primary"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_route.default_route["secondary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_route" "default_route" {
      [32m+[0m[0m address_prefix      = "0.0.0.0/0"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "internet"
      [32m+[0m[0m next_hop_type       = "Internet"
      [32m+[0m[0m resource_group_name = "rg-connectivity-ukwest"
      [32m+[0m[0m route_table_name    = "route-secondary"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_subnet.fw_subnet["primary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "fw_subnet" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.1.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "AzureFirewallSubnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "rg-connectivity-uksouth"
      [32m+[0m[0m virtual_network_name                           = "vnet-hub-uksouth"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_subnet.fw_subnet["secondary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "fw_subnet" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.1.1.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "AzureFirewallSubnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "rg-connectivity-ukwest"
      [32m+[0m[0m virtual_network_name                           = "vnet-hub-ukwest"
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_subnet_route_table_association.fw_subnet_routing["primary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "fw_subnet_routing" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].azurerm_subnet_route_table_association.fw_subnet_routing["secondary"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "fw_subnet_routing" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.management_groups[0].azapi_resource.data_collection_rule["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "data_collection_rule" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m dataFlows    = [
                  [32m+[0m[0m {
                      [32m+[0m[0m destinations = [
                          [32m+[0m[0m "Microsoft-CT-Dest",
                        ]
                      [32m+[0m[0m streams      = [
                          [32m+[0m[0m "Microsoft-ConfigurationChange",
                          [32m+[0m[0m "Microsoft-ConfigurationChangeV2",
                          [32m+[0m[0m "Microsoft-ConfigurationData",
                        ]
                    },
                ]
              [32m+[0m[0m dataSources  = {
                  [32m+[0m[0m extensions = [
                      [32m+[0m[0m {
                          [32m+[0m[0m extensionName     = "ChangeTracking-Windows"
                          [32m+[0m[0m extensionSettings = {
                              [32m+[0m[0m enableFiles       = true
                              [32m+[0m[0m enableInventory   = true
                              [32m+[0m[0m enableRegistry    = true
                              [32m+[0m[0m enableServices    = true
                              [32m+[0m[0m enableSoftware    = true
                              [32m+[0m[0m fileSettings      = {
                                  [32m+[0m[0m fileCollectionFrequency = 2700
                                }
                              [32m+[0m[0m inventorySettings = {
                                  [32m+[0m[0m inventoryCollectionFrequency = 36000
                                }
                              [32m+[0m[0m registrySettings  = {
                                  [32m+[0m[0m registryCollectionFrequency = 3600
                                  [32m+[0m[0m registryInfo                = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup"
                                          [32m+[0m[0m name        = "Registry_1"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Shutdown"
                                          [32m+[0m[0m name        = "Registry_2"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run"
                                          [32m+[0m[0m name        = "Registry_3"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components"
                                          [32m+[0m[0m name        = "Registry_4"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\ShellEx\\ContextMenuHandlers"
                                          [32m+[0m[0m name        = "Registry_5"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\Background\\ShellEx\\ContextMenuHandlers"
                                          [32m+[0m[0m name        = "Registry_6"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\Shellex\\CopyHookHandlers"
                                          [32m+[0m[0m name        = "Registry_7"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers"
                                          [32m+[0m[0m name        = "Registry_8"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers"
                                          [32m+[0m[0m name        = "Registry_9"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects"
                                          [32m+[0m[0m name        = "Registry_10"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects"
                                          [32m+[0m[0m name        = "Registry_11"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\\Extensions"
                                          [32m+[0m[0m name        = "Registry_12"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Internet Explorer\\Extensions"
                                          [32m+[0m[0m name        = "Registry_13"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Drivers32"
                                          [32m+[0m[0m name        = "Registry_14"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Drivers32"
                                          [32m+[0m[0m name        = "Registry_15"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\KnownDlls"
                                          [32m+[0m[0m name        = "Registry_16"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m description = ""
                                          [32m+[0m[0m enabled     = false
                                          [32m+[0m[0m groupTag    = "Recommended"
                                          [32m+[0m[0m keyName     = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify"
                                          [32m+[0m[0m name        = "Registry_17"
                                          [32m+[0m[0m recurse     = true
                                          [32m+[0m[0m valueName   = ""
                                        },
                                    ]
                                }
                              [32m+[0m[0m servicesSettings  = {
                                  [32m+[0m[0m serviceCollectionFrequency = 1800
                                }
                              [32m+[0m[0m softwareSettings  = {
                                  [32m+[0m[0m softwareCollectionFrequency = 1800
                                }
                            }
                          [32m+[0m[0m name              = "CTDataSource-Windows"
                          [32m+[0m[0m streams           = [
                              [32m+[0m[0m "Microsoft-ConfigurationChange",
                              [32m+[0m[0m "Microsoft-ConfigurationChangeV2",
                              [32m+[0m[0m "Microsoft-ConfigurationData",
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m extensionName     = "ChangeTracking-Linux"
                          [32m+[0m[0m extensionSettings = {
                              [32m+[0m[0m enableFiles       = true
                              [32m+[0m[0m enableInventory   = true
                              [32m+[0m[0m enableRegistry    = false
                              [32m+[0m[0m enableServices    = true
                              [32m+[0m[0m enableSoftware    = true
                              [32m+[0m[0m fileSettings      = {
                                  [32m+[0m[0m fileCollectionFrequency = 900
                                  [32m+[0m[0m fileInfo                = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m destinationPath       = "/etc/.*.conf"
                                          [32m+[0m[0m enabled               = true
                                          [32m+[0m[0m groupTag              = "Recommended"
                                          [32m+[0m[0m links                 = "Follow"
                                          [32m+[0m[0m maxContentsReturnable = 5000000
                                          [32m+[0m[0m maxOutputSize         = 500000
                                          [32m+[0m[0m name                  = "ChangeTrackingLinuxPath_default"
                                          [32m+[0m[0m pathType              = "File"
                                          [32m+[0m[0m recurse               = true
                                          [32m+[0m[0m type                  = "File"
                                          [32m+[0m[0m useSudo               = true
                                        },
                                    ]
                                }
                              [32m+[0m[0m inventorySettings = {
                                  [32m+[0m[0m inventoryCollectionFrequency = 36000
                                }
                              [32m+[0m[0m servicesSettings  = {
                                  [32m+[0m[0m serviceCollectionFrequency = 300
                                }
                              [32m+[0m[0m softwareSettings  = {
                                  [32m+[0m[0m softwareCollectionFrequency = 300
                                }
                            }
                          [32m+[0m[0m name              = "CTDataSource-Linux"
                          [32m+[0m[0m streams           = [
                              [32m+[0m[0m "Microsoft-ConfigurationChange",
                              [32m+[0m[0m "Microsoft-ConfigurationChangeV2",
                              [32m+[0m[0m "Microsoft-ConfigurationData",
                            ]
                        },
                    ]
                }
              [32m+[0m[0m description  = "Data collection rule for CT"
              [32m+[0m[0m destinations = {
                  [32m+[0m[0m logAnalytics = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name                = "Microsoft-CT-Dest"
                          [32m+[0m[0m workspaceResourceId = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                        },
                    ]
                }
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = "uksouth"
      [32m+[0m[0m name                      = "Enterprise-Scale-dcr-changetracking-prod"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth"
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m type                      = "Microsoft.Insights/dataCollectionRules@2021-04-01"
    }

[1m  # module.management_groups[0].azapi_resource.data_collection_rule["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-defendersql-prod"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "data_collection_rule" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m dataFlows    = [
                  [32m+[0m[0m {
                      [32m+[0m[0m destinations = [
                          [32m+[0m[0m "LogAnalyticsDest",
                        ]
                      [32m+[0m[0m streams      = [
                          [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                          [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                          [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                          [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                          [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                        ]
                    },
                ]
              [32m+[0m[0m dataSources  = {
                  [32m+[0m[0m extensions = [
                      [32m+[0m[0m {
                          [32m+[0m[0m extensionName     = "MicrosoftDefenderForSQL"
                          [32m+[0m[0m extensionSettings = {
                              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = true
                            }
                          [32m+[0m[0m name              = "MicrosoftDefenderForSQL"
                          [32m+[0m[0m streams           = [
                              [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                              [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                              [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                              [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                              [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                            ]
                        },
                    ]
                }
              [32m+[0m[0m description  = "Data collection rule for Defender for SQL."
              [32m+[0m[0m destinations = {
                  [32m+[0m[0m logAnalytics = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name                = "LogAnalyticsDest"
                          [32m+[0m[0m workspaceResourceId = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                        },
                    ]
                }
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = "uksouth"
      [32m+[0m[0m name                      = "Enterprise-Scale-dcr-defendersql-prod"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth"
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m type                      = "Microsoft.Insights/dataCollectionRules@2021-04-01"
    }

[1m  # module.management_groups[0].azapi_resource.data_collection_rule["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "data_collection_rule" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m dataFlows    = [
                  [32m+[0m[0m {
                      [32m+[0m[0m destinations = [
                          [32m+[0m[0m "VMInsightsPerf-Logs-Dest",
                        ]
                      [32m+[0m[0m streams      = [
                          [32m+[0m[0m "Microsoft-InsightsMetrics",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m destinations = [
                          [32m+[0m[0m "VMInsightsPerf-Logs-Dest",
                        ]
                      [32m+[0m[0m streams      = [
                          [32m+[0m[0m "Microsoft-ServiceMap",
                        ]
                    },
                ]
              [32m+[0m[0m dataSources  = {
                  [32m+[0m[0m extensions          = [
                      [32m+[0m[0m {
                          [32m+[0m[0m extensionName     = "DependencyAgent"
                          [32m+[0m[0m extensionSettings = {}
                          [32m+[0m[0m name              = "DependencyAgentDataSource"
                          [32m+[0m[0m streams           = [
                              [32m+[0m[0m "Microsoft-ServiceMap",
                            ]
                        },
                    ]
                  [32m+[0m[0m performanceCounters = [
                      [32m+[0m[0m {
                          [32m+[0m[0m counterSpecifiers          = [
                              [32m+[0m[0m "\\VmInsights\\DetailedMetrics",
                            ]
                          [32m+[0m[0m name                       = "VMInsightsPerfCounters"
                          [32m+[0m[0m samplingFrequencyInSeconds = 60
                          [32m+[0m[0m scheduledTransferPeriod    = "PT1M"
                          [32m+[0m[0m streams                    = [
                              [32m+[0m[0m "Microsoft-InsightsMetrics",
                            ]
                        },
                    ]
                }
              [32m+[0m[0m description  = "Data collection rule for VM Insights."
              [32m+[0m[0m destinations = {
                  [32m+[0m[0m logAnalytics = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name                = "VMInsightsPerf-Logs-Dest"
                          [32m+[0m[0m workspaceResourceId = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                        },
                    ]
                }
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = "uksouth"
      [32m+[0m[0m name                      = "Enterprise-Scale-dcr-vm-insights"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth"
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = false
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m type                      = "Microsoft.Insights/dataCollectionRules@2021-04-01"
    }

[1m  # module.management_groups[0].azurerm_automation_account.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Automation/automationAccounts/aa-management-uksouth"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_automation_account" "management" {
      [32m+[0m[0m dsc_primary_access_key        = (sensitive value)
      [32m+[0m[0m dsc_secondary_access_key      = (sensitive value)
      [32m+[0m[0m dsc_server_endpoint           = (known after apply)
      [32m+[0m[0m hybrid_service_url            = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m local_authentication_enabled  = true
      [32m+[0m[0m location                      = "uksouth"
      [32m+[0m[0m name                          = "aa-management-uksouth"
      [32m+[0m[0m private_endpoint_connection   = (known after apply)
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m resource_group_name           = "rg-management-uksouth"
      [32m+[0m[0m sku_name                      = "Basic"
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
    }

[1m  # module.management_groups[0].azurerm_log_analytics_linked_service.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth/linkedServices/Automation"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_linked_service" "management" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = (known after apply)
      [32m+[0m[0m read_access_id      = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Automation/automationAccounts/aa-management-uksouth"
      [32m+[0m[0m resource_group_name = "rg-management-uksouth"
      [32m+[0m[0m workspace_id        = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
    }

[1m  # module.management_groups[0].azurerm_log_analytics_solution.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationsManagement/solutions/ChangeTracking(log-management-uksouth)"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "management" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "uksouth"
      [32m+[0m[0m resource_group_name   = "rg-management-uksouth"
      [32m+[0m[0m solution_name         = "ChangeTracking"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m workspace_name        = "log-management-uksouth"
      [32m+[0m[0m workspace_resource_id = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/ChangeTracking"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # module.management_groups[0].azurerm_log_analytics_solution.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationsManagement/solutions/ContainerInsights(log-management-uksouth)"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "management" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "uksouth"
      [32m+[0m[0m resource_group_name   = "rg-management-uksouth"
      [32m+[0m[0m solution_name         = "ContainerInsights"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m workspace_name        = "log-management-uksouth"
      [32m+[0m[0m workspace_resource_id = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/ContainerInsights"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # module.management_groups[0].azurerm_log_analytics_solution.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationsManagement/solutions/SecurityInsights(log-management-uksouth)"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "management" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "uksouth"
      [32m+[0m[0m resource_group_name   = "rg-management-uksouth"
      [32m+[0m[0m solution_name         = "SecurityInsights"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m workspace_name        = "log-management-uksouth"
      [32m+[0m[0m workspace_resource_id = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/SecurityInsights"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # module.management_groups[0].azurerm_log_analytics_solution.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationsManagement/solutions/VMInsights(log-management-uksouth)"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "management" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "uksouth"
      [32m+[0m[0m resource_group_name   = "rg-management-uksouth"
      [32m+[0m[0m solution_name         = "VMInsights"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m workspace_name        = "log-management-uksouth"
      [32m+[0m[0m workspace_resource_id = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/VMInsights"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # module.management_groups[0].azurerm_log_analytics_workspace.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_workspace" "management" {
      [32m+[0m[0m allow_resource_only_permissions = true
      [32m+[0m[0m daily_quota_gb                  = -1
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m internet_ingestion_enabled      = true
      [32m+[0m[0m internet_query_enabled          = true
      [32m+[0m[0m local_authentication_disabled   = false
      [32m+[0m[0m location                        = "uksouth"
      [32m+[0m[0m name                            = "log-management-uksouth"
      [32m+[0m[0m primary_shared_key              = (sensitive value)
      [32m+[0m[0m resource_group_name             = "rg-management-uksouth"
      [32m+[0m[0m retention_in_days               = 50
      [32m+[0m[0m secondary_shared_key            = (sensitive value)
      [32m+[0m[0m sku                             = "PerGB2018"
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m workspace_id                    = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_1["/providers/Microsoft.Management/managementGroups/Enterprise-Scale"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_1" {
      [32m+[0m[0m display_name               = "es"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/6da17bdb-c2cc-4a35-8f10-cded38ebfc47"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_2["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_2" {
      [32m+[0m[0m display_name               = "Decommissioned"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-decommissioned"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_2["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_2" {
      [32m+[0m[0m display_name               = "Landing Zones"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-landing-zones"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_2["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_2" {
      [32m+[0m[0m display_name               = "Platform"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-platform"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_2["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-sandboxes"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_2" {
      [32m+[0m[0m display_name               = "Sandboxes"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-sandboxes"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_3["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_3" {
      [32m+[0m[0m display_name               = "Connectivity"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-connectivity"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m subscription_ids           = [
          [32m+[0m[0m "a4225384-b567-4381-9ca4-13f5e2e5ab6c",
        ]
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_3["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_3" {
      [32m+[0m[0m display_name               = "Corp"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-corp"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_3["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_3" {
      [32m+[0m[0m display_name               = "Identity"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-identity"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m subscription_ids           = [
          [32m+[0m[0m "8d9d4b7c-8fbd-4802-8d82-fac743578a2c",
        ]
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_3["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_3" {
      [32m+[0m[0m display_name               = "Management"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-management"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m subscription_ids           = [
          [32m+[0m[0m "67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1",
        ]
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group.level_3["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-online"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group" "level_3" {
      [32m+[0m[0m display_name               = "Online"
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m name                       = "Enterprise-Scale-online"
      [32m+[0m[0m parent_management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m subscription_ids           = (known after apply)
      [32m+[0m[0m tenant_scoped_id           = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs."
      [32m+[0m[0m display_name         = "Virtual networks should be protected by Azure DDoS Network Protection"
      [32m+[0m[0m enforce              = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enable-DDoS-VNET"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m ddosPlan = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-ddos/providers/Microsoft.Network/ddosProtectionPlans/Enterprise-Scale-ddos-uksouth"
                }
              [32m+[0m[0m effect   = {
                  [32m+[0m[0m value = "Modify"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource should be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Audit-PeDnsZones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Audits the deployment of Private Link Private DNS Zone resources in the Corp landing zone."
      [32m+[0m[0m display_name         = "Audit Private Link Private DNS Zone resources"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-PeDnsZones"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect              = {
                  [32m+[0m[0m value = "Audit"
                }
              [32m+[0m[0m privateLinkDnsZones = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "privatelink.adf.azure.com",
                      [32m+[0m[0m "privatelink.afs.azure.net",
                      [32m+[0m[0m "privatelink.agentsvc.azure-automation.net",
                      [32m+[0m[0m "privatelink.analysis.windows.net",
                      [32m+[0m[0m "privatelink.api.azureml.ms",
                      [32m+[0m[0m "privatelink.azconfig.io",
                      [32m+[0m[0m "privatelink.azure-api.net",
                      [32m+[0m[0m "privatelink.azure-automation.net",
                      [32m+[0m[0m "privatelink.azurecr.io",
                      [32m+[0m[0m "privatelink.azure-devices.net",
                      [32m+[0m[0m "privatelink.azure-devices-provisioning.net",
                      [32m+[0m[0m "privatelink.azuredatabricks.net",
                      [32m+[0m[0m "privatelink.azurehdinsight.net",
                      [32m+[0m[0m "privatelink.azurehealthcareapis.com",
                      [32m+[0m[0m "privatelink.azurestaticapps.net",
                      [32m+[0m[0m "privatelink.azuresynapse.net",
                      [32m+[0m[0m "privatelink.azurewebsites.net",
                      [32m+[0m[0m "privatelink.batch.azure.com",
                      [32m+[0m[0m "privatelink.blob.core.windows.net",
                      [32m+[0m[0m "privatelink.cassandra.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.cognitiveservices.azure.com",
                      [32m+[0m[0m "privatelink.database.windows.net",
                      [32m+[0m[0m "privatelink.datafactory.azure.net",
                      [32m+[0m[0m "privatelink.dev.azuresynapse.net",
                      [32m+[0m[0m "privatelink.dfs.core.windows.net",
                      [32m+[0m[0m "privatelink.dicom.azurehealthcareapis.com",
                      [32m+[0m[0m "privatelink.digitaltwins.azure.net",
                      [32m+[0m[0m "privatelink.directline.botframework.com",
                      [32m+[0m[0m "privatelink.documents.azure.com",
                      [32m+[0m[0m "privatelink.eventgrid.azure.net",
                      [32m+[0m[0m "privatelink.file.core.windows.net",
                      [32m+[0m[0m "privatelink.gremlin.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.guestconfiguration.azure.com",
                      [32m+[0m[0m "privatelink.his.arc.azure.com",
                      [32m+[0m[0m "privatelink.kubernetesconfiguration.azure.com",
                      [32m+[0m[0m "privatelink.managedhsm.azure.net",
                      [32m+[0m[0m "privatelink.mariadb.database.azure.com",
                      [32m+[0m[0m "privatelink.media.azure.net",
                      [32m+[0m[0m "privatelink.mongo.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.monitor.azure.com",
                      [32m+[0m[0m "privatelink.mysql.database.azure.com",
                      [32m+[0m[0m "privatelink.notebooks.azure.net",
                      [32m+[0m[0m "privatelink.ods.opinsights.azure.com",
                      [32m+[0m[0m "privatelink.oms.opinsights.azure.com",
                      [32m+[0m[0m "privatelink.pbidedicated.windows.net",
                      [32m+[0m[0m "privatelink.postgres.database.azure.com",
                      [32m+[0m[0m "privatelink.prod.migration.windowsazure.com",
                      [32m+[0m[0m "privatelink.purview.azure.com",
                      [32m+[0m[0m "privatelink.purviewstudio.azure.com",
                      [32m+[0m[0m "privatelink.queue.core.windows.net",
                      [32m+[0m[0m "privatelink.redis.cache.windows.net",
                      [32m+[0m[0m "privatelink.redisenterprise.cache.azure.net",
                      [32m+[0m[0m "privatelink.search.windows.net",
                      [32m+[0m[0m "privatelink.service.signalr.net",
                      [32m+[0m[0m "privatelink.servicebus.windows.net",
                      [32m+[0m[0m "privatelink.siterecovery.windowsazure.com",
                      [32m+[0m[0m "privatelink.sql.azuresynapse.net",
                      [32m+[0m[0m "privatelink.table.core.windows.net",
                      [32m+[0m[0m "privatelink.table.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.tip1.powerquery.microsoft.com",
                      [32m+[0m[0m "privatelink.token.botframework.com",
                      [32m+[0m[0m "privatelink.vaultcore.azure.net",
                      [32m+[0m[0m "privatelink.web.core.windows.net",
                      [32m+[0m[0m "privatelink.webpubsub.azure.com",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Private Link Private DNS Zone resources must be deployed in the Corp landing zone."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-HybridNetworking"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Denies deployment of vWAN/ER/VPN gateway resources in the Corp landing zone."
      [32m+[0m[0m display_name         = "Deny the deployment of vWAN/ER/VPN gateway resources"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-HybridNetworking"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect                        = {
                  [32m+[0m[0m value = "Deny"
                }
              [32m+[0m[0m listOfResourceTypesNotAllowed = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "microsoft.network/expressroutecircuits",
                      [32m+[0m[0m "microsoft.network/expressroutegateways",
                      [32m+[0m[0m "microsoft.network/expressrouteports",
                      [32m+[0m[0m "microsoft.network/virtualwans",
                      [32m+[0m[0m "microsoft.network/virtualhubs",
                      [32m+[0m[0m "microsoft.network/vpngateways",
                      [32m+[0m[0m "microsoft.network/p2svpngateways",
                      [32m+[0m[0m "microsoft.network/vpnsites",
                      [32m+[0m[0m "microsoft.network/virtualnetworkgateways",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "vWAN/ER/VPN gateway resources must not be deployed in the Corp landing zone."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-Endpoints"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy initiative is a group of policies that prevents creation of Azure PaaS services with exposed public endpoints"
      [32m+[0m[0m display_name         = "Public network access should be disabled for PaaS services"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Public-Endpoints"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Public network access must be disabled for PaaS services."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP-On-NIC"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies network interfaces from having a public IP associated to it under the assigned scope."
      [32m+[0m[0m display_name         = "Deny network interfaces having a public IP associated"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Public-IP-On-NIC"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83a86a26-fd1f-447c-b59d-e51f44264114"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Network interfaces must not have a public IP associated."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy initiative is a group of policies that ensures private endpoints to Azure PaaS services are integrated with Azure Private DNS zones"
      [32m+[0m[0m display_name         = "Configure Azure PaaS services to use private DNS zones"
      [32m+[0m[0m enforce              = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-Private-DNS-Zones"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m azureAcrPrivateDnsZoneId                            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io"
                }
              [32m+[0m[0m azureAppPrivateDnsZoneId                            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azconfig.io"
                }
              [32m+[0m[0m azureAppServicesPrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azurewebsites.net"
                }
              [32m+[0m[0m azureArcGuestconfigurationPrivateDnsZoneId          = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.guestconfiguration.azure.com"
                }
              [32m+[0m[0m azureArcHybridResourceProviderPrivateDnsZoneId      = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.his.arc.azure.com"
                }
              [32m+[0m[0m azureArcKubernetesConfigurationPrivateDnsZoneId     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.dp.kubernetesconfiguration.azure.com"
                }
              [32m+[0m[0m azureAsrPrivateDnsZoneId                            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.siterecovery.windowsazure.com"
                }
              [32m+[0m[0m azureAutomationDSCHybridPrivateDnsZoneId            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azure-automation.net"
                }
              [32m+[0m[0m azureAutomationWebhookPrivateDnsZoneId              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azure-automation.net"
                }
              [32m+[0m[0m azureBatchPrivateDnsZoneId                          = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.batch.azure.com"
                }
              [32m+[0m[0m azureBotServicePrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.directline.botframework.com"
                }
              [32m+[0m[0m azureCognitiveSearchPrivateDnsZoneId                = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.search.windows.net"
                }
              [32m+[0m[0m azureCognitiveServicesPrivateDnsZoneId              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.cognitiveservices.azure.com"
                }
              [32m+[0m[0m azureCosmosCassandraPrivateDnsZoneId                = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.cassandra.cosmos.azure.com"
                }
              [32m+[0m[0m azureCosmosGremlinPrivateDnsZoneId                  = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.gremlin.cosmos.azure.com"
                }
              [32m+[0m[0m azureCosmosMongoPrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.mongo.cosmos.azure.com"
                }
              [32m+[0m[0m azureCosmosSQLPrivateDnsZoneId                      = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.documents.azure.com"
                }
              [32m+[0m[0m azureCosmosTablePrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.table.cosmos.azure.com"
                }
              [32m+[0m[0m azureDataFactoryPortalPrivateDnsZoneId              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com"
                }
              [32m+[0m[0m azureDataFactoryPrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net"
                }
              [32m+[0m[0m azureDatabricksPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net"
                }
              [32m+[0m[0m azureDiskAccessPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
                }
              [32m+[0m[0m azureEventGridDomainsPrivateDnsZoneId               = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.eventgrid.azure.net"
                }
              [32m+[0m[0m azureEventGridTopicsPrivateDnsZoneId                = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.eventgrid.azure.net"
                }
              [32m+[0m[0m azureEventHubNamespacePrivateDnsZoneId              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net"
                }
              [32m+[0m[0m azureFilePrivateDnsZoneId                           = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.afs.azure.net"
                }
              [32m+[0m[0m azureHDInsightPrivateDnsZoneId                      = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azurehdinsight.net"
                }
              [32m+[0m[0m azureIotCentralPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azureiotcentral.com"
                }
              [32m+[0m[0m azureIotDeviceupdatePrivateDnsZoneId                = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azure-devices.net"
                }
              [32m+[0m[0m azureIotHubsPrivateDnsZoneId                        = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azure-devices.net"
                }
              [32m+[0m[0m azureIotPrivateDnsZoneId                            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.azure-devices-provisioning.net"
                }
              [32m+[0m[0m azureKeyVaultPrivateDnsZoneId                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net"
                }
              [32m+[0m[0m azureMachineLearningWorkspacePrivateDnsZoneId       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.api.azureml.ms"
                }
              [32m+[0m[0m azureMachineLearningWorkspaceSecondPrivateDnsZoneId = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.notebooks.azure.net"
                }
              [32m+[0m[0m azureManagedGrafanaWorkspacePrivateDnsZoneId        = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.grafana.azure.com"
                }
              [32m+[0m[0m azureMediaServicesKeyPrivateDnsZoneId               = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.media.azure.net"
                }
              [32m+[0m[0m azureMediaServicesLivePrivateDnsZoneId              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.media.azure.net"
                }
              [32m+[0m[0m azureMediaServicesStreamPrivateDnsZoneId            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.media.azure.net"
                }
              [32m+[0m[0m azureMigratePrivateDnsZoneId                        = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.prod.migration.windowsazure.com"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId1                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.monitor.azure.com"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId2                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.oms.opinsights.azure.com"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId3                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.ods.opinsights.azure.com"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId4                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.agentsvc.azure-automation.net"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId5                       = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
                }
              [32m+[0m[0m azureRedisCachePrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.redis.cache.windows.net"
                }
              [32m+[0m[0m azureServiceBusNamespacePrivateDnsZoneId            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net"
                }
              [32m+[0m[0m azureSignalRPrivateDnsZoneId                        = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.service.signalr.net"
                }
              [32m+[0m[0m azureSiteRecoveryBackupPrivateDnsZoneID             = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.uks.backup.windowsazure.com"
                }
              [32m+[0m[0m azureSiteRecoveryBlobPrivateDnsZoneID               = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
                }
              [32m+[0m[0m azureSiteRecoveryQueuePrivateDnsZoneID              = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.queue.core.windows.net"
                }
              [32m+[0m[0m azureStorageBlobPrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
                }
              [32m+[0m[0m azureStorageBlobSecPrivateDnsZoneId                 = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
                }
              [32m+[0m[0m azureStorageDFSPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"
                }
              [32m+[0m[0m azureStorageDFSSecPrivateDnsZoneId                  = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"
                }
              [32m+[0m[0m azureStorageFilePrivateDnsZoneId                    = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
                }
              [32m+[0m[0m azureStorageQueuePrivateDnsZoneId                   = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.queue.core.windows.net"
                }
              [32m+[0m[0m azureStorageQueueSecPrivateDnsZoneId                = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.queue.core.windows.net"
                }
              [32m+[0m[0m azureStorageStaticWebPrivateDnsZoneId               = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.web.core.windows.net"
                }
              [32m+[0m[0m azureStorageStaticWebSecPrivateDnsZoneId            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.web.core.windows.net"
                }
              [32m+[0m[0m azureStorageTablePrivateDnsZoneId                   = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net"
                }
              [32m+[0m[0m azureStorageTableSecondaryPrivateDnsZoneId          = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net"
                }
              [32m+[0m[0m azureSynapseDevPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.dev.azuresynapse.net"
                }
              [32m+[0m[0m azureSynapseSQLODPrivateDnsZoneId                   = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.sql.azuresynapse.net"
                }
              [32m+[0m[0m azureSynapseSQLPrivateDnsZoneId                     = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.sql.azuresynapse.net"
                }
              [32m+[0m[0m azureVirtualDesktopHostpoolPrivateDnsZoneId         = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.wvd.microsoft.com"
                }
              [32m+[0m[0m azureVirtualDesktopWorkspacePrivateDnsZoneId        = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.wvd.microsoft.com"
                }
              [32m+[0m[0m azureWebPrivateDnsZoneId                            = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-dns/providers/Microsoft.Network/privateDnsZones/privatelink.webpubsub.azure.com"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure PaaS services should use private DNS zones."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative will help enforce and govern subscriptions that are placed within the decommissioned Management Group as part of your Subscription decommissioning process. See https://aka.ms/alz/policies for more information."
      [32m+[0m[0m display_name         = "Enforce ALZ Decommissioned Guardrails"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-ALZ-Decomm"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m listOfResourceTypesAllowed = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "microsoft.consumption/tags",
                      [32m+[0m[0m "microsoft.authorization/roleassignments",
                      [32m+[0m[0m "microsoft.authorization/roledefinitions",
                      [32m+[0m[0m "microsoft.authorization/policyassignments",
                      [32m+[0m[0m "microsoft.authorization/locks",
                      [32m+[0m[0m "microsoft.authorization/policydefinitions",
                      [32m+[0m[0m "microsoft.authorization/policysetdefinitions",
                      [32m+[0m[0m "microsoft.resources/tags",
                      [32m+[0m[0m "microsoft.authorization/roleeligibilityschedules",
                      [32m+[0m[0m "microsoft.authorization/roleeligibilityscheduleinstances",
                      [32m+[0m[0m "microsoft.authorization/roleassignmentschedules",
                      [32m+[0m[0m "microsoft.authorization/roleassignmentscheduleinstances",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource must be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies any network security rule that allows management port access from the Internet"
      [32m+[0m[0m display_name         = "Management port access from the Internet should be blocked"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-MgmtPorts-Internet"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Management port access from the Internet must be blocked."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies creation of Public IPs under the assigned scope."
      [32m+[0m[0m display_name         = "Deny the creation of public IP"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Public-IP"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect                        = {
                  [32m+[0m[0m value = "Deny"
                }
              [32m+[0m[0m listOfResourceTypesNotAllowed = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "Microsoft.Network/publicIPAddresses",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Public IPs must not be created under this scope."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies the creation of a subnet without a Network Security Group to protect traffic across subnets."
      [32m+[0m[0m display_name         = "Subnets should have a Network Security Group"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Subnet-Without-Nsg"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "Deny"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Subnets must have a Network Security Group."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enforce backup for all virtual machines by deploying a recovery services vault in the same location and resource group as the virtual machine. Doing this is useful when different application teams in your organization are allocated separate resource groups and need to manage their own backups and restores. You can optionally exclude virtual machines containing a specified tag to control the scope of assignment. See https://aka.ms/AzureVMAppCentricBackupExcludeTag."
      [32m+[0m[0m display_name         = "Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-Backup"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m value = "deployIfNotExists"
                }
              [32m+[0m[0m exclusionTagName  = {
                  [32m+[0m[0m value = ""
                }
              [32m+[0m[0m exclusionTagValue = {
                  [32m+[0m[0m value = []
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Backup on virtual machines without a given tag must be configured to a new recovery services vault with a default policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Audit-AppGW-WAF"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Assign the WAF should be enabled for Application Gateway audit policy."
      [32m+[0m[0m display_name         = "Web Application Firewall (WAF) should be enabled for Application Gateway"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-AppGW-WAF"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "Audit"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/564feb30-bf6a-4854-b4bb-0d2d2d1e6c66"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Web Application Firewall (WAF) must be enabled for Application Gateway."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-IP-forwarding"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies the network interfaces which enabled IP forwarding. The setting of IP forwarding disables Azure's check of the source and destination for a network interface. This should be reviewed by the network security team."
      [32m+[0m[0m display_name         = "Network interfaces should disable IP forwarding"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-IP-forwarding"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/88c0b9da-ce96-4b03-9635-f29a937e2900"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Network interfaces must disable IP forwarding."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies any network security rule that allows management port access from the Internet"
      [32m+[0m[0m display_name         = "Management port access from the Internet should be blocked"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-MgmtPorts-Internet"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Management port access from the Internet must be blocked."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Priv-Esc-AKS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Do not allow containers to run with privilege escalation to root in a Kubernetes cluster. This recommendation is part of CIS 5.2.5 which is intended to improve the security of your Kubernetes environments. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For more information, see https://aka.ms/kubepolicydoc."
      [32m+[0m[0m display_name         = "Kubernetes clusters should not allow container privilege escalation"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Priv-Esc-AKS"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "deny"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99"
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Privileged-AKS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Do not allow privileged containers creation in a Kubernetes cluster. This recommendation is part of CIS 5.2.1 which is intended to improve the security of your Kubernetes environments. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For more information, see https://aka.ms/kubepolicydoc."
      [32m+[0m[0m display_name         = "Kubernetes cluster should not allow privileged containers"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Privileged-AKS"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "deny"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/95edb821-ddaf-4404-9732-666045e056b4"
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Storage-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
      [32m+[0m[0m display_name         = "Secure transfer to storage accounts should be enabled"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Storage-http"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "Deny"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/404c3081-a854-4457-ae30-26a93ef643f9"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Secure transfer to storage accounts must be enabled."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy denies the creation of a subnet without a Network Security Group to protect traffic across subnets."
      [32m+[0m[0m display_name         = "Subnets should have a Network Security Group"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Subnet-Without-Nsg"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Subnets must have a Network Security Group."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Use Azure Policy Add-on to manage and report on the compliance state of your Azure Kubernetes Service (AKS) clusters. For more information, see https://aka.ms/akspolicydoc."
      [32m+[0m[0m display_name         = "Deploy Azure Policy Add-on to Azure Kubernetes Service clusters"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-AKS-Policy"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource must be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "To ensure the operations performed against your SQL assets are captured, SQL servers should have auditing enabled. If auditing is not enabled, this policy will configure auditing events to flow to the specified Log Analytics workspace."
      [32m+[0m[0m display_name         = "Configure SQL servers to have auditing enabled to Log Analytics workspace"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-AzSqlDb-Auditing"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m logAnalyticsWorkspaceId = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourcegroups/rg-management-uksouth/providers/microsoft.operationalinsights/workspaces/log-management-uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25da7dfb-0666-4a15-a8f5-402127efd8bb"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "SQL servers must have auditing enabled to Log Analytics workspace."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Microsoft Defender for SQL collects events from the agents and uses them to provide security alerts and tailored hardening tasks (recommendations)."
      [32m+[0m[0m display_name         = "Enable Defender for SQL on SQL VMs and Arc-enabled SQL Servers"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDFC-DefSQL-AMA"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnDcr                                 = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                   = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-defendersql-prod"
                }
              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                  = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
              [32m+[0m[0m userWorkspaceResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                }
              [32m+[0m[0m workspaceRegion                                 = {
                  [32m+[0m[0m value = "uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/de01d381-bae9-4670-8870-786f89f49e26"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Defender for SQL must be deployed."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy ensures that Transparent Data Encryption is enabled on SQL Servers."
      [32m+[0m[0m display_name         = "Deploy TDE on SQL servers"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-SQL-TDE"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "TDE must be deployed on SQL servers."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy ensures that Threat Detection is enabled on SQL Servers."
      [32m+[0m[0m display_name         = "Deploy Threat Detection on SQL servers"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-SQL-Threat"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/36d49e87-48c4-4f2e-beed-ba4ed02b71f5"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Threat Detection must be deployed on SQL servers."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enforce backup for all virtual machines by deploying a recovery services vault in the same location and resource group as the virtual machine. Doing this is useful when different application teams in your organization are allocated separate resource groups and need to manage their own backups and restores. You can optionally exclude virtual machines containing a specified tag to control the scope of assignment. See https://aka.ms/AzureVMAppCentricBackupExcludeTag."
      [32m+[0m[0m display_name         = "Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-Backup"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Backup on virtual machines without a given tag must be configured to a new recovery services vault with a default policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for virtual machines. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations and user-assigned identity for Azure Monitor Agent."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for virtual machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect                                                 = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/92a36f05-ebc9-4bba-9128-b47ad2ea3354"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for the virtual machines (VMs) in the specified scope (management group, subscription or resource group). Takes Log Analytics workspace as parameter."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for VMs"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies                         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m scopeToSupportedImages                                 = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/924bfe3a-762f-40e7-86dd-5c8b95eb09e6"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for virtual machine scale sets. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations and user-assigned identity for Azure Monitor Agent."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for virtual machine scale sets"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VMSS-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect                                                 = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/c4a70814-96be-461c-889f-2b27429120dc"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Virtual Machines Scales Sets."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for the Virtual Machine Scale Sets in the specified scope (Management group, Subscription or resource group). Takes Log Analytics workspace as parameter. Note: if your scale set upgradePolicy is set to Manual, you need to apply the extension to the all VMs in the set by calling upgrade on them. In CLI this would be az vmss update-instances."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for Virtual Machine Scale Sets"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VMSS-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies                         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m scopeToSupportedImages                                 = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/f5bf694c-cca7-4033-b883-3a23327d5485"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Virtual Machines Scales Sets."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for Arc-enabled virtual machines. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for Arc-enabled virtual machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-vmArc-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m dcrResourceId = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect        = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/53448c70-089b-4f52-8f38-89196d7f2de1"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Arc-enabled Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for Hybrid Virtual Machines in the specified scope (Management group, Subscription or resource group)."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for Hybrid Virtual Machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-vmHybr-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m dcrResourceId                  = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies = {
                  [32m+[0m[0m value = true
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/2b00397d-c309-49c4-aa5a-f0b2c5bc6321"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Hybrid Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Configure auto-assessment (every 24 hours) for OS updates. You can control the scope of assignment according to machine subscription, resource group, location or tag. Learn more about this for Windows: https://aka.ms/computevm-windowspatchassessmentmode, for Linux: https://aka.ms/computevm-linuxpatchassessmentmode."
      [32m+[0m[0m display_name         = "Configure periodic checking for missing system updates on azure virtual machines and Arc-enabled virtual machines."
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enable-AUM-CheckUpdates"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m assessmentMode = {
                  [32m+[0m[0m value = "AutomaticByPlatform"
                }
              [32m+[0m[0m locations      = {
                  [32m+[0m[0m value = []
                }
              [32m+[0m[0m tagOperator    = {
                  [32m+[0m[0m value = "Any"
                }
              [32m+[0m[0m tagValues      = {
                  [32m+[0m[0m value = {}
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Periodic checking of missing updates must be enabled."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs."
      [32m+[0m[0m display_name         = "Virtual networks should be protected by Azure DDoS Network Protection"
      [32m+[0m[0m enforce              = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enable-DDoS-VNET"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m ddosPlan = {
                  [32m+[0m[0m value = "/subscriptions/a4225384-b567-4381-9ca4-13f5e2e5ab6c/resourceGroups/Enterprise-Scale-ddos/providers/Microsoft.Network/ddosProtectionPlans/Enterprise-Scale-ddos-uksouth"
                }
              [32m+[0m[0m effect   = {
                  [32m+[0m[0m value = "Modify"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource should be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-AKS-HTTPS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Use of HTTPS ensures authentication and protects data in transit from network layer eavesdropping attacks. This capability is currently generally available for Kubernetes Service (AKS), and in preview for AKS Engine and Azure Arc enabled Kubernetes. For more info, visit https://aka.ms/kubepolicydoc"
      [32m+[0m[0m display_name         = "Kubernetes clusters should be accessible only over HTTPS"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-AKS-HTTPS"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "deny"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d"
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-ASR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative assignment enables recommended ALZ guardrails for Azure Recovery Services."
      [32m+[0m[0m display_name         = "Enforce enhanced recovery and backup policies"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-ASR"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Backup"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Recommended guardrails must be enforced for Azure Recovery Services (Backup and Site Recovery)."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative assignment enables recommended ALZ guardrails for Azure Key Vault."
      [32m+[0m[0m display_name         = "Enforce recommended guardrails for Azure Key Vault"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-GR-KeyVault"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource must be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Choose either Deploy if not exist and append in combination with audit or Select Deny in the Policy effect. Deny polices shift left. Deploy if not exist and append enforce but can be changed, and because missing existence condition require then the combination of Audit."
      [32m+[0m[0m display_name         = "Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-TLS-SSL-H224"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit_20240509"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "TLS and SSL must be enabled for on resources without encryption in transit."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management/providers/Microsoft.Authorization/policyAssignments/Deploy-Log-Analytics"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Deploy resource group containing Log Analytics workspace and linked automation account to centralize logs and monitoring. The automation account is aprerequisite for solutions like Updates and Change Tracking."
      [32m+[0m[0m display_name         = "Configure Log Analytics workspace and automation account to centralize logs and monitoring"
      [32m+[0m[0m enforce              = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-Log-Analytics"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m automationAccountName = {
                  [32m+[0m[0m value = "aa-management-uksouth"
                }
              [32m+[0m[0m automationRegion      = {
                  [32m+[0m[0m value = "uksouth"
                }
              [32m+[0m[0m dataRetention         = {
                  [32m+[0m[0m value = "50"
                }
              [32m+[0m[0m rgName                = {
                  [32m+[0m[0m value = "rg-management-uksouth"
                }
              [32m+[0m[0m sku                   = {
                  [32m+[0m[0m value = "pergb2018"
                }
              [32m+[0m[0m workspaceName         = {
                  [32m+[0m[0m value = "log-management-uksouth"
                }
              [32m+[0m[0m workspaceRegion       = {
                  [32m+[0m[0m value = "uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e3e61b3-0b32-22d5-4edf-55f87fdb5955"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Log Analytics workspace and automation account should be configured to centralize logs and monitoring."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/DenyAction-DeleteUAMIAMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This policy provides a safeguard against accidental removal of the User Assigned Managed Identity used by AMA by blocking delete calls using deny action effect."
      [32m+[0m[0m display_name         = "Do not allow deletion of the User Assigned Managed Identity used by AMA"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "DenyAction-DeleteUAMIAMA"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m value = "DenyAction"
                }
              [32m+[0m[0m resourceName = {
                  [32m+[0m[0m value = "Enterprise-Scale-uami"
                }
              [32m+[0m[0m resourceType = {
                  [32m+[0m[0m value = "Microsoft.ManagedIdentity/userAssignedIdentities"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DeleteResources"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource must be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Microsoft Defender for SQL collects events from the agents and uses them to provide security alerts and tailored hardening tasks (recommendations)."
      [32m+[0m[0m display_name         = "Enable Defender for SQL on SQL VMs and Arc-enabled SQL Servers"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDFC-DefSQL-AMA"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnDcr                                 = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                   = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-defendersql-prod"
                }
              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                  = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
              [32m+[0m[0m userWorkspaceResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                }
              [32m+[0m[0m workspaceRegion                                 = {
                  [32m+[0m[0m value = "uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/de01d381-bae9-4670-8870-786f89f49e26"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Defender for SQL must be deployed."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for virtual machines. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations and user-assigned identity for Azure Monitor Agent."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for virtual machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect                                                 = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/92a36f05-ebc9-4bba-9128-b47ad2ea3354"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for the virtual machines (VMs) in the specified scope (management group, subscription or resource group). Takes Log Analytics workspace as parameter."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for VMs"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VM-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies                         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m scopeToSupportedImages                                 = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/924bfe3a-762f-40e7-86dd-5c8b95eb09e6"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for virtual machine scale sets. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations and user-assigned identity for Azure Monitor Agent."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for virtual machine scale sets"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VMSS-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect                                                 = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/c4a70814-96be-461c-889f-2b27429120dc"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Virtual Machines Scales Sets."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for the Virtual Machine Scale Sets in the specified scope (Management group, Subscription or resource group). Takes Log Analytics workspace as parameter. Note: if your scale set upgradePolicy is set to Manual, you need to apply the extension to the all VMs in the set by calling upgrade on them. In CLI this would be az vmss update-instances."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for Virtual Machine Scale Sets"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-VMSS-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity                = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m dcrResourceId                                          = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies                         = {
                  [32m+[0m[0m value = true
                }
              [32m+[0m[0m restrictBringYourOwnUserAssignedIdentityToSubscription = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m scopeToSupportedImages                                 = {
                  [32m+[0m[0m value = false
                }
              [32m+[0m[0m userAssignedIdentityResourceId                         = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/f5bf694c-cca7-4033-b883-3a23327d5485"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Virtual Machines Scales Sets."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable ChangeTracking and Inventory for Arc-enabled virtual machines. Takes Data Collection Rule ID as parameter and asks for an option to input applicable locations."
      [32m+[0m[0m display_name         = "Enable ChangeTracking and Inventory for Arc-enabled virtual machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-vmArc-ChangeTrack"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m dcrResourceId = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-changetracking-prod"
                }
              [32m+[0m[0m effect        = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/53448c70-089b-4f52-8f38-89196d7f2de1"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Change Tracking must be enabled for Arc-enabled Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Monitor for Hybrid Virtual Machines in the specified scope (Management group, Subscription or resource group)."
      [32m+[0m[0m display_name         = "Enable Azure Monitor for Hybrid Virtual Machines"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-vmHybr-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m dcrResourceId                  = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.Insights/dataCollectionRules/Enterprise-Scale-dcr-vm-insights"
                }
              [32m+[0m[0m enableProcessesAndDependencies = {
                  [32m+[0m[0m value = true
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/2b00397d-c309-49c4-aa5a-f0b2c5bc6321"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Monitor must be enabled for Hybrid Virtual Machines."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Configure auto-assessment (every 24 hours) for OS updates. You can control the scope of assignment according to machine subscription, resource group, location or tag. Learn more about this for Windows: https://aka.ms/computevm-windowspatchassessmentmode, for Linux: https://aka.ms/computevm-linuxpatchassessmentmode."
      [32m+[0m[0m display_name         = "Configure periodic checking for missing system updates on azure virtual machines and Arc-enabled virtual machines."
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enable-AUM-CheckUpdates"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m assessmentMode = {
                  [32m+[0m[0m value = "AutomaticByPlatform"
                }
              [32m+[0m[0m locations      = {
                  [32m+[0m[0m value = []
                }
              [32m+[0m[0m tagOperator    = {
                  [32m+[0m[0m value = "Any"
                }
              [32m+[0m[0m tagValues      = {
                  [32m+[0m[0m value = {}
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Periodic checking of missing updates must be enabled."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-ASR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative assignment enables recommended ALZ guardrails for Azure Recovery Services."
      [32m+[0m[0m display_name         = "Enforce enhanced recovery and backup policies"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-ASR"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Backup"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Recommended guardrails must be enforced for Azure Recovery Services (Backup and Site Recovery)."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative assignment enables recommended ALZ guardrails for Azure Key Vault."
      [32m+[0m[0m display_name         = "Enforce recommended guardrails for Azure Key Vault"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-GR-KeyVault"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "This resource must be compliant with the assigned policy."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-sandboxes/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Sandbox"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative will help enforce and govern subscriptions that are placed within the Sandbox Management Group. See https://aka.ms/alz/policies for more information."
      [32m+[0m[0m display_name         = "Enforce ALZ Sandbox Guardrails"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-sandboxes"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-ALZ-Sandbox"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m listOfResourceTypesNotAllowed = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "microsoft.network/expressroutecircuits",
                      [32m+[0m[0m "microsoft.network/expressroutegateways",
                      [32m+[0m[0m "microsoft.network/expressrouteports",
                      [32m+[0m[0m "microsoft.network/virtualwans",
                      [32m+[0m[0m "microsoft.network/virtualhubs",
                      [32m+[0m[0m "microsoft.network/vpngateways",
                      [32m+[0m[0m "microsoft.network/p2svpngateways",
                      [32m+[0m[0m "microsoft.network/vpnsites",
                      [32m+[0m[0m "microsoft.network/virtualnetworkgateways",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "ALZ Sandbox Guardrails must be enforced."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-ResourceRGLocation"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Resource Group and Resource locations should match."
      [32m+[0m[0m display_name         = "Resource Group and Resource locations should match"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-ResourceRGLocation"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Resources must be deployed in the same region as the Resource Group."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-TrustedLaunch"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Trusted Launch improves security of a Virtual Machine which requires VM SKU, OS Disk & OS Image to support it (Gen 2). To learn more about Trusted Launch, visit https://aka.ms/trustedlaunch."
      [32m+[0m[0m display_name         = "Audit virtual machines for Trusted Launch support"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-TrustedLaunch"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "Audit"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-TrustedLaunch"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Trust Launch must be used on supported virtual machines for enhanced security."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-UnusedResources"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This Policy initiative is a group of Policy definitions that help optimize cost by detecting unused but chargeable resources. Leverage this Policy initiative as a cost control to reveal orphaned resources that are driving cost."
      [32m+[0m[0m display_name         = "Unused resources driving cost should be avoided"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-UnusedResources"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m EffectDisks             = {
                  [32m+[0m[0m value = "Audit"
                }
              [32m+[0m[0m EffectPublicIpAddresses = {
                  [32m+[0m[0m value = "Audit"
                }
              [32m+[0m[0m EffectServerFarms       = {
                  [32m+[0m[0m value = "Audit"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Unused resources driving cost must be avoided."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-ZoneResiliency"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Resources should be Zone Resilient."
      [32m+[0m[0m display_name         = "Resources should be Zone Resilient"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Audit-ZoneResiliency"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m allow  = {
                  [32m+[0m[0m value = "Both"
                }
              [32m+[0m[0m effect = {
                  [32m+[0m[0m value = "Audit"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/130fb88f-0fc9-4678-bfe1-31022d71c7d5"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Resources must be Zone Resilient."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deny-Classic-Resources"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Denies deployment of classic resource types under the assigned scope."
      [32m+[0m[0m display_name         = "Deny the deployment of classic resources"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-Classic-Resources"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m effect                        = {
                  [32m+[0m[0m value = "Deny"
                }
              [32m+[0m[0m listOfResourceTypesNotAllowed = {
                  [32m+[0m[0m value = [
                      [32m+[0m[0m "Microsoft.ClassicCompute/capabilities",
                      [32m+[0m[0m "Microsoft.ClassicCompute/checkDomainNameAvailability",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/capabilities",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/internalLoadBalancers",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/serviceCertificates",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles/metricDefinitions",
                      [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles/metrics",
                      [32m+[0m[0m "Microsoft.ClassicCompute/moveSubscriptionResources",
                      [32m+[0m[0m "Microsoft.ClassicCompute/operatingSystemFamilies",
                      [32m+[0m[0m "Microsoft.ClassicCompute/operatingSystems",
                      [32m+[0m[0m "Microsoft.ClassicCompute/operations",
                      [32m+[0m[0m "Microsoft.ClassicCompute/operationStatuses",
                      [32m+[0m[0m "Microsoft.ClassicCompute/quotas",
                      [32m+[0m[0m "Microsoft.ClassicCompute/resourceTypes",
                      [32m+[0m[0m "Microsoft.ClassicCompute/validateSubscriptionMoveAvailability",
                      [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines",
                      [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/diagnosticSettings",
                      [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/metricDefinitions",
                      [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/metrics",
                      [32m+[0m[0m "Microsoft.ClassicInfrastructureMigrate/classicInfrastructureResources",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/capabilities",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/expressRouteCrossConnections",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/expressRouteCrossConnections/peerings",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/gatewaySupportedDevices",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/networkSecurityGroups",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/operations",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/quotas",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/reservedIps",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks/remoteVirtualNetworkPeeringProxies",
                      [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks/virtualNetworkPeerings",
                      [32m+[0m[0m "Microsoft.ClassicStorage/capabilities",
                      [32m+[0m[0m "Microsoft.ClassicStorage/checkStorageAccountAvailability",
                      [32m+[0m[0m "Microsoft.ClassicStorage/disks",
                      [32m+[0m[0m "Microsoft.ClassicStorage/images",
                      [32m+[0m[0m "Microsoft.ClassicStorage/operations",
                      [32m+[0m[0m "Microsoft.ClassicStorage/osImages",
                      [32m+[0m[0m "Microsoft.ClassicStorage/osPlatformImages",
                      [32m+[0m[0m "Microsoft.ClassicStorage/publicImages",
                      [32m+[0m[0m "Microsoft.ClassicStorage/quotas",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/blobServices",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/fileServices",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/metricDefinitions",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/metrics",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/queueServices",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/diagnosticSettings",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/metricDefinitions",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/metrics",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/tableServices",
                      [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/vmImages",
                      [32m+[0m[0m "Microsoft.ClassicStorage/vmImages",
                      [32m+[0m[0m "Microsoft.ClassicSubscription/operations",
                    ]
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Classic resources must not be deployed."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deny-UnmanagedDisk"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Deny virtual machines that do not use managed disk. It checks the managed disk property on virtual machine OS Disk fields."
      [32m+[0m[0m display_name         = "Deny virtual machines and virtual machine scale sets that do not use managed disk"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deny-UnmanagedDisk"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/06a78e20-9358-41c9-923c-fb736d382a4d"

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Virtual machines and virtual machine scales sets must use a managed disk."
        }

      [32m+[0m[0m overrides {
          [32m+[0m[0m value = "Deny"
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-ASC-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Microsoft Cloud Security Benchmark policy initiative."
      [32m+[0m[0m display_name         = "Microsoft Cloud Security Benchmark"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-ASC-Monitoring"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Cloud Security Benchmark must be met."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Deploys the diagnostic settings for Azure Activity to stream subscriptions audit logs to a Log Analytics workspace to monitor subscription-level events"
      [32m+[0m[0m display_name         = "Configure Azure Activity logs to stream to specified Log Analytics workspace"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-AzActivity-Log"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m value = "True"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2465583e-4e78-4c15-b6be-a36cbc7c8b0f"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Activity logs must be configured to stream to specified Log Analytics workspace."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-Diag-Logs"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Resource logs should be enabled to track activities and events that take place on your resources and give you visibility and insights into any changes that occur. This initiative deploys diagnostic setting using the allLogs category group to route logs to an Event Hub for all supported resources."
      [32m+[0m[0m display_name         = "Enable allLogs category group resource logging for supported resources to Log Analytics"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-Diag-Logs"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/0884adba-2312-4468-abeb-5422caed1038"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Diagnostic settings must be deployed to Azure services to forward logs to Log Analytics."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Deploy Microsoft Defender for Endpoint agent on applicable images."
      [32m+[0m[0m display_name         = "[Preview]: Deploy Microsoft Defender for Endpoint agent"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDEndpoints"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m microsoftDefenderForEndpointLinuxArcAgentDeployEffect   = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m microsoftDefenderForEndpointLinuxVmAgentDeployEffect    = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m microsoftDefenderForEndpointWindowsArcAgentDeployEffect = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m microsoftDefenderForEndpointWindowsVmAgentDeployEffect  = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/e20d08c5-6d64-656d-6465-ce9e37fd0ebc"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Defender for Endpoint agent must be deployed on applicable images."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpointsAMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Configure the multiple Microsoft Defender for Endpoint integration settings with Microsoft Defender for Cloud (WDATP, WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW, WDATP_UNIFIED_SOLUTION etc.). See: https://learn.microsoft.com/azure/defender-for-cloud/integration-defender-for-endpoint for more information."
      [32m+[0m[0m display_name         = "Configure multiple Microsoft Defender for Endpoint integration settings with Microsoft Defender for Cloud"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDEndpointsAMA"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/77b391e3-2d5d-40c3-83bf-65c846b3c6a3"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Defender for Endpoint must be deployed."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Deploy Microsoft Defender for Cloud and Security Contacts"
      [32m+[0m[0m display_name         = "Deploy Microsoft Defender for Cloud configuration"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDFC-Config-H224"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m parameters           = jsonencode(
            {
              [32m+[0m[0m ascExportResourceGroupLocation              = {
                  [32m+[0m[0m value = "uksouth"
                }
              [32m+[0m[0m ascExportResourceGroupName                  = {
                  [32m+[0m[0m value = "rg-asc-export-uksouth"
                }
              [32m+[0m[0m emailSecurityContact                        = {
                  [32m+[0m[0m value = "security_contact@replace_me"
                }
              [32m+[0m[0m enableAscForAppServices                     = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForArm                             = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForContainers                      = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForCosmosDbs                       = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForCspm                            = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForKeyVault                        = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForOssDb                           = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForServers                         = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForServersVulnerabilityAssessments = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForSql                             = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForSqlOnVm                         = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m enableAscForStorage                         = {
                  [32m+[0m[0m value = "DeployIfNotExists"
                }
              [32m+[0m[0m logAnalytics                                = {
                  [32m+[0m[0m value = "/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.OperationalInsights/workspaces/log-management-uksouth"
                }
            }
        )
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config_20240319"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Microsoft Defender for Cloud and Security Contacts must be deployed."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Advanced Threat Protection on your non-Basic tier open-source relational databases to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. See https://aka.ms/AzDforOpenSourceDBsDocu."
      [32m+[0m[0m display_name         = "Configure Advanced Threat Protection to be enabled on open-source relational databases"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDFC-OssDb"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/e77fc0b3-f7e9-4c58-bc13-cb753ed8e46e"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Advanced Threat Protection must be enabled on open-source relational databases."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "Enable Azure Defender on your SQL Servers and SQL Managed Instances to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases."
      [32m+[0m[0m display_name         = "Configure Azure Defender to be enabled on SQL Servers and SQL Managed Instances"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Deploy-MDFC-SqlAtp"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/9cb3cc7a-b39b-4b82-bc89-e5a5d9ff7b97"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Defender must be enabled on SQL Servers and SQL Managed Instances."
        }
    }

[1m  # module.management_groups[0].azurerm_management_group_policy_assignment.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_management_group_policy_assignment" "enterprise_scale" {
      [32m+[0m[0m description          = "This initiative assignment enables Azure Compute Security Baseline compliance auditing for Windows and Linux virtual machines."
      [32m+[0m[0m display_name         = "Enforce Azure Compute Security Baseline compliance auditing"
      [32m+[0m[0m enforce              = true
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m location             = "uksouth"
      [32m+[0m[0m management_group_id  = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata             = (known after apply)
      [32m+[0m[0m name                 = "Enforce-ACSB"
      [32m+[0m[0m not_scopes           = []
      [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m non_compliance_message {
          [32m+[0m[0m content = "Azure Compute Security Baseline compliance auditing must be enforced."
        }
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny."
      [32m+[0m[0m display_name        = "AppService append enable https only setting to enforce https setting."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Append-AppService-httpsonly"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Web/sites/httpsOnly"
                          [32m+[0m[0m notequals = true
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Web/sites/httpsOnly"
                          [32m+[0m[0m value = true
                        },
                    ]
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Append the AppService sites object to ensure that min Tls version is set to required minimum TLS version. Please note Append does not enforce compliance use then deny."
      [32m+[0m[0m display_name        = "AppService append sites with minimum TLS version to enforce."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Append-AppService-latestTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for a  Web App config to enforce"
                      [32m+[0m[0m displayName = "Select version minimum TLS Web App config"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m exists = "true"
                          [32m+[0m[0m field  = "Microsoft.Web/sites/config/minTlsVersion"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Web/sites/config/minTlsVersion"
                          [32m+[0m[0m notEquals = "[parameters('minTlsVersion')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Web/sites/config/minTlsVersion"
                          [32m+[0m[0m value = "[parameters('minTlsVersion')]"
                        },
                    ]
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-KV-SoftDelete"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enables you to ensure when a Key Vault is created with out soft delete enabled it will be added."
      [32m+[0m[0m display_name        = "KeyVault SoftDelete should be enabled"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Key Vault"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Append-KV-SoftDelete"
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.KeyVault/vaults"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.KeyVault/vaults/enableSoftDelete"
                                  [32m+[0m[0m notEquals = true
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.KeyVault/vaults/enableSoftDelete"
                          [32m+[0m[0m value = true
                        },
                    ]
                  [32m+[0m[0m effect  = "append"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cache"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Append-Redis-disableNonSslPort"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
                      [32m+[0m[0m displayName = "Effect Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Cache/redis"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Cache/Redis/enableNonSslPort"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Cache/Redis/enableNonSslPort"
                          [32m+[0m[0m value = false
                        },
                    ]
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Append a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "Azure Cache for Redis Append a specific min TLS version requirement and enforce TLS."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cache"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Append-Redis-sslEnforcement"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
                      [32m+[0m[0m displayName = "Effect Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimumTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version Azure Cache for Redis to enforce"
                      [32m+[0m[0m displayName = "Select version for Redis server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Cache/redis"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Cache/Redis/minimumTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimumTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Cache/Redis/minimumTlsVersion"
                          [32m+[0m[0m value = "[parameters('minimumTlsVersion')]"
                        },
                    ]
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Optimize cost by enabling Azure Hybrid Benefit. Leverage this Policy definition as a cost control to reveal Virtual Machines not using AHUB."
      [32m+[0m[0m display_name        = "Audit AHUB for eligible VMs"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cost Optimization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Audit-AzureHybridBenefit"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "type"
                          [32m+[0m[0m in    = [
                              [32m+[0m[0m "Microsoft.Compute/virtualMachines",
                              [32m+[0m[0m "Microsoft.Compute/virtualMachineScaleSets",
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "MicrosoftWindowsServer"
                          [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "WindowsServer"
                          [32m+[0m[0m field  = "Microsoft.Compute/imageOffer"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                  [32m+[0m[0m like  = "2008-R2-SP1*"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                  [32m+[0m[0m like  = "2012-*"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                  [32m+[0m[0m like  = "2016-*"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                  [32m+[0m[0m like  = "2019-*"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                  [32m+[0m[0m like  = "2022-*"
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Compute/licenseType"
                          [32m+[0m[0m notEquals = "Windows_Server"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Disks that are driving cost."
      [32m+[0m[0m display_name        = "Unused Disks driving cost should be avoided"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cost Optimization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Audit-Disks-UnusedResourcesCostOptimization"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/disks"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Unattached"
                          [32m+[0m[0m field  = "Microsoft.Compute/disks/diskState"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allof = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field   = "name"
                                  [32m+[0m[0m notlike = "*-ASRReplica"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field   = "name"
                                  [32m+[0m[0m notlike = "ms-asr-*"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field   = "name"
                                  [32m+[0m[0m notlike = "asrseeddisk-*"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-MachineLearning-PrivateEndpointId"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Audit private endpoints that are created in other subscriptions and/or tenants for Azure Machine Learning."
      [32m+[0m[0m display_name        = "Control private endpoint connections to Azure Machine Learning"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Audit-MachineLearning-PrivateEndpointId"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Approved"
                          [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateLinkServiceConnectionState.status"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m notEquals = "[subscription().subscriptionId]"
                                  [32m+[0m[0m value     = "[split(concat(field('Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id'), '//'), '/')[2]]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy audits or denies, depending on assignment effect, the creation of a Private Link Private DNS Zones in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription"
      [32m+[0m[0m display_name        = "Audit or Deny the creation of Private Link Private DNS Zones"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.2"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Audit-PrivateLinkDnsZones"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m privateLinkDnsZones = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "privatelink.adf.azure.com",
                      [32m+[0m[0m "privatelink.afs.azure.net",
                      [32m+[0m[0m "privatelink.agentsvc.azure-automation.net",
                      [32m+[0m[0m "privatelink.analysis.windows.net",
                      [32m+[0m[0m "privatelink.api.azureml.ms",
                      [32m+[0m[0m "privatelink.azconfig.io",
                      [32m+[0m[0m "privatelink.azure-api.net",
                      [32m+[0m[0m "privatelink.azure-automation.net",
                      [32m+[0m[0m "privatelink.azurecr.io",
                      [32m+[0m[0m "privatelink.azure-devices.net",
                      [32m+[0m[0m "privatelink.azure-devices-provisioning.net",
                      [32m+[0m[0m "privatelink.azuredatabricks.net",
                      [32m+[0m[0m "privatelink.azurehdinsight.net",
                      [32m+[0m[0m "privatelink.azurehealthcareapis.com",
                      [32m+[0m[0m "privatelink.azurestaticapps.net",
                      [32m+[0m[0m "privatelink.azuresynapse.net",
                      [32m+[0m[0m "privatelink.azurewebsites.net",
                      [32m+[0m[0m "privatelink.batch.azure.com",
                      [32m+[0m[0m "privatelink.blob.core.windows.net",
                      [32m+[0m[0m "privatelink.cassandra.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.cognitiveservices.azure.com",
                      [32m+[0m[0m "privatelink.database.windows.net",
                      [32m+[0m[0m "privatelink.datafactory.azure.net",
                      [32m+[0m[0m "privatelink.dev.azuresynapse.net",
                      [32m+[0m[0m "privatelink.dfs.core.windows.net",
                      [32m+[0m[0m "privatelink.dicom.azurehealthcareapis.com",
                      [32m+[0m[0m "privatelink.digitaltwins.azure.net",
                      [32m+[0m[0m "privatelink.directline.botframework.com",
                      [32m+[0m[0m "privatelink.documents.azure.com",
                      [32m+[0m[0m "privatelink.eventgrid.azure.net",
                      [32m+[0m[0m "privatelink.file.core.windows.net",
                      [32m+[0m[0m "privatelink.gremlin.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.guestconfiguration.azure.com",
                      [32m+[0m[0m "privatelink.his.arc.azure.com",
                      [32m+[0m[0m "privatelink.kubernetesconfiguration.azure.com",
                      [32m+[0m[0m "privatelink.managedhsm.azure.net",
                      [32m+[0m[0m "privatelink.mariadb.database.azure.com",
                      [32m+[0m[0m "privatelink.media.azure.net",
                      [32m+[0m[0m "privatelink.mongo.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.monitor.azure.com",
                      [32m+[0m[0m "privatelink.mysql.database.azure.com",
                      [32m+[0m[0m "privatelink.notebooks.azure.net",
                      [32m+[0m[0m "privatelink.ods.opinsights.azure.com",
                      [32m+[0m[0m "privatelink.oms.opinsights.azure.com",
                      [32m+[0m[0m "privatelink.pbidedicated.windows.net",
                      [32m+[0m[0m "privatelink.postgres.database.azure.com",
                      [32m+[0m[0m "privatelink.prod.migration.windowsazure.com",
                      [32m+[0m[0m "privatelink.purview.azure.com",
                      [32m+[0m[0m "privatelink.purviewstudio.azure.com",
                      [32m+[0m[0m "privatelink.queue.core.windows.net",
                      [32m+[0m[0m "privatelink.redis.cache.windows.net",
                      [32m+[0m[0m "privatelink.redisenterprise.cache.azure.net",
                      [32m+[0m[0m "privatelink.search.windows.net",
                      [32m+[0m[0m "privatelink.service.signalr.net",
                      [32m+[0m[0m "privatelink.servicebus.windows.net",
                      [32m+[0m[0m "privatelink.siterecovery.windowsazure.com",
                      [32m+[0m[0m "privatelink.sql.azuresynapse.net",
                      [32m+[0m[0m "privatelink.table.core.windows.net",
                      [32m+[0m[0m "privatelink.table.cosmos.azure.com",
                      [32m+[0m[0m "privatelink.tip1.powerquery.microsoft.com",
                      [32m+[0m[0m "privatelink.token.botframework.com",
                      [32m+[0m[0m "privatelink.vaultcore.azure.net",
                      [32m+[0m[0m "privatelink.web.core.windows.net",
                      [32m+[0m[0m "privatelink.webpubsub.azure.com",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "An array of Private Link Private DNS Zones to check for the existence of in the assigned scope."
                      [32m+[0m[0m displayName = "Private Link Private DNS Zones"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/privateDnsZones"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "name"
                          [32m+[0m[0m in    = "[parameters('privateLinkDnsZones')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Public IP addresses that are driving cost."
      [32m+[0m[0m display_name        = "Unused Public IP addresses driving cost should be avoided"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cost Optimization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "microsoft.network/publicIpAddresses"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Static"
                          [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/publicIPAllocationMethod"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/natGateway"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/natGateway')), 0)]"
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/ipConfiguration"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/ipConfiguration')), 0)]"
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/publicIPPrefix"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/publicIPPrefix')), 0)]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned App Service plans that are driving cost."
      [32m+[0m[0m display_name        = "Unused App Service plans driving cost should be avoided"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cost Optimization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Audit-ServerFarms-UnusedResourcesCostOptimization"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/serverfarms"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Web/serverFarms/sku.tier"
                          [32m+[0m[0m notEquals = "Free"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = 0
                          [32m+[0m[0m field  = "Microsoft.Web/serverFarms/numberOfSites"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-child-resources"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of child resources on the Automation Account"
      [32m+[0m[0m display_name        = "No child resources in Automation Account"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Automation"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-AA-child-resources"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "type"
                          [32m+[0m[0m in    = [
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/runbooks",
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/variables",
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/modules",
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/credentials",
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/connections",
                              [32m+[0m[0m "Microsoft.Automation/automationAccounts/certificates",
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-APIM-TLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure API Management service should use TLS version 1.2"
      [32m+[0m[0m display_name        = "API Management services should use TLS version 1.2"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "API Management"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-APIM-TLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.ApiManagement/service"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m greater = 0
                                  [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":\"true\"')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m greater = 0
                                  [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":true')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m greater = 0
                                  [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":\"true\"')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m greater = 0
                                  [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":true')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGW-Without-WAF"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enables you to restrict that Application Gateways is always deployed with WAF enabled"
      [32m+[0m[0m display_name        = "Application Gateway should be deployed with WAF enabled"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-AppGW-Without-WAF"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Network/applicationGateways/sku.name"
                          [32m+[0m[0m notequals = "WAF_v2"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGw-Without-Tls"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enables you to restrict that Application Gateways is always deployed with predefined Microsoft policy that is using TLS version 1.2"
      [32m+[0m[0m display_name        = "Application Gateway should be deployed with predefined Microsoft policy that is using TLS version 1.2"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-AppGw-Without-Tls"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m predefinedPolicyName = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "AppGwSslPolicy20220101",
                      [32m+[0m[0m "AppGwSslPolicy20170401S",
                      [32m+[0m[0m "AppGwSslPolicy20220101S",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Predefined policy name"
                      [32m+[0m[0m displayName = "Predefined policy name"
                    }
                  [32m+[0m[0m type         = "array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                  [32m+[0m[0m notEquals = "Predefined"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Network/applicationGateways/sslPolicy.policyName"
                                  [32m+[0m[0m notIn = "[parameters('predefinedPolicyName')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-without-BYOC"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "App Service (including Logic apps and Function apps) must use certificates stored in Key Vault"
      [32m+[0m[0m display_name        = "App Service certificates must be stored in Key Vault"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-AppService-without-BYOC"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/certificates"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Web/certificates/keyVaultId"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Web/certificates/keyVaultSecretName"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      [32m+[0m[0m display_name        = "API App should only be accessible over HTTPS"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-AppServiceApiApp-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "kind"
                          [32m+[0m[0m like  = "*api"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "false"
                          [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      [32m+[0m[0m display_name        = "Function App should only be accessible over HTTPS"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-AppServiceFunctionApp-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "kind"
                          [32m+[0m[0m like  = "functionapp*"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "false"
                          [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      [32m+[0m[0m display_name        = "Web Application should only be accessible over HTTPS"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-AppServiceWebApp-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "kind"
                          [32m+[0m[0m like  = "app*"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "false"
                          [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AzFw-Without-Policy"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of Azure Firewall without a default Firewall Policy."
      [32m+[0m[0m display_name        = "Azure Firewall should have a default Firewall Policy"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-AzFw-Without-Policy"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/azureFirewalls"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m exists = "false"
                          [32m+[0m[0m field  = "Microsoft.Network/azureFirewalls/firewallPolicy.id"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-NetworkAcls"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Cognitive Services should not allow adding individual IPs or virtual network rules to the service-level firewall. Enable this to restrict inbound network access and enforce the usage of private endpoints."
      [32m+[0m[0m display_name        = "Network ACLs should be restricted for Cognitive Services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cognitive Services"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-CognitiveServices-NetworkAcls"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.CognitiveServices/accounts/networkAcls.ipRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.CognitiveServices/accounts/networkAcls.virtualNetworkRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-Resource-Kinds"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Cognitive Services should only create explicit allowed kinds."
      [32m+[0m[0m display_name        = "Only explicit kinds for Cognitive Services should be allowed"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cognitive Services"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-CognitiveServices-Resource-Kinds"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedKinds = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AnomalyDetector",
                      [32m+[0m[0m "ComputerVision",
                      [32m+[0m[0m "CognitiveServices",
                      [32m+[0m[0m "ContentModerator",
                      [32m+[0m[0m "CustomVision.Training",
                      [32m+[0m[0m "CustomVision.Prediction",
                      [32m+[0m[0m "Face",
                      [32m+[0m[0m "FormRecognizer",
                      [32m+[0m[0m "ImmersiveReader",
                      [32m+[0m[0m "LUIS",
                      [32m+[0m[0m "Personalizer",
                      [32m+[0m[0m "SpeechServices",
                      [32m+[0m[0m "TextAnalytics",
                      [32m+[0m[0m "TextTranslation",
                      [32m+[0m[0m "OpenAI",
                    ]
                  [32m+[0m[0m defaultValue  = [
                      [32m+[0m[0m "AnomalyDetector",
                      [32m+[0m[0m "ComputerVision",
                      [32m+[0m[0m "CognitiveServices",
                      [32m+[0m[0m "ContentModerator",
                      [32m+[0m[0m "CustomVision.Training",
                      [32m+[0m[0m "CustomVision.Prediction",
                      [32m+[0m[0m "Face",
                      [32m+[0m[0m "FormRecognizer",
                      [32m+[0m[0m "ImmersiveReader",
                      [32m+[0m[0m "LUIS",
                      [32m+[0m[0m "Personalizer",
                      [32m+[0m[0m "SpeechServices",
                      [32m+[0m[0m "TextAnalytics",
                      [32m+[0m[0m "TextTranslation",
                      [32m+[0m[0m "OpenAI",
                    ]
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select the allowed resource kinds to be used with Cognitive Services"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "array"
                }
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "kind"
                          [32m+[0m[0m notIn = "[parameters('allowedKinds')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-RestrictOutboundNetworkAccess"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Cognitive Services allow restricting outbound network access. Enable this to limit outbound connectivity for the service."
      [32m+[0m[0m display_name        = "Outbound network access should be restricted for Cognitive Services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cognitive Services"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-CognitiveServices-RestrictOutboundNetworkAccess"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                  [32m+[0m[0m notEquals = true
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-NoPublicIp"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Denies the deployment of workspaces that do not use the noPublicIp feature to host Databricks clusters without public IPs."
      [32m+[0m[0m display_name        = "Deny public IPs for Databricks cluster"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Databricks"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Databricks-NoPublicIp"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.DataBricks/workspaces/parameters.enableNoPublicIp.value"
                          [32m+[0m[0m notEquals = true
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-Sku"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforces the use of Premium Databricks workspaces to make sure appropriate security features are available including Databricks Access Controls, Credential Passthrough and SCIM provisioning for Microsoft Entra ID."
      [32m+[0m[0m display_name        = "Deny non-premium Databricks sku"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Databricks"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Databricks-Sku"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.DataBricks/workspaces/sku.name"
                          [32m+[0m[0m notEquals = "premium"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-VirtualNetwork"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforces the use of vnet injection for Databricks workspaces."
      [32m+[0m[0m display_name        = "Deny Databricks workspaces without Vnet injection"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Databricks"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Databricks-VirtualNetwork"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customVirtualNetworkId.value"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customPublicSubnetName.value"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customPrivateSubnetName.value"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-Premium-CMK"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Event Hub namespaces (Premium) should use a customer-managed key for encryption."
      [32m+[0m[0m display_name        = "Event Hub namespaces (Premium) should use a customer-managed key for encryption"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Event Hub"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-EH-Premium-CMK"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.EventHub/namespaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Premium"
                          [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/sku.name"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m not = {
                              [32m+[0m[0m equals = "Microsoft.Keyvault"
                              [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/encryption.keySource"
                            }
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Event Hub namespaces should use a valid TLS version."
      [32m+[0m[0m display_name        = "Event Hub namespaces should use a valid TLS version"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Event Hub"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-EH-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minTlsVersion = {
                  [32m+[0m[0m defaultValue = "1.2"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Minimum TLS version to be used by Event Hub"
                      [32m+[0m[0m displayName = "Minimum TLS Version"
                    }
                  [32m+[0m[0m type         = "string"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.EventHub/namespaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                  [32m+[0m[0m notEquals = "[parameters('minTlsVersion')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureAuth"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the use of insecure authentication methods (NTLMv2) when using File Services on a storage account."
      [32m+[0m[0m display_name        = "File Services with insecure authentication methods should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-FileServices-InsecureAuth"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m notAllowedAuthMethods = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "NTLMv2",
                      [32m+[0m[0m "Kerberos",
                    ]
                  [32m+[0m[0m defaultValue  = "NTLMv2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The list of channelEncryption not allowed."
                      [32m+[0m[0m displayName = "Authentication methods supported by server. Valid values are NTLMv2, Kerberos."
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "[parameters('notAllowedAuthMethods')]"
                          [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.authenticationMethods"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureKerberos"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the use of insecure Kerberos ticket encryption (RC4-HMAC) when using File Services on a storage account."
      [32m+[0m[0m display_name        = "File Services with insecure Kerberos ticket encryption should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-FileServices-InsecureKerberos"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m notAllowedKerberosTicketEncryption = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "RC4-HMAC",
                      [32m+[0m[0m "AES-256",
                    ]
                  [32m+[0m[0m defaultValue  = "RC4-HMAC"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The list of kerberosTicketEncryption not allowed."
                      [32m+[0m[0m displayName = "Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256."
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "[parameters('notAllowedKerberosTicketEncryption')]"
                          [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.kerberosTicketEncryption"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbChannel"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the use of insecure channel encryption (AES-128-CCM) when using File Services on a storage account."
      [32m+[0m[0m display_name        = "File Services with insecure SMB channel encryption should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-FileServices-InsecureSmbChannel"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m notAllowedChannelEncryption = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AES-128-CCM",
                      [32m+[0m[0m "AES-128-GCM",
                      [32m+[0m[0m "AES-256-GCM",
                    ]
                  [32m+[0m[0m defaultValue  = "AES-128-CCM"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The list of channelEncryption not allowed."
                      [32m+[0m[0m displayName = "SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM."
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "[parameters('notAllowedChannelEncryption')]"
                          [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.channelEncryption"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbVersions"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the use of insecure versions of SMB (2.1 & 3.0) when using File Services on a storage account."
      [32m+[0m[0m display_name        = "File Services with insecure SMB versions should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-FileServices-InsecureSmbVersions"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedSmbVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "SMB2.1",
                      [32m+[0m[0m "SMB3.0",
                      [32m+[0m[0m "SMB3.1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "SMB3.1.1"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The allowed SMB version for maximum security"
                      [32m+[0m[0m displayName = "Allowed SMB Version"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m not = {
                              [32m+[0m[0m contains = "[parameters('allowedSmbVersion')]"
                              [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.versions"
                            }
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApp-Public-Network"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Disabling public network access improves security by ensuring that the Logic App is not exposed on the public internet. Creating private endpoints can limit exposure of a Logic App. Learn more at: https://aka.ms/app-service-private-endpoint."
      [32m+[0m[0m display_name        = "Logic apps should disable public network access"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Logic Apps"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-LogicApp-Public-Network"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "workflowapp"
                          [32m+[0m[0m field    = "kind"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Web/sites/publicNetworkAccess"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Web/sites/publicNetworkAccess"
                                  [32m+[0m[0m notEquals = "Disabled"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApps-Without-Https"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      [32m+[0m[0m display_name        = "Logic app should only be accessible over HTTPS"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Logic Apps"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-LogicApps-Without-Https"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "workflowapp"
                          [32m+[0m[0m field    = "kind"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "false"
                                  [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Aks"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deny AKS cluster creation in Azure Machine Learning and enforce connecting to existing clusters."
      [32m+[0m[0m display_name        = "Deny AKS cluster creation in Azure Machine Learning"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-Aks"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "AKS"
                          [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/resourceId"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m value  = "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/resourceId'))]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-SubnetId"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances."
      [32m+[0m[0m display_name        = "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-Compute-SubnetId"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                          [32m+[0m[0m in    = [
                              [32m+[0m[0m "AmlCompute",
                              [32m+[0m[0m "ComputeInstance",
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/subnet.id"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m value  = "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/subnet.id'))]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-VmSize"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances."
      [32m+[0m[0m display_name        = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Budget"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-Compute-VmSize"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedVmSizes = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "Standard_D1_v2",
                      [32m+[0m[0m "Standard_D2_v2",
                      [32m+[0m[0m "Standard_D3_v2",
                      [32m+[0m[0m "Standard_D4_v2",
                      [32m+[0m[0m "Standard_D11_v2",
                      [32m+[0m[0m "Standard_D12_v2",
                      [32m+[0m[0m "Standard_D13_v2",
                      [32m+[0m[0m "Standard_D14_v2",
                      [32m+[0m[0m "Standard_DS1_v2",
                      [32m+[0m[0m "Standard_DS2_v2",
                      [32m+[0m[0m "Standard_DS3_v2",
                      [32m+[0m[0m "Standard_DS4_v2",
                      [32m+[0m[0m "Standard_DS5_v2",
                      [32m+[0m[0m "Standard_DS11_v2",
                      [32m+[0m[0m "Standard_DS12_v2",
                      [32m+[0m[0m "Standard_DS13_v2",
                      [32m+[0m[0m "Standard_DS14_v2",
                      [32m+[0m[0m "Standard_M8-2ms",
                      [32m+[0m[0m "Standard_M8-4ms",
                      [32m+[0m[0m "Standard_M8ms",
                      [32m+[0m[0m "Standard_M16-4ms",
                      [32m+[0m[0m "Standard_M16-8ms",
                      [32m+[0m[0m "Standard_M16ms",
                      [32m+[0m[0m "Standard_M32-8ms",
                      [32m+[0m[0m "Standard_M32-16ms",
                      [32m+[0m[0m "Standard_M32ls",
                      [32m+[0m[0m "Standard_M32ms",
                      [32m+[0m[0m "Standard_M32ts",
                      [32m+[0m[0m "Standard_M64-16ms",
                      [32m+[0m[0m "Standard_M64-32ms",
                      [32m+[0m[0m "Standard_M64ls",
                      [32m+[0m[0m "Standard_M64ms",
                      [32m+[0m[0m "Standard_M64s",
                      [32m+[0m[0m "Standard_M128-32ms",
                      [32m+[0m[0m "Standard_M128-64ms",
                      [32m+[0m[0m "Standard_M128ms",
                      [32m+[0m[0m "Standard_M128s",
                      [32m+[0m[0m "Standard_M64",
                      [32m+[0m[0m "Standard_M64m",
                      [32m+[0m[0m "Standard_M128",
                      [32m+[0m[0m "Standard_M128m",
                      [32m+[0m[0m "Standard_D1",
                      [32m+[0m[0m "Standard_D2",
                      [32m+[0m[0m "Standard_D3",
                      [32m+[0m[0m "Standard_D4",
                      [32m+[0m[0m "Standard_D11",
                      [32m+[0m[0m "Standard_D12",
                      [32m+[0m[0m "Standard_D13",
                      [32m+[0m[0m "Standard_D14",
                      [32m+[0m[0m "Standard_DS15_v2",
                      [32m+[0m[0m "Standard_NV6",
                      [32m+[0m[0m "Standard_NV12",
                      [32m+[0m[0m "Standard_NV24",
                      [32m+[0m[0m "Standard_F2s_v2",
                      [32m+[0m[0m "Standard_F4s_v2",
                      [32m+[0m[0m "Standard_F8s_v2",
                      [32m+[0m[0m "Standard_F16s_v2",
                      [32m+[0m[0m "Standard_F32s_v2",
                      [32m+[0m[0m "Standard_F64s_v2",
                      [32m+[0m[0m "Standard_F72s_v2",
                      [32m+[0m[0m "Standard_NC6s_v3",
                      [32m+[0m[0m "Standard_NC12s_v3",
                      [32m+[0m[0m "Standard_NC24rs_v3",
                      [32m+[0m[0m "Standard_NC24s_v3",
                      [32m+[0m[0m "Standard_NC6",
                      [32m+[0m[0m "Standard_NC12",
                      [32m+[0m[0m "Standard_NC24",
                      [32m+[0m[0m "Standard_NC24r",
                      [32m+[0m[0m "Standard_ND6s",
                      [32m+[0m[0m "Standard_ND12s",
                      [32m+[0m[0m "Standard_ND24rs",
                      [32m+[0m[0m "Standard_ND24s",
                      [32m+[0m[0m "Standard_NC6s_v2",
                      [32m+[0m[0m "Standard_NC12s_v2",
                      [32m+[0m[0m "Standard_NC24rs_v2",
                      [32m+[0m[0m "Standard_NC24s_v2",
                      [32m+[0m[0m "Standard_ND40rs_v2",
                      [32m+[0m[0m "Standard_NV12s_v3",
                      [32m+[0m[0m "Standard_NV24s_v3",
                      [32m+[0m[0m "Standard_NV48s_v3",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Specifies the allowed VM Sizes for Aml Compute Clusters and Instances"
                      [32m+[0m[0m displayName = "Allowed VM Sizes for Aml Compute Clusters and Instances"
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                          [32m+[0m[0m in    = [
                              [32m+[0m[0m "AmlCompute",
                              [32m+[0m[0m "ComputeInstance",
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/vmSize"
                          [32m+[0m[0m notIn = "[parameters('allowedVmSizes')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deny public access of Azure Machine Learning clusters via SSH."
      [32m+[0m[0m display_name        = "Deny public access of Azure Machine Learning clusters via SSH"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "AmlCompute"
                          [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                  [32m+[0m[0m notEquals = "Disabled"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-Scale"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce scale settings for Azure Machine Learning compute clusters."
      [32m+[0m[0m display_name        = "Enforce scale settings for Azure Machine Learning compute clusters"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Budget"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-ComputeCluster-Scale"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m maxNodeCount                            = {
                  [32m+[0m[0m defaultValue = 10
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Specifies the maximum node count of AML Clusters"
                      [32m+[0m[0m displayName = "Maximum Node Count"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m maxNodeIdleTimeInSecondsBeforeScaleDown = {
                  [32m+[0m[0m defaultValue = 900
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Specifies the maximum node idle time in seconds before scaledown"
                      [32m+[0m[0m displayName = "Maximum Node Idle Time in Seconds Before Scaledown"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m minNodeCount                            = {
                  [32m+[0m[0m defaultValue = 0
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Specifies the minimum node count of AML Clusters"
                      [32m+[0m[0m displayName = "Minimum Node Count"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "AmlCompute"
                          [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.maxNodeCount"
                                  [32m+[0m[0m greater = "[parameters('maxNodeCount')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.minNodeCount"
                                  [32m+[0m[0m greater = "[parameters('minNodeCount')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m greater = "[parameters('maxNodeIdleTimeInSecondsBeforeScaleDown')]"
                                  [32m+[0m[0m value   = "[int(last(split(replace(replace(replace(replace(replace(replace(replace(field('Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.nodeIdleTimeBeforeScaleDown'), 'P', '/'), 'Y', '/'), 'M', '/'), 'D', '/'), 'T', '/'), 'H', '/'), 'S', ''), '/')))]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-HbiWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforces high business impact Azure Machine Learning workspaces."
      [32m+[0m[0m display_name        = "Enforces high business impact Azure Machine Learning Workspaces"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-HbiWorkspace"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                  [32m+[0m[0m notEquals = true
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deny public access behind vnet to Azure Machine Learning workspaces."
      [32m+[0m[0m display_name        = "Deny public access behind vnet to Azure Machine Learning workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-PublicAccessWhenBehindVnet"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                  [32m+[0m[0m notEquals = false
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicNetworkAccess"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Denies public network access for Azure Machine Learning workspaces. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/438c38d2-3772-465a-a9cc-7a6666a275ce.html"
      [32m+[0m[0m display_name        = "[Deprecated] Azure Machine Learning should have disabled public network access"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "438c38d2-3772-465a-a9cc-7a6666a275ce"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MachineLearning-PublicNetworkAccess"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/publicNetworkAccess"
                          [32m+[0m[0m notEquals = "Disabled"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports."
      [32m+[0m[0m display_name        = "Management port access from the Internet should be blocked"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m replacesPolicy       = "Deny-RDP-From-Internet"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.1.1"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-MgmtPorts-From-Internet"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ports  = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "22",
                      [32m+[0m[0m "3389",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Ports to be blocked"
                      [32m+[0m[0m displayName = "Ports"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m allOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "Allow"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "Inbound"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m anyOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m equals = "*"
                                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                  [32m+[0m[0m in    = "[parameters('ports')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m count   = {
                                                      [32m+[0m[0m value = "[parameters('ports')]"
                                                      [32m+[0m[0m where = {
                                                          [32m+[0m[0m equals = "true"
                                                          [32m+[0m[0m value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current())),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current()))), 'false')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m greater = 0
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m count   = {
                                                      [32m+[0m[0m name  = "ports"
                                                      [32m+[0m[0m value = "[parameters('ports')]"
                                                      [32m+[0m[0m where = {
                                                          [32m+[0m[0m count   = {
                                                              [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                              [32m+[0m[0m where = {
                                                                  [32m+[0m[0m equals = "true"
                                                                  [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                }
                                                            }
                                                          [32m+[0m[0m greater = 0
                                                        }
                                                    }
                                                  [32m+[0m[0m greater = 0
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m not = {
                                                      [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                      [32m+[0m[0m notEquals = "*"
                                                    }
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m not = {
                                                      [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                      [32m+[0m[0m notIn = "[parameters('ports')]"
                                                    }
                                                },
                                            ]
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m anyOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m equals = "*"
                                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m equals = "Internet"
                                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m not = {
                                                      [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                      [32m+[0m[0m notEquals = "*"
                                                    }
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m not = {
                                                      [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                      [32m+[0m[0m notEquals = "Internet"
                                                    }
                                                },
                                            ]
                                        },
                                    ]
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m allOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m equals = "Allow"
                                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].access"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m equals = "Inbound"
                                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].direction"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m anyOf = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m equals = "*"
                                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                          [32m+[0m[0m in    = "[parameters('ports')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m count   = {
                                                              [32m+[0m[0m name  = "ports"
                                                              [32m+[0m[0m value = "[parameters('ports')]"
                                                              [32m+[0m[0m where = {
                                                                  [32m+[0m[0m equals = "true"
                                                                  [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports')))), 'false')]"
                                                                }
                                                            }
                                                          [32m+[0m[0m greater = 0
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m count   = {
                                                              [32m+[0m[0m name  = "ports"
                                                              [32m+[0m[0m value = "[parameters('ports')]"
                                                              [32m+[0m[0m where = {
                                                                  [32m+[0m[0m count   = {
                                                                      [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                                      [32m+[0m[0m where = {
                                                                          [32m+[0m[0m equals = "true"
                                                                          [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                        }
                                                                    }
                                                                  [32m+[0m[0m greater = 0
                                                                }
                                                            }
                                                          [32m+[0m[0m greater = 0
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m not = {
                                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                              [32m+[0m[0m notEquals = "*"
                                                            }
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m not = {
                                                              [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                              [32m+[0m[0m notIn = "[parameters('ports')]"
                                                            }
                                                        },
                                                    ]
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m anyOf = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m equals = "*"
                                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m equals = "Internet"
                                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m not = {
                                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                              [32m+[0m[0m notEquals = "*"
                                                            }
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m not = {
                                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                              [32m+[0m[0m notEquals = "Internet"
                                                            }
                                                        },
                                                    ]
                                                },
                                            ]
                                        }
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "MySQL database servers enforce SSL connections."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-MySql-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                  [32m+[0m[0m notEquals = "Enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "PostgreSQL database servers enforce SSL connection."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-PostgreSql-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for PostgreSQL server to enforce"
                      [32m+[0m[0m displayName = "Select version minimum TLS for PostgreSQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                  [32m+[0m[0m notEquals = "Enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Private-DNS-Zones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of a private DNS in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription"
      [32m+[0m[0m display_name        = "Deny the creation of private DNS"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Private-DNS-Zones"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/privateDnsZones"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicEndpoint-MariaDB"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of Maria DB accounts with exposed public endpoints. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/fdccbe47-f3e3-4213-ad5d-ea459b2fa077.html"
      [32m+[0m[0m display_name        = "[Deprecated] Public network access should be disabled for MariaDB"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "fdccbe47-f3e3-4213-ad5d-ea459b2fa077"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-PublicEndpoint-MariaDB"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforMariaDB/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.DBforMariaDB/servers/publicNetworkAccess"
                          [32m+[0m[0m notequals = "Disabled"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "[Deprecated] This policy denies creation of Public IPs under the assigned scope. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/6c112d4e-5bc7-47ae-a041-ea2d9dccd749.html using appropriate assignment parameters."
      [32m+[0m[0m display_name        = "[Deprecated] Deny the creation of public IP"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "6c112d4e-5bc7-47ae-a041-ea2d9dccd749"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-PublicIP"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/publicIPAddresses"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies any network security rule that allows RDP access from Internet. This policy is superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deny-MgmtPorts-From-Internet.html"
      [32m+[0m[0m display_name        = "[Deprecated] RDP access from the Internet should be blocked"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "Deny-MgmtPorts-From-Internet"
              [32m+[0m[0m version              = "1.0.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-RDP-From-Internet"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Allow"
                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Inbound"
                                  [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "*"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "3389"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "true"
                                          [32m+[0m[0m value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389)), 'false')]"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m count   = {
                                              [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              [32m+[0m[0m where = {
                                                  [32m+[0m[0m equals = "true"
                                                  [32m+[0m[0m value  = "[if(and(not(empty(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')))), contains(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')),'-')), and(lessOrEquals(int(first(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389),greaterOrEquals(int(last(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389)) , 'false')]"
                                                }
                                            }
                                          [32m+[0m[0m greater = 0
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m not = {
                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              [32m+[0m[0m notEquals = "*"
                                            }
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m not = {
                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              [32m+[0m[0m notEquals = "3389"
                                            }
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "*"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "Internet"
                                          [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m not = {
                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              [32m+[0m[0m notEquals = "*"
                                            }
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m not = {
                                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              [32m+[0m[0m notEquals = "Internet"
                                            }
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Audit enabling of only connections via SSL to Azure Cache for Redis. Validate both minimum TLS version and enableNonSslPort is disabled. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
      [32m+[0m[0m display_name        = "Azure Cache for Redis only secure connections should be enabled"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cache"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Redis-http"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimumTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select minimum TLS version for Azure Cache for Redis."
                      [32m+[0m[0m displayName = "Select minumum TLS version for Azure Cache for Redis."
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Cache/redis"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Cache/Redis/enableNonSslPort"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Cache/Redis/minimumTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimumTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Service-Endpoints"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This Policy will deny/audit Service Endpoints on subnets. Service Endpoints allows the network traffic to bypass Network appliances, such as the Azure Firewall."
      [32m+[0m[0m display_name        = "Deny or Audit service endpoints on subnets"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Service-Endpoints"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count   = {
                              [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*]"
                              [32m+[0m[0m where = {
                                  [32m+[0m[0m exists = true
                                  [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*].service"
                                }
                            }
                          [32m+[0m[0m greater = 0
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities."
      [32m+[0m[0m display_name        = "Azure SQL Database should have the minimal TLS version set to the highest version"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Sql-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                      [32m+[0m[0m displayName = "Select version for SQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Sql/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/minimalTlsVersion"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Sql/servers/minimalTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities."
      [32m+[0m[0m display_name        = "SQL Managed Instance should have the minimal TLS version set to the highest version"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-SqlMi-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                      [32m+[0m[0m displayName = "Select version for SQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ContainerDeleteRetentionPolicy"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce container delete retention policies larger than seven days for storage account. Enable this for increased data loss protection."
      [32m+[0m[0m display_name        = "Storage Accounts should use a container delete retention policy"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-ContainerDeleteRetentionPolicy"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minContainerDeleteRetentionInDays = {
                  [32m+[0m[0m defaultValue = 7
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Specifies the minimum number of days for the container delete retention policy"
                      [32m+[0m[0m displayName = "Minimum Container Delete Retention in Days"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/blobServices"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = false
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                  [32m+[0m[0m notEquals = true
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.days"
                                  [32m+[0m[0m less  = "[parameters('minContainerDeleteRetentionInDays')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CopyScope"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should restrict the allowed copy scope. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Allowed Copy scope should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-CopyScope"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedCopyScope = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AAD",
                      [32m+[0m[0m "PrivateLink",
                    ]
                  [32m+[0m[0m defaultValue  = "AAD"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Specify the allowed copy scope."
                      [32m+[0m[0m displayName = "Allowed Copy Scope"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                  [32m+[0m[0m notEquals = "[parameters('allowedCopyScope')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CorsRules"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deny CORS rules for storage account for increased data exfiltration protection and endpoint protection."
      [32m+[0m[0m display_name        = "Storage Accounts should restrict CORS rules"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-CorsRules"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/blobServices"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/blobServices/cors.corsRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/fileServices/cors.corsRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/tableServices"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/tableServices/cors.corsRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/queueServices"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/queueServices/cors.corsRules[*]"
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-LocalUser"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should disable local users for features like SFTP. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Local users should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-LocalUser"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                  [32m+[0m[0m notEquals = false
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsBypass"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should restrict the bypass option for service-level network ACLs. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Network ACL bypass option should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-NetworkAclsBypass"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedBypassOptions = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "None",
                      [32m+[0m[0m "Logging",
                      [32m+[0m[0m "Metrics",
                      [32m+[0m[0m "AzureServices",
                      [32m+[0m[0m "Logging, Metrics",
                      [32m+[0m[0m "Logging, AzureServices",
                      [32m+[0m[0m "Metrics, AzureServices",
                      [32m+[0m[0m "Logging, Metrics, AzureServices",
                      [32m+[0m[0m "Logging, Metrics, AzureServices",
                    ]
                  [32m+[0m[0m defaultValue  = [
                      [32m+[0m[0m "Logging",
                      [32m+[0m[0m "Metrics",
                      [32m+[0m[0m "AzureServices",
                      [32m+[0m[0m "Logging, Metrics",
                      [32m+[0m[0m "Logging, AzureServices",
                      [32m+[0m[0m "Metrics, AzureServices",
                      [32m+[0m[0m "Logging, Metrics, AzureServices",
                      [32m+[0m[0m "Logging, Metrics, AzureServices",
                    ]
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Specifies which options are allowed to bypass the vnet configuration"
                      [32m+[0m[0m displayName = "Allowed Bypass Options"
                    }
                  [32m+[0m[0m type          = "Array"
                }
              [32m+[0m[0m effect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                  [32m+[0m[0m notIn = "[parameters('allowedBypassOptions')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsVirtualNetworkRules"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should restrict the virtual network service-level network ACLs. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Virtual network rules should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-NetworkAclsVirtualNetworkRules"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count   = {
                              [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.virtualNetworkRules[*]"
                            }
                          [32m+[0m[0m greater = 0
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesResourceId"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to services from a specific Azure subscription. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Resource Access Rules resource IDs should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-ResourceAccessRulesResourceId"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count   = {
                              [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                            }
                          [32m+[0m[0m greater = 0
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count   = {
                              [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                              [32m+[0m[0m where = {
                                  [32m+[0m[0m equals = "*"
                                  [32m+[0m[0m value  = "[split(current('Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].resourceId'), '/')[2]]"
                                }
                            }
                          [32m+[0m[0m greater = 0
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesTenantId"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to service from the same AAD tenant. Enforce this for increased data exfiltration protection."
      [32m+[0m[0m display_name        = "Resource Access Rules Tenants should be restricted for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-ResourceAccessRulesTenantId"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count   = {
                              [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                            }
                          [32m+[0m[0m greater = 0
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].tenantId"
                          [32m+[0m[0m notEquals = "[subscription().tenantId]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-SFTP"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of Storage Accounts with SFTP enabled for Blob Storage."
      [32m+[0m[0m display_name        = "Storage Accounts with SFTP enabled should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deny-Storage-SFTP"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "true"
                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/isSftpEnabled"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ServicesEncryption"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Azure Storage accounts should enforce encryption for all storage services. Enforce this for increased encryption scope."
      [32m+[0m[0m display_name        = "Encryption for storage services should be enforced for Storage Accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-ServicesEncryption"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m exists = "false"
                                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                          [32m+[0m[0m notEquals = true
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m exists = "false"
                                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                          [32m+[0m[0m notEquals = true
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m exists = "false"
                                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                          [32m+[0m[0m notEquals = "Account"
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m anyOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m exists = "false"
                                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                          [32m+[0m[0m notEquals = "Account"
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Audit requirement of Secure transfer in your storage account. This policy is superseded by https://www.azadvertizer.net/azpolicyadvertizer/fe83a0eb-a853-422d-aac2-1bffd182c5d0.html and https://www.azadvertizer.net/azpolicyadvertizer/404c3081-a854-4457-ae30-26a93ef643f9.html"
      [32m+[0m[0m display_name        = "[Deprecated] Storage Account set to minimum TLS and Secure transfer should be enabled"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "fe83a0eb-a853-422d-aac2-1bffd182c5d0,404c3081-a854-4457-ae30-26a93ef643f9"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Storage-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimumTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLS1_0",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version on Azure Storage Account to enforce"
                      [32m+[0m[0m displayName = "Storage Account select minimum TLS version"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m allOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m less  = "2019-04-01"
                                          [32m+[0m[0m value = "[requestContext().apiVersion]"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m exists = "false"
                                          [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "false"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimumTlsVersion')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageAccount-CustomDomain"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of Storage Accounts with custom domains assigned as communication cannot be encrypted, and always uses HTTP."
      [32m+[0m[0m display_name        = "Storage Accounts with custom domains assigned should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-StorageAccount-CustomDomain"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "true"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/customDomain"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/customDomain.useSubDomainName"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level."
      [32m+[0m[0m display_name        = "Subnets should have a Network Security Group"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Subnet-Without-Nsg"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m excludedSubnets = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "GatewaySubnet",
                      [32m+[0m[0m "AzureFirewallSubnet",
                      [32m+[0m[0m "AzureFirewallManagementSubnet",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                      [32m+[0m[0m displayName = "Excluded Subnets"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count     = {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m allOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m exists = "false"
                                                  [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets[*].networkSecurityGroup.id"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  [32m+[0m[0m notEquals = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "name"
                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/networkSecurityGroup.id"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Penp"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of a subnet without Private Endpoint Netwotk Policies enabled. This policy is intended for 'workload' subnets, not 'central infrastructure' (aka, 'hub') subnets."
      [32m+[0m[0m display_name        = "Subnets without Private Endpoint Network Policies enabled should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Subnet-Without-Penp"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m excludedSubnets = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "GatewaySubnet",
                      [32m+[0m[0m "AzureFirewallSubnet",
                      [32m+[0m[0m "AzureFirewallManagementSubnet",
                      [32m+[0m[0m "AzureBastionSubnet",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                      [32m+[0m[0m displayName = "Excluded Subnets"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count     = {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m allOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m field     = "Microsoft.Network/virtualNetworks/subnets[*].privateEndpointNetworkPolicies"
                                                  [32m+[0m[0m notEquals = "Enabled"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  [32m+[0m[0m notEquals = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "name"
                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Network/virtualNetworks/subnets/privateEndpointNetworkPolicies"
                                  [32m+[0m[0m notEquals = "Enabled"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Udr"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of a subnet without a User Defined Route (UDR)."
      [32m+[0m[0m display_name        = "Subnets should have a User Defined Route"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-Subnet-Without-Udr"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m excludedSubnets = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "AzureBastionSubnet",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                      [32m+[0m[0m displayName = "Excluded Subnets"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count     = {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m allOf = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m exists = "false"
                                                  [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets[*].routeTable.id"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  [32m+[0m[0m notEquals = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "name"
                                  [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m exists = "false"
                                  [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/routeTable.id"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-UDR-With-Specific-NextHop"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of a User Defined Route with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway'."
      [32m+[0m[0m display_name        = "User Defined Routes with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway' should be denied"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-UDR-With-Specific-NextHop"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m excludedDestinations = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "Internet",
                      [32m+[0m[0m "VirtualNetworkGateway",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of route destinations that are to be denied"
                      [32m+[0m[0m displayName = "Excluded Destinations"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/routeTables"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count     = {
                                      [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*].nextHopType"
                                          [32m+[0m[0m in    = "[parameters('excludedDestinations')]"
                                        }
                                    }
                                  [32m+[0m[0m notEquals = 0
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/routeTables/routes"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Network/routeTables/routes/nextHopType"
                                  [32m+[0m[0m in    = "[parameters('excludedDestinations')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of vNet Peerings outside of the same subscriptions under the assigned scope."
      [32m+[0m[0m display_name        = "Deny vNet peering cross subscription."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-VNET-Peer-Cross-Sub"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                          [32m+[0m[0m notcontains = "[subscription().id]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peering-To-Non-Approved-VNETs"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of vNet Peerings to non-approved vNets under the assigned scope."
      [32m+[0m[0m display_name        = "Deny vNet peering to non-approved vNets"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-VNET-Peering-To-Non-Approved-VNETs"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m allowedVnets = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of allowed vNets that can be peered with. Must be entered using their resource ID. Example: /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}"
                      [32m+[0m[0m displayName = "Allowed vNets to peer with"
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m not = {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                                      [32m+[0m[0m in    = "[parameters('allowedVnets')]"
                                    }
                                },
                            ]
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                  [32m+[0m[0m field  = "type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m not = {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                      [32m+[0m[0m in    = "[parameters('allowedVnets')]"
                                    }
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m not = {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                    }
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNet-Peering"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy denies the creation of vNet Peerings under the assigned scope."
      [32m+[0m[0m display_name        = "Deny vNet peering "
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deny-VNet-Peering"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m effect = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This is a DenyAction implementation policy on Activity Logs."
      [32m+[0m[0m display_name        = "DenyAction implementation on Activity Logs"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = false
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "DenyAction-ActivityLogs"
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Resources/subscriptions/providers/diagnosticSettings"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m actionNames = [
                          [32m+[0m[0m "delete",
                        ]
                    }
                  [32m+[0m[0m effect  = "denyAction"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DeleteResources"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enables you to specify the resource and resource type that your organization can protect from accidentals deletion by blocking delete calls using the deny action effect."
      [32m+[0m[0m display_name        = "Do not allow deletion of specified resource and resource type"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "General"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "DenyAction-DeleteResources"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DenyAction",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DenyAction"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m resourceName = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide the name of the resource that you want to protect from accidental deletion."
                      [32m+[0m[0m displayName = "Resource Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m resourceType = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide the resource type that you want to protect from accidental deletion."
                      [32m+[0m[0m displayName = "Resource Type"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "[parameters('resourceType')]"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "name"
                          [32m+[0m[0m like  = "[parameters('resourceName')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m actionNames = [
                          [32m+[0m[0m "delete",
                        ]
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "DenyAction implementation on Diagnostic Logs."
      [32m+[0m[0m display_name        = "DenyAction implementation on Diagnostic Logs."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = false
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "DenyAction-DiagnosticLogs"
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Insights/diagnosticSettings"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m actionNames = [
                          [32m+[0m[0m "delete",
                        ]
                    }
                  [32m+[0m[0m effect  = "denyAction"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy Microsoft Defender for Cloud Security Contacts"
      [32m+[0m[0m display_name        = "Deploy Microsoft Defender for Cloud Security Contacts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-ASC-SecurityContacts"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m emailSecurityContact = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide email addresses (semi-colon separated) for Defender for Cloud contact details"
                      [32m+[0m[0m displayName = "Security contacts email address"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m minimalSeverity      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "High",
                      [32m+[0m[0m "Medium",
                      [32m+[0m[0m "Low",
                    ]
                  [32m+[0m[0m defaultValue  = "High"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Defines the minimal alert severity which will be sent as email notifications"
                      [32m+[0m[0m displayName = "Minimal severity"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m emailSecurityContact = {
                                      [32m+[0m[0m value = "[parameters('emailSecurityContact')]"
                                    }
                                  [32m+[0m[0m minimalSeverity      = {
                                      [32m+[0m[0m value = "[parameters('minimalSeverity')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m emailSecurityContact = {
                                          [32m+[0m[0m metadata = {
                                              [32m+[0m[0m description = "Security contacts email address"
                                            }
                                          [32m+[0m[0m type     = "string"
                                        }
                                      [32m+[0m[0m minimalSeverity      = {
                                          [32m+[0m[0m metadata = {
                                              [32m+[0m[0m description = "Minimal severity level reported"
                                            }
                                          [32m+[0m[0m type     = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2023-12-01-preview"
                                          [32m+[0m[0m name       = "default"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m emails               = "[parameters('emailSecurityContact')]"
                                              [32m+[0m[0m isEnabled            = true
                                              [32m+[0m[0m notificationsByRole  = {
                                                  [32m+[0m[0m roles = [
                                                      [32m+[0m[0m "Owner",
                                                    ]
                                                  [32m+[0m[0m state = "On"
                                                }
                                              [32m+[0m[0m notificationsSources = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m minimalSeverity = "[parameters('minimalSeverity')]"
                                                      [32m+[0m[0m sourceType      = "Alert"
                                                    },
                                                ]
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Security/securityContacts"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m contains = "[parameters('emailSecurityContact')]"
                                  [32m+[0m[0m field    = "Microsoft.Security/securityContacts/email"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m field  = "Microsoft.Security/securityContacts/isEnabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m contains = "[parameters('minimalSeverity')]"
                                  [32m+[0m[0m field    = "Microsoft.Security/securityContacts/notificationsSources[*].Alert.minimalSeverity"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "subscription"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Security/securityContacts"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Budget"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy a default budget on all subscriptions under the assigned scope"
      [32m+[0m[0m display_name        = "Deploy a default budget on all subscriptions under the assigned scope"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Budget"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-Budget"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m amount          = {
                  [32m+[0m[0m defaultValue = "1000"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The total amount of cost or usage to track with the budget"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m budgetName      = {
                  [32m+[0m[0m defaultValue = "budget-set-by-policy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name for the budget to be created"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m contactEmails   = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The list of email addresses, in an array, to send the budget notification to when the threshold is exceeded."
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m contactGroups   = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The list of action groups, in an array, to send the budget notification to when the threshold is exceeded. It accepts array of strings."
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m contactRoles    = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "Owner",
                      [32m+[0m[0m "Contributor",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The list of contact RBAC roles, in an array, to send the budget notification to when the threshold is exceeded."
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m effect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m firstThreshold  = {
                  [32m+[0m[0m defaultValue = "90"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m secondThreshold = {
                  [32m+[0m[0m defaultValue = "100"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m timeGrain       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Monthly",
                      [32m+[0m[0m "Quarterly",
                      [32m+[0m[0m "Annually",
                      [32m+[0m[0m "BillingMonth",
                      [32m+[0m[0m "BillingQuarter",
                      [32m+[0m[0m "BillingAnnual",
                    ]
                  [32m+[0m[0m defaultValue  = "Monthly"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The time covered by a budget. Tracking of the amount will be reset based on the time grain."
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m amount          = {
                                      [32m+[0m[0m value = "[parameters('amount')]"
                                    }
                                  [32m+[0m[0m budgetName      = {
                                      [32m+[0m[0m value = "[parameters('budgetName')]"
                                    }
                                  [32m+[0m[0m contactEmails   = {
                                      [32m+[0m[0m value = "[parameters('contactEmails')]"
                                    }
                                  [32m+[0m[0m contactGroups   = {
                                      [32m+[0m[0m value = "[parameters('contactGroups')]"
                                    }
                                  [32m+[0m[0m contactRoles    = {
                                      [32m+[0m[0m value = "[parameters('contactRoles')]"
                                    }
                                  [32m+[0m[0m firstThreshold  = {
                                      [32m+[0m[0m value = "[parameters('firstThreshold')]"
                                    }
                                  [32m+[0m[0m secondThreshold = {
                                      [32m+[0m[0m value = "[parameters('secondThreshold')]"
                                    }
                                  [32m+[0m[0m timeGrain       = {
                                      [32m+[0m[0m value = "[parameters('timeGrain')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m amount          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m budgetName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m contactEmails   = {
                                          [32m+[0m[0m type = "Array"
                                        }
                                      [32m+[0m[0m contactGroups   = {
                                          [32m+[0m[0m type = "Array"
                                        }
                                      [32m+[0m[0m contactRoles    = {
                                          [32m+[0m[0m type = "Array"
                                        }
                                      [32m+[0m[0m firstThreshold  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m secondThreshold = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m startDate       = {
                                          [32m+[0m[0m defaultValue = "[concat(utcNow('MM'), '/01/', utcNow('yyyy'))]"
                                          [32m+[0m[0m type         = "String"
                                        }
                                      [32m+[0m[0m timeGrain       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2019-10-01"
                                          [32m+[0m[0m name       = "[parameters('budgetName')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m amount        = "[parameters('amount')]"
                                              [32m+[0m[0m category      = "Cost"
                                              [32m+[0m[0m notifications = {
                                                  [32m+[0m[0m NotificationForExceededBudget1 = {
                                                      [32m+[0m[0m contactEmails = "[parameters('contactEmails')]"
                                                      [32m+[0m[0m contactGroups = "[parameters('contactGroups')]"
                                                      [32m+[0m[0m contactRoles  = "[parameters('contactRoles')]"
                                                      [32m+[0m[0m enabled       = true
                                                      [32m+[0m[0m operator      = "GreaterThan"
                                                      [32m+[0m[0m threshold     = "[parameters('firstThreshold')]"
                                                    }
                                                  [32m+[0m[0m NotificationForExceededBudget2 = {
                                                      [32m+[0m[0m contactEmails = "[parameters('contactEmails')]"
                                                      [32m+[0m[0m contactGroups = "[parameters('contactGroups')]"
                                                      [32m+[0m[0m contactRoles  = "[parameters('contactRoles')]"
                                                      [32m+[0m[0m enabled       = true
                                                      [32m+[0m[0m operator      = "GreaterThan"
                                                      [32m+[0m[0m threshold     = "[parameters('secondThreshold')]"
                                                    }
                                                }
                                              [32m+[0m[0m timeGrain     = "[parameters('timeGrain')]"
                                              [32m+[0m[0m timePeriod    = {
                                                  [32m+[0m[0m startDate = "[parameters('startDate')]"
                                                }
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Consumption/budgets"
                                        },
                                    ]
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('amount')]"
                                  [32m+[0m[0m field  = "Microsoft.Consumption/budgets/amount"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('timeGrain')]"
                                  [32m+[0m[0m field  = "Microsoft.Consumption/budgets/timeGrain"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Cost"
                                  [32m+[0m[0m field  = "Microsoft.Consumption/budgets/category"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "subscription"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Consumption/budgets"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Custom-Route-Table"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys a route table with specific user defined routes when one does not exist. The route table deployed by the policy must be manually associated to subnet(s)"
      [32m+[0m[0m display_name        = "Deploy a route table with specific user defined routes"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Custom-Route-Table"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m disableBgpPropagation = {
                  [32m+[0m[0m defaultValue = false
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Disable BGP Propagation"
                      [32m+[0m[0m displayName = "DisableBgpPropagation"
                    }
                  [32m+[0m[0m type         = "Boolean"
                }
              [32m+[0m[0m effect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m requiredRoutes        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Routes that must exist in compliant route tables deployed by this policy"
                      [32m+[0m[0m displayName = "requiredRoutes"
                    }
                  [32m+[0m[0m type     = "Array"
                }
              [32m+[0m[0m routeTableName        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the route table automatically deployed by this policy"
                      [32m+[0m[0m displayName = "routeTableName"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vnetRegion            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Only VNets in this region will be evaluated against this policy"
                      [32m+[0m[0m displayName = "vnetRegion"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "[parameters('vnetRegion')]"
                          [32m+[0m[0m field  = "location"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m disableBgpPropagation = {
                                      [32m+[0m[0m value = "[parameters('disableBgpPropagation')]"
                                    }
                                  [32m+[0m[0m requiredRoutes        = {
                                      [32m+[0m[0m value = "[parameters('requiredRoutes')]"
                                    }
                                  [32m+[0m[0m routeTableName        = {
                                      [32m+[0m[0m value = "[parameters('routeTableName')]"
                                    }
                                  [32m+[0m[0m vnetRegion            = {
                                      [32m+[0m[0m value = "[parameters('vnetRegion')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m disableBgpPropagation = {
                                          [32m+[0m[0m type = "bool"
                                        }
                                      [32m+[0m[0m requiredRoutes        = {
                                          [32m+[0m[0m type = "array"
                                        }
                                      [32m+[0m[0m routeTableName        = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vnetRegion            = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                          [32m+[0m[0m name       = "routeTableDepl"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m mode       = "Incremental"
                                              [32m+[0m[0m parameters = {
                                                  [32m+[0m[0m disableBgpPropagation = {
                                                      [32m+[0m[0m value = "[parameters('disableBgpPropagation')]"
                                                    }
                                                  [32m+[0m[0m requiredRoutes        = {
                                                      [32m+[0m[0m value = "[parameters('requiredRoutes')]"
                                                    }
                                                  [32m+[0m[0m routeTableName        = {
                                                      [32m+[0m[0m value = "[parameters('routeTableName')]"
                                                    }
                                                  [32m+[0m[0m vnetRegion            = {
                                                      [32m+[0m[0m value = "[parameters('vnetRegion')]"
                                                    }
                                                }
                                              [32m+[0m[0m template   = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m disableBgpPropagation = {
                                                          [32m+[0m[0m type = "bool"
                                                        }
                                                      [32m+[0m[0m requiredRoutes        = {
                                                          [32m+[0m[0m type = "array"
                                                        }
                                                      [32m+[0m[0m routeTableName        = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m vnetRegion            = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-02-01"
                                                          [32m+[0m[0m location   = "[[parameters('vnetRegion')]"
                                                          [32m+[0m[0m name       = "[[parameters('routeTableName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m copy                       = "[variables('copyLoop')]"
                                                              [32m+[0m[0m disableBgpRoutePropagation = "[[parameters('disableBgpPropagation')]"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Network/routeTables"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m copyLoop = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m count = "[[length(parameters('requiredRoutes'))]"
                                              [32m+[0m[0m input = {
                                                  [32m+[0m[0m name       = "[[concat('route-',copyIndex('routes'))]"
                                                  [32m+[0m[0m properties = {
                                                      [32m+[0m[0m addressPrefix    = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[0]]"
                                                      [32m+[0m[0m nextHopIpAddress = "[[if(equals(toLower(split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]),'virtualappliance'),split(parameters('requiredRoutes')[copyIndex('routes')], ';')[2], null())]"
                                                      [32m+[0m[0m nextHopType      = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]]"
                                                    }
                                                }
                                              [32m+[0m[0m name  = "routes"
                                            },
                                        ]
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('routeTableName')]"
                                  [32m+[0m[0m field  = "name"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m count  = {
                                      [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m in    = "[parameters('requiredRoutes')]"
                                          [32m+[0m[0m value = "[concat(current('Microsoft.Network/routeTables/routes[*].addressPrefix'), ';', current('Microsoft.Network/routeTables/routes[*].nextHopType'), if(equals(toLower(current('Microsoft.Network/routeTables/routes[*].nextHopType')),'virtualappliance'), concat(';', current('Microsoft.Network/routeTables/routes[*].nextHopIpAddress')), ''))]"
                                        }
                                    }
                                  [32m+[0m[0m equals = "[length(parameters('requiredRoutes'))]"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/subscriptions/e867a45d-e513-44ac-931e-4741cef80b24/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Network/routeTables"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-DDoSProtection"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys an Azure DDoS Network Protection"
      [32m+[0m[0m display_name        = "Deploy an Azure DDoS Network Protection"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.1"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-DDoSProtection"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ddosName   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "DDoSVnet"
                      [32m+[0m[0m displayName = "ddosName"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m ddosRegion = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "DDoSVnet location"
                      [32m+[0m[0m displayName = "ddosRegion"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m rgName     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide name for resource group."
                      [32m+[0m[0m displayName = "rgName"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment        = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m ddosname   = {
                                      [32m+[0m[0m value = "[parameters('ddosname')]"
                                    }
                                  [32m+[0m[0m ddosregion = {
                                      [32m+[0m[0m value = "[parameters('ddosRegion')]"
                                    }
                                  [32m+[0m[0m rgName     = {
                                      [32m+[0m[0m value = "[parameters('rgName')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m ddosRegion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m ddosname   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m rgName     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2018-05-01"
                                          [32m+[0m[0m location   = "[deployment().location]"
                                          [32m+[0m[0m name       = "[parameters('rgName')]"
                                          [32m+[0m[0m properties = {}
                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2018-05-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                            ]
                                          [32m+[0m[0m name          = "ddosprotection"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m outputs        = {}
                                                  [32m+[0m[0m parameters     = {}
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2019-12-01"
                                                          [32m+[0m[0m location   = "[parameters('ddosRegion')]"
                                                          [32m+[0m[0m name       = "[parameters('ddosName')]"
                                                          [32m+[0m[0m properties = {}
                                                          [32m+[0m[0m type       = "Microsoft.Network/ddosProtectionPlans"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('rgName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope   = "subscription"
                      [32m+[0m[0m existenceScope    = "resourceGroup"
                      [32m+[0m[0m name              = "[parameters('ddosName')]"
                      [32m+[0m[0m resourceGroupName = "[parameters('rgName')]"
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      [32m+[0m[0m type              = "Microsoft.Network/ddosProtectionPlans"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Automation to stream to a Log Analytics workspace when any Automation which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Automation to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-AA"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Automation/automationAccounts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "JobLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "JobStreams"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DscNodeStatus"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AuditEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Automation/automationAccounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Container Instances to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Container Instances to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-ACI"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.ContainerInstance/containerGroups"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.ContainerInstance/containerGroups/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Container Registry to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Container Registry to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-ACR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.ContainerRegistry/registries"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ContainerRegistryLoginEvents"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ContainerRegistryRepositoryEvents"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.ContainerRegistry/registries/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for API Management to stream to a Log Analytics workspace when any API Management which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for API Management to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-APIMgmt"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logAnalyticsDestinationType = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AzureDiagnostics",
                      [32m+[0m[0m "Dedicated",
                    ]
                  [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
                      [32m+[0m[0m displayName = "Log Analytics destination type"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logsEnabled                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName                 = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.ApiManagement/service"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location                    = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics                = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logAnalyticsDestinationType = {
                                      [32m+[0m[0m value = "[parameters('logAnalyticsDestinationType')]"
                                    }
                                  [32m+[0m[0m logsEnabled                 = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled              = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName                 = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName                = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics                = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalyticsDestinationType = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled              = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName                = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logAnalyticsDestinationType = "[parameters('logAnalyticsDestinationType')]"
                                              [32m+[0m[0m logs                        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "GatewayLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "WebSocketConnectionLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics                     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId                 = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.ApiManagement/service/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any Scaling Plan which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-AVDScalingPlans"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/scalingplans"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Autoscale"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/scalingplans/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Analysis Services to stream to a Log Analytics workspace when any Analysis Services which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Analysis Services to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-AnalysisService"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.AnalysisServices/servers"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Engine"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Service"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.AnalysisServices/servers/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Azure API for FHIR to stream to a Log Analytics workspace when any Azure API for FHIR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Azure API for FHIR to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-ApiForFHIR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.HealthcareApis/services"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.HealthcareApis/services/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-ApplicationGateway"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ApplicationGatewayAccessLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ApplicationGatewayPerformanceLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ApplicationGatewayFirewallLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/applicationGateways/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Azure Bastion to stream to a Log Analytics workspace when any Azure Bastion which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Bastion"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/bastionHosts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "BastionAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/bastionHosts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for CDN Endpoint to stream to a Log Analytics workspace when any CDN Endpoint which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for CDN Endpoint to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-CDNEndpoints"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Cdn/profiles/endpoints"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('fullName')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "CoreAnalytics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = []
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Cdn/profiles/endpoints/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Cognitive Services to stream to a Log Analytics workspace when any Cognitive Services which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Cognitive Services to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-CognitiveServices"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Audit"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RequestResponse"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Trace"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.CognitiveServices/accounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-CosmosDB"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DocumentDB/databaseAccounts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataPlaneRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "MongoRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "QueryRuntimeStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PartitionKeyStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PartitionKeyRUConsumption"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ControlPlaneRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "CassandraRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "GremlinRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TableApiRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "Requests"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Data Lake Analytics to stream to a Log Analytics workspace when any Data Lake Analytics which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Data Lake Analytics to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-DLAnalytics"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DataLakeAnalytics/accounts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Audit"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Requests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DataLakeAnalytics/accounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-DataExplorerCluster"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Kusto/Clusters"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SucceededIngestion"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "FailedIngestion"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "IngestionBatching"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Command"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Query"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TableUsageStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TableDetails"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Kusto/Clusters/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Data Factory to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-DataFactory"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DataFactory/factories"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ActivityRuns"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PipelineRuns"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TriggerRuns"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISPackageEventMessages"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISPackageExecutableStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISPackageEventMessageContext"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISPackageExecutionComponentPhases"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISPackageExecutionDataStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SSISIntegrationRuntimeLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SandboxPipelineRuns"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SandboxActivityRuns"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DataFactory/factories/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Databricks to stream to a Log Analytics workspace when any Databricks which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Databricks to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.3.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Databricks"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "dbfs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "clusters"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "accounts"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "jobs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "notebook"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ssh"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "workspace"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "secrets"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "sqlPermissions"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "instancePools"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "sqlanalytics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "genie"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "globalInitScripts"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "iamRole"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "mlflowExperiment"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "featureStore"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RemoteHistoryService"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "mlflowAcledArtifact"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "databrickssql"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "deltaPipelines"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "modelRegistry"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "repos"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "unityCatalog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "gitCredentials"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "webTerminal"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "serverlessRealTimeInference"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "clusterLibraries"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "partnerHub"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "clamAVScan"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "capsule8Dataplane"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Databricks/workspaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Event Grid subscriptions to stream to a Log Analytics workspace when any Event Grid subscriptions which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Event Grid subscriptions to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-EventGridSub"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.EventGrid/eventSubscriptions"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.EventGrid/eventSubscriptions/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Event Grid System Topic to stream to a Log Analytics workspace when any Event Grid System Topic which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Event Grid System Topic to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-EventGridSystemTopic"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.EventGrid/systemTopics"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeliveryFailures"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.EventGrid/systemTopics/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Event Grid Topic to stream to a Log Analytics workspace when any Event Grid Topic which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Event Grid Topic to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-EventGridTopic"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.EventGrid/topics"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeliveryFailures"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PublishFailures"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataPlaneRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.EventGrid/topics/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-ExpressRoute"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/expressRouteCircuits"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PeeringRouteLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/expressRouteCircuits/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Firewall to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Firewall"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logAnalyticsDestinationType = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AzureDiagnostics",
                      [32m+[0m[0m "Dedicated",
                    ]
                  [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
                      [32m+[0m[0m displayName = "Log Analytics destination type"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logsEnabled                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName                 = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/azureFirewalls"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location                    = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics                = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logAnalyticsDestinationType = {
                                      [32m+[0m[0m value = "[parameters('logAnalyticsDestinationType')]"
                                    }
                                  [32m+[0m[0m logsEnabled                 = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled              = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName                 = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName                = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics                = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalyticsDestinationType = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled              = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName                = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logAnalyticsDestinationType = "[parameters('logAnalyticsDestinationType')]"
                                              [32m+[0m[0m logs                        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AzureFirewallApplicationRule"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AzureFirewallNetworkRule"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AzureFirewallDnsProxy"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWNetworkRule"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWApplicationRule"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWNatRule"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWThreatIntel"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWIdpsSignature"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWDnsQuery"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWFqdnResolveFailure"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWApplicationRuleAggregation"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWNetworkRuleAggregation"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWNatRuleAggregation"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWFatFlow"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AZFWFlowTrace"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics                     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId                 = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/azureFirewalls/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Front Door to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-FrontDoor"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/frontDoors"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "FrontdoorAccessLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "FrontdoorWebApplicationFirewallLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/frontDoors/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Function"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "functionapp"
                          [32m+[0m[0m value    = "[field('kind')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "FunctionAppLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for HDInsight to stream to a Log Analytics workspace when any HDInsight which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for HDInsight to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-HDInsight"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.HDInsight/clusters"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.HDInsight/clusters/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-LoadBalancer"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/loadBalancers"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "LoadBalancerAlertEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "LoadBalancerProbeHealthStatus"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/loadBalancers/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Log Analytics workspaces to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-LogAnalytics"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "microsoft.operationalinsights/workspaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Audit"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "microsoft.operationalinsights/workspaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Logic Apps integration service environment to stream to a Log Analytics workspace when any Logic Apps integration service environment which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Logic Apps integration service environment to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-LogicAppsISE"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Logic/integrationAccounts"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "IntegrationAccountTrackingEvents"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = []
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Logic/integrationAccounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for MariaDB to stream to a Log Analytics workspace when any MariaDB  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. Deprecating due to service retirement, https://learn.microsoft.com/en-us/azure/mariadb/whats-happening-to-mariadb"
      [32m+[0m[0m display_name        = "[Deprecated] Diagnostic Settings for MariaDB to Log Analytics Workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-MariaDB"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DBforMariaDB/servers"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "MySqlSlowLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "MySqlAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforMariaDB/servers/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Azure Media Service to stream to a Log Analytics workspace when any Azure Media Service which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Azure Media Service to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-MediaService"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Media/mediaServices"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "KeyDeliveryRequests"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Media/mediaServices/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Machine Learning workspace to stream to a Log Analytics workspace when any Machine Learning workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Machine Learning workspace to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-MlWorkspace"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AmlComputeClusterEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AmlComputeClusterNodeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AmlComputeJobEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AmlComputeCpuGpuUtilization"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AmlRunStatusChangedEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ModelsChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ModelsReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ModelsActionEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeploymentReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeploymentEventACI"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeploymentEventAKS"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "InferencingOperationAKS"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "InferencingOperationACI"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataLabelChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataLabelReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ComputeInstanceEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataStoreChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataStoreReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataSetChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DataSetReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PipelineChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PipelineReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RunEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RunReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "EnvironmentChangeEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "EnvironmentReadEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.MachineLearningServices/workspaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Database for MySQL to stream to a Log Analytics workspace when any Database for MySQL which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Database for MySQL to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-MySQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "MySqlSlowLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "MySqlAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforMySQL/servers/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-NIC"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/networkInterfaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/networkInterfaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-NetworkSecurityGroups"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "NetworkSecurityGroupEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "NetworkSecurityGroupRuleCounter"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = []
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Database for PostgreSQL to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Database for PostgreSQL to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-PostgreSQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m anyOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/flexibleServers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m resourceType   = {
                                      [32m+[0m[0m value = "[field('type')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceType   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-05-01-preview"
                                          [32m+[0m[0m condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/flexibleServers')]"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PostgreSQLLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/flexibleServers/providers/diagnosticSettings"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-05-01-preview"
                                          [32m+[0m[0m condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/servers')]"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "PostgreSQLLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "QueryStoreRuntimeStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "QueryStoreWaitStatistics"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/servers/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Power BI Embedded to stream to a Log Analytics workspace when any Power BI Embedded which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Power BI Embedded to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-PowerBIEmbedded"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.PowerBIDedicated/capacities"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Engine"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.PowerBIDedicated/capacities/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Redis Cache to stream to a Log Analytics workspace when any Redis Cache which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Redis Cache to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-RedisCache"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Cache/redis"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Cache/redis/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Relay to stream to a Log Analytics workspace when any Relay which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Relay to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Relay"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Relay/namespaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "HybridConnectionsEvent"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Relay/namespaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for SQL Elastic Pools to stream to a Log Analytics workspace when any SQL Elastic Pools which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for SQL Elastic Pools to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-SQLElasticPools"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/servers/elasticPools"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('fullName')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/elasticPools/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for SQL Managed Instances to stream to a Log Analytics workspace when any SQL Managed Instances which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-SQLMI"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ResourceUsageStats"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SQLSecurityAuditEvents"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DevOpsOperationsAudit"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/managedInstances/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for SignalR to stream to a Log Analytics workspace when any SignalR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for SignalR to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-SignalR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.SignalRService/SignalR"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AllLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.SignalRService/SignalR/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Time Series Insights to stream to a Log Analytics workspace when any Time Series Insights which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Time Series Insights to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-TimeSeriesInsights"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.TimeSeriesInsights/environments"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Ingress"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Management"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.TimeSeriesInsights/environments/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-TrafficManager"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/trafficManagerProfiles"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ProbeHealthStatusEvents"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/trafficManagerProfiles/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-VM"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Virtual Machine Scale Sets  to stream to a Log Analytics workspace when any Virtual Machine Scale Sets  which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Virtual Machine Scale Sets to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-VMSS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Compute/virtualMachineScaleSets"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachineScaleSets/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for VPN Gateway to stream to a Log Analytics workspace when any VPN Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for VPN Gateway to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-VNetGW"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworkGateways"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "GatewayDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "IKEDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "P2SDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RouteDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TunnelDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/virtualNetworkGateways/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for VWAN S2S VPN Gateway to stream to a Log Analytics workspace when any VWAN S2S VPN Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for VWAN S2S VPN Gateway to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-VWanS2SVPNGW"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/vpnGateways"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "GatewayDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "IKEDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "RouteDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TunnelDiagnosticLog"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/vpnGateways/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-VirtualNetwork"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "VMProtectionAlerts"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for AVD Application group to stream to a Log Analytics workspace when any application group which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for AVD Application group to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-WVDAppGroup"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/applicationGroups"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Checkpoint"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Error"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Management"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/applicationGroups/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for AVD Host Pools to stream to a Log Analytics workspace when any Host Pools which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for AVD Host Pools to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.3.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-WVDHostPools"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/hostpools"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Checkpoint"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Error"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Management"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Connection"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "HostRegistration"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AgentHealthStatus"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "NetworkData"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "SessionHostManagement"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "ConnectionGraphicsData"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/hostpools/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for AVD Workspace to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-WVDWorkspace"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName  = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/workspaces"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location     = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled  = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName  = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Checkpoint"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Error"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Management"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Feed"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/workspaces/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for App Service Plan to stream to a Log Analytics workspace when any App Service Plan which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-WebServerFarm"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Web/serverfarms"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = []
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Web/serverfarms/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for App Service to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-Website"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m notContains = "functionapp"
                          [32m+[0m[0m value       = "[field('kind')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m serverFarmId   = {
                                      [32m+[0m[0m value = "[field('Microsoft.Web/sites/serverFarmId')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {
                                      [32m+[0m[0m policy = {
                                          [32m+[0m[0m type  = "string"
                                          [32m+[0m[0m value = "[concat(parameters('logAnalytics'), 'configured for diagnostic logs for ', ': ', parameters('resourceName'))]"
                                        }
                                    }
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m serverFarmId   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = "[if(startsWith(reference(parameters('serverFarmId'), '2021-03-01', 'Full').sku.tier, 'Premium'), variables('logs').premiumTierLogs, variables('logs').otherTierLogs)]"
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m logs = {
                                          [32m+[0m[0m otherTierLogs   = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceHTTPLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceConsoleLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceAppLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceIPSecAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServicePlatformLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                            ]
                                          [32m+[0m[0m premiumTierLogs = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceAntivirusScanAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceHTTPLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceConsoleLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceAppLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceFileAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServiceIPSecAuditLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m category = "AppServicePlatformLogs"
                                                  [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                },
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logsEnabled')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('metricsEnabled')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys the diagnostic settings for IoT Hub to stream to a Log Analytics workspace when any IoT Hub which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings for IoT Hub to Log Analytics workspace"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Diagnostics-iotHub"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics   = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m logsEnabled    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable logs"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m metricsEnabled = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "True",
                      [32m+[0m[0m "False",
                    ]
                  [32m+[0m[0m defaultValue  = "True"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      [32m+[0m[0m displayName = "Enable metrics"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m profileName    = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Devices/IotHubs"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location       = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics   = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m logsEnabled    = {
                                      [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                    }
                                  [32m+[0m[0m metricsEnabled = {
                                      [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                    }
                                  [32m+[0m[0m profileName    = {
                                      [32m+[0m[0m value = "[parameters('profileName')]"
                                    }
                                  [32m+[0m[0m resourceName   = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m logs        = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Connections"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeviceTelemetry"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "C2DCommands"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeviceIdentityOperations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "FileUploadOperations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Routes"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "D2CTwinOperations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "C2DTwinOperations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "TwinQueries"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "JobsOperations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DirectMethods"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DistributedTracing"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "Configurations"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "DeviceStreams"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m metrics     = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category        = "AllMetrics"
                                                      [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                      [32m+[0m[0m retentionPolicy = {
                                                          [32m+[0m[0m days    = 0
                                                          [32m+[0m[0m enabled = false
                                                        }
                                                      [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                    },
                                                ]
                                              [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Devices/IotHubs/providers/diagnosticSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                  [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[parameters('profileName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-FirewallPolicy"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys Azure Firewall Manager policy in subscription where the policy is assigned."
      [32m+[0m[0m display_name        = "Deploy Azure Firewall Manager policy in the subscription"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-FirewallPolicy"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m fwPolicyRegion = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Azure region for Azure Firewall Policy"
                      [32m+[0m[0m displayName = "fwPolicyRegion"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m fwpolicy       = {
                  [32m+[0m[0m defaultValue = {}
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Object describing Azure Firewall Policy"
                      [32m+[0m[0m displayName = "fwpolicy"
                    }
                  [32m+[0m[0m type         = "Object"
                }
              [32m+[0m[0m rgName         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide name for resource group."
                      [32m+[0m[0m displayName = "rgName"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment        = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m fwPolicy       = {
                                      [32m+[0m[0m value = "[parameters('fwPolicy')]"
                                    }
                                  [32m+[0m[0m fwPolicyRegion = {
                                      [32m+[0m[0m value = "[parameters('fwPolicyRegion')]"
                                    }
                                  [32m+[0m[0m rgName         = {
                                      [32m+[0m[0m value = "[parameters('rgName')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m fwPolicy       = {
                                          [32m+[0m[0m type = "object"
                                        }
                                      [32m+[0m[0m fwPolicyRegion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m rgName         = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2018-05-01"
                                          [32m+[0m[0m location   = "[deployment().location]"
                                          [32m+[0m[0m name       = "[parameters('rgName')]"
                                          [32m+[0m[0m properties = {}
                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2018-05-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                            ]
                                          [32m+[0m[0m name          = "fwpolicies"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m outputs        = {}
                                                  [32m+[0m[0m parameters     = {}
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2019-09-01"
                                                          [32m+[0m[0m dependsOn  = []
                                                          [32m+[0m[0m location   = "[parameters('fwpolicy').location]"
                                                          [32m+[0m[0m name       = "[parameters('fwpolicy').firewallPolicyName]"
                                                          [32m+[0m[0m properties = {}
                                                          [32m+[0m[0m resources  = [
                                                              [32m+[0m[0m {
                                                                  [32m+[0m[0m apiVersion = "2019-09-01"
                                                                  [32m+[0m[0m dependsOn  = [
                                                                      [32m+[0m[0m "[resourceId('Microsoft.Network/firewallPolicies',parameters('fwpolicy').firewallPolicyName)]",
                                                                    ]
                                                                  [32m+[0m[0m name       = "[parameters('fwpolicy').ruleGroups.name]"
                                                                  [32m+[0m[0m properties = {
                                                                      [32m+[0m[0m priority = "[parameters('fwpolicy').ruleGroups.properties.priority]"
                                                                      [32m+[0m[0m rules    = "[parameters('fwpolicy').ruleGroups.properties.rules]"
                                                                    }
                                                                  [32m+[0m[0m type       = "ruleGroups"
                                                                },
                                                            ]
                                                          [32m+[0m[0m tags       = {}
                                                          [32m+[0m[0m type       = "Microsoft.Network/firewallPolicies"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('rgName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope   = "subscription"
                      [32m+[0m[0m existenceScope    = "resourceGroup"
                      [32m+[0m[0m resourceGroupName = "[parameters('rgName')]"
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type              = "Microsoft.Network/firewallPolicies"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-LogicApp-TLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Periodically, newer versions are released for TLS either due to security flaws, include additional functionality, and enhance speed. Upgrade to the latest TLS version for Function apps to take advantage of security fixes, if any, and/or new functionalities of the latest version."
      [32m+[0m[0m display_name        = "Configure Logic apps to use the latest TLS version"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Logic Apps"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-LogicApp-TLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Web/sites"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m contains = "workflowapp"
                          [32m+[0m[0m field    = "kind"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m siteName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m siteName = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-02-01"
                                          [32m+[0m[0m name       = "[concat(parameters('siteName'), '/web')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minTlsVersion = "1.2"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Web/sites/config"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m equals = "1.2"
                          [32m+[0m[0m field  = "Microsoft.Web/sites/config/minTlsVersion"
                        }
                      [32m+[0m[0m name               = "web"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Web/sites/config"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/2227e1f1-23dd-4c3a-85a9-7024a401d8b2.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure Arc-enabled SQL Servers with DCR Association to Microsoft Defender for SQL user-defined DCR"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "2227e1f1-23dd-4c3a-85a9-7024a401d8b2"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MDFC-Arc-SQL-DCR-Association"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dcrId            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Id of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Id"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrName          = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrResourceGroup = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m workspaceRegion  = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace region"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.HybridCompute/machines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Windows"
                          [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/osName"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "true"
                          [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/mssqlDiscovered"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment        = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m dcrId            = {
                                      [32m+[0m[0m value = "[parameters('dcrId')]"
                                    }
                                  [32m+[0m[0m dcrName          = {
                                      [32m+[0m[0m value = "[parameters('dcrName')]"
                                    }
                                  [32m+[0m[0m dcrResourceGroup = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m resourceGroup    = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m vmName           = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m workspaceRegion  = {
                                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m dcrId            = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrName          = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrResourceGroup = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m resourceGroup    = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName           = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m workspaceRegion  = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                          [32m+[0m[0m name       = "[variables('dcraName')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m dataCollectionRuleId = "[variables('dcrId')]"
                                              [32m+[0m[0m description          = "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server."
                                            }
                                          [32m+[0m[0m type       = "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m dcrId                      = "[parameters('dcrId')]"
                                      [32m+[0m[0m dcrName                    = "[parameters('dcrName')]"
                                      [32m+[0m[0m dcraName                   = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                      [32m+[0m[0m defaultRGName              = "[parameters('resourceGroup')]"
                                      [32m+[0m[0m locationCode               = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                      [32m+[0m[0m locationLongNameToShortMap = {
                                          [32m+[0m[0m australiacentral   = "CAU"
                                          [32m+[0m[0m australiaeast      = "EAU"
                                          [32m+[0m[0m australiasoutheast = "SEAU"
                                          [32m+[0m[0m brazilsouth        = "CQ"
                                          [32m+[0m[0m canadacentral      = "CCA"
                                          [32m+[0m[0m canadaeast         = "CCA"
                                          [32m+[0m[0m centralindia       = "CIN"
                                          [32m+[0m[0m centralus          = "CUS"
                                          [32m+[0m[0m eastasia           = "EA"
                                          [32m+[0m[0m eastus             = "EUS"
                                          [32m+[0m[0m eastus2            = "EUS2"
                                          [32m+[0m[0m eastus2euap        = "eus2p"
                                          [32m+[0m[0m francecentral      = "PAR"
                                          [32m+[0m[0m germanywestcentral = "DEWC"
                                          [32m+[0m[0m japaneast          = "EJP"
                                          [32m+[0m[0m jioindiawest       = "CIN"
                                          [32m+[0m[0m koreacentral       = "SE"
                                          [32m+[0m[0m koreasouth         = "SE"
                                          [32m+[0m[0m northcentralus     = "NCUS"
                                          [32m+[0m[0m northeurope        = "NEU"
                                          [32m+[0m[0m norwayeast         = "NOE"
                                          [32m+[0m[0m southafricanorth   = "JNB"
                                          [32m+[0m[0m southcentralus     = "SCUS"
                                          [32m+[0m[0m southeastasia      = "SEA"
                                          [32m+[0m[0m southindia         = "CIN"
                                          [32m+[0m[0m swedencentral      = "SEC"
                                          [32m+[0m[0m switzerlandnorth   = "CHN"
                                          [32m+[0m[0m switzerlandwest    = "CHW"
                                          [32m+[0m[0m uaenorth           = "DXB"
                                          [32m+[0m[0m uksouth            = "SUK"
                                          [32m+[0m[0m ukwest             = "WUK"
                                          [32m+[0m[0m westcentralus      = "WCUS"
                                          [32m+[0m[0m westeurope         = "WEU"
                                          [32m+[0m[0m westindia          = "CIN"
                                          [32m+[0m[0m westus             = "WUS"
                                          [32m+[0m[0m westus2            = "WUS2"
                                        }
                                      [32m+[0m[0m subscriptionId             = "[subscription().subscriptionId]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m name              = "MicrosoftDefenderForSQL-RulesAssociation"
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type              = "Microsoft.Insights/dataCollectionRuleAssociations"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/63d03cbd-47fd-4ee1-8a1c-9ddf07303de0.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure Arc-enabled SQL Servers to auto install Microsoft Defender for SQL and DCR with a user-defined LAW"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "63d03cbd-47fd-4ee1-8a1c-9ddf07303de0"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dcrId                                           = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Id of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Id"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrName                                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrResourceGroup                                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect                                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m defaultValue  = false
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the collection of SQL queries for security research."
                      [32m+[0m[0m displayName = "Enable collection of SQL queries for security research"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m userWorkspaceResourceId                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace Resource Id"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m workspaceRegion                                 = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace region"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.HybridCompute/machines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Windows"
                          [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/osName"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "true"
                          [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/mssqlDiscovered"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "eastus"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m dcrId                                           = {
                                      [32m+[0m[0m value = "[parameters('dcrId')]"
                                    }
                                  [32m+[0m[0m dcrName                                         = {
                                      [32m+[0m[0m value = "[parameters('dcrName')]"
                                    }
                                  [32m+[0m[0m dcrResourceGroup                                = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                    }
                                  [32m+[0m[0m resourceGroup                                   = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m userWorkspaceResourceId                         = {
                                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                    }
                                  [32m+[0m[0m vmName                                          = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m workspaceRegion                                 = {
                                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m dcrId                                           = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrName                                         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrResourceGroup                                = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                          [32m+[0m[0m type = "bool"
                                        }
                                      [32m+[0m[0m resourceGroup                                   = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m userWorkspaceResourceId                         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName                                          = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m workspaceRegion                                 = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2022-09-01"
                                          [32m+[0m[0m condition  = "[empty(parameters('dcrResourceGroup'))]"
                                          [32m+[0m[0m location   = "[variables('defaultRGLocation')]"
                                          [32m+[0m[0m name       = "[variables('defaultRGName')]"
                                          [32m+[0m[0m tags       = {
                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2022-09-01"
                                          [32m+[0m[0m condition     = "[empty(parameters('dcrId'))]"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[variables('defaultRGName')]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployDataCollectionRules')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m dcrId                                           = {
                                                      [32m+[0m[0m value = "[variables('dcrId')]"
                                                    }
                                                  [32m+[0m[0m dcrName                                         = {
                                                      [32m+[0m[0m value = "[variables('dcrName')]"
                                                    }
                                                  [32m+[0m[0m defaultRGLocation                               = {
                                                      [32m+[0m[0m value = "[variables('defaultRGLocation')]"
                                                    }
                                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                    }
                                                  [32m+[0m[0m workspaceResourceId                             = {
                                                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m dcrId                                           = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m dcrName                                         = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m defaultRGLocation                               = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                          [32m+[0m[0m type = "bool"
                                                        }
                                                      [32m+[0m[0m workspaceResourceId                             = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                                          [32m+[0m[0m location   = "[parameters('defaultRGLocation')]"
                                                          [32m+[0m[0m name       = "[parameters('dcrName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m dataFlows    = [
                                                                  [32m+[0m[0m {
                                                                      [32m+[0m[0m destinations = [
                                                                          [32m+[0m[0m "LogAnalyticsDest",
                                                                        ]
                                                                      [32m+[0m[0m streams      = [
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                        ]
                                                                    },
                                                                ]
                                                              [32m+[0m[0m dataSources  = {
                                                                  [32m+[0m[0m extensions = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m extensionName     = "MicrosoftDefenderForSQL"
                                                                          [32m+[0m[0m extensionSettings = {
                                                                              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                                            }
                                                                          [32m+[0m[0m name              = "MicrosoftDefenderForSQL"
                                                                          [32m+[0m[0m streams           = [
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                            ]
                                                                        },
                                                                    ]
                                                                }
                                                              [32m+[0m[0m description  = "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities."
                                                              [32m+[0m[0m destinations = {
                                                                  [32m+[0m[0m logAnalytics = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m name                = "LogAnalyticsDest"
                                                                          [32m+[0m[0m workspaceResourceId = "[parameters('workspaceResourceId')]"
                                                                        },
                                                                    ]
                                                                }
                                                            }
                                                          [32m+[0m[0m tags       = {
                                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Insights/dataCollectionRules"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[variables('defaultRGName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2022-09-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[variables('deployDataCollectionRules')]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployDataCollectionRulesAssociation')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m dcrId    = {
                                                      [32m+[0m[0m value = "[variables('dcrId')]"
                                                    }
                                                  [32m+[0m[0m dcraName = {
                                                      [32m+[0m[0m value = "[variables('dcraName')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m dcrId    = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m dcraName = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                                          [32m+[0m[0m name       = "[parameters('dcraName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m dataCollectionRuleId = "[parameters('dcrId')]"
                                                              [32m+[0m[0m description          = "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server."
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m dcrId                                = "[parameters('dcrId')]"
                                      [32m+[0m[0m dcrName                              = "[parameters('dcrName')]"
                                      [32m+[0m[0m dcraName                             = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                      [32m+[0m[0m defaultRGLocation                    = "[parameters('workspaceRegion')]"
                                      [32m+[0m[0m defaultRGName                        = "[parameters('resourceGroup')]"
                                      [32m+[0m[0m deployDataCollectionRules            = "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployDataCollectionRulesAssociation = "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m locationCode                         = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                      [32m+[0m[0m locationLongNameToShortMap           = {
                                          [32m+[0m[0m australiacentral   = "CAU"
                                          [32m+[0m[0m australiaeast      = "EAU"
                                          [32m+[0m[0m australiasoutheast = "SEAU"
                                          [32m+[0m[0m brazilsouth        = "CQ"
                                          [32m+[0m[0m canadacentral      = "CCA"
                                          [32m+[0m[0m canadaeast         = "CCA"
                                          [32m+[0m[0m centralindia       = "CIN"
                                          [32m+[0m[0m centralus          = "CUS"
                                          [32m+[0m[0m eastasia           = "EA"
                                          [32m+[0m[0m eastus             = "EUS"
                                          [32m+[0m[0m eastus2            = "EUS2"
                                          [32m+[0m[0m eastus2euap        = "eus2p"
                                          [32m+[0m[0m francecentral      = "PAR"
                                          [32m+[0m[0m germanywestcentral = "DEWC"
                                          [32m+[0m[0m japaneast          = "EJP"
                                          [32m+[0m[0m jioindiawest       = "CIN"
                                          [32m+[0m[0m koreacentral       = "SE"
                                          [32m+[0m[0m koreasouth         = "SE"
                                          [32m+[0m[0m northcentralus     = "NCUS"
                                          [32m+[0m[0m northeurope        = "NEU"
                                          [32m+[0m[0m norwayeast         = "NOE"
                                          [32m+[0m[0m southafricanorth   = "JNB"
                                          [32m+[0m[0m southcentralus     = "SCUS"
                                          [32m+[0m[0m southeastasia      = "SEA"
                                          [32m+[0m[0m southindia         = "CIN"
                                          [32m+[0m[0m swedencentral      = "SEC"
                                          [32m+[0m[0m switzerlandnorth   = "CHN"
                                          [32m+[0m[0m switzerlandwest    = "CHW"
                                          [32m+[0m[0m uaenorth           = "DXB"
                                          [32m+[0m[0m uksouth            = "SUK"
                                          [32m+[0m[0m ukwest             = "WUK"
                                          [32m+[0m[0m westcentralus      = "WCUS"
                                          [32m+[0m[0m westeurope         = "WEU"
                                          [32m+[0m[0m westindia          = "CIN"
                                          [32m+[0m[0m westus             = "WUS"
                                          [32m+[0m[0m westus2            = "WUS2"
                                        }
                                      [32m+[0m[0m subscriptionId                       = "[subscription().subscriptionId]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('workspaceRegion')]"
                                  [32m+[0m[0m field  = "location"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('dcrName')]"
                                  [32m+[0m[0m field  = "name"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "subscription"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/dataCollectionRules"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/f91991d1-5383-4c95-8ee5-5ac423dd8bb1.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure SQL Virtual Machines to automatically install Azure Monitor Agent"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "f91991d1-5383-4c95-8ee5-5ac423dd8bb1"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MDFC-SQL-AMA"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m identityResourceGroup    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name of the resource group created by the policy."
                      [32m+[0m[0m displayName = "Identity Resource Group"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m userAssignedIdentityName = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name of the user assigned managed identity."
                      [32m+[0m[0m displayName = "User Assigned Managed Identity Name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                          [32m+[0m[0m like  = "Windows*"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "microsoftsqlserver"
                          [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m identityResourceGroup       = {
                                      [32m+[0m[0m value = "[parameters('identityResourceGroup')]"
                                    }
                                  [32m+[0m[0m location                    = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m userAssignedIdentityName    = {
                                      [32m+[0m[0m value = "[parameters('userAssignedIdentityName')]"
                                    }
                                  [32m+[0m[0m userAssignedManagedIdentity = {
                                      [32m+[0m[0m value = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName')))]"
                                    }
                                  [32m+[0m[0m vmName                      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m identityResourceGroup       = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m userAssignedIdentityName    = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m userAssignedManagedIdentity = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName                      = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2023-03-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', variables('extensionName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m autoUpgradeMinorVersion = true
                                              [32m+[0m[0m enableAutomaticUpgrade  = true
                                              [32m+[0m[0m publisher               = "[variables('extensionPublisher')]"
                                              [32m+[0m[0m settings                = {
                                                  [32m+[0m[0m authentication = {
                                                      [32m+[0m[0m managedIdentity = {
                                                          [32m+[0m[0m identifier-name  = "mi_res_id"
                                                          [32m+[0m[0m identifier-value = "[parameters('userAssignedManagedIdentity')]"
                                                        }
                                                    }
                                                }
                                              [32m+[0m[0m type                    = "[variables('extensionType')]"
                                              [32m+[0m[0m typeHandlerVersion      = "[variables('extensionTypeHandlerVersion')]"
                                            }
                                          [32m+[0m[0m tags       = {
                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m extensionName               = "AzureMonitorWindowsAgent"
                                      [32m+[0m[0m extensionPublisher          = "Microsoft.Azure.Monitor"
                                      [32m+[0m[0m extensionType               = "AzureMonitorWindowsAgent"
                                      [32m+[0m[0m extensionTypeHandlerVersion = "1.2"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "AzureMonitorWindowsAgent"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Azure.Monitor"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/extensions/provisioningState"
                                  [32m+[0m[0m in    = [
                                      [32m+[0m[0m "Succeeded",
                                      [32m+[0m[0m "Provisioning succeeded",
                                    ]
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[concat(field('fullName'), '/AzureMonitorWindowsAgent')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/ddca0ddc-4e9d-4bbb-92a1-f7c4dd7ef7ce.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure SQL Virtual Machines to automatically install Microsoft Defender for SQL"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "ddca0ddc-4e9d-4bbb-92a1-f7c4dd7ef7ce"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MDFC-SQL-DefenderSQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dcrId            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Id of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Id"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrName          = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrResourceGroup = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m workspaceRegion  = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace region"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                          [32m+[0m[0m like  = "Windows*"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "microsoftsqlserver"
                          [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m dcrId            = {
                                      [32m+[0m[0m value = "[parameters('dcrId')]"
                                    }
                                  [32m+[0m[0m dcrName          = {
                                      [32m+[0m[0m value = "[parameters('dcrName')]"
                                    }
                                  [32m+[0m[0m dcrResourceGroup = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m location         = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m vmName           = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m workspaceRegion  = {
                                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m dcrId            = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrName          = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrResourceGroup = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m location         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName           = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m workspaceRegion  = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2023-03-01"
                                          [32m+[0m[0m dependsOn  = [
                                              [32m+[0m[0m "[extensionResourceId(concat('/subscriptions/', variables('subscriptionId'), '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/virtualMachines/', parameters('vmName')), 'Microsoft.Insights/dataCollectionRuleAssociations','MicrosoftDefenderForSQL-RulesAssociation')]",
                                            ]
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m autoUpgradeMinorVersion = true
                                              [32m+[0m[0m enableAutomaticUpgrade  = true
                                              [32m+[0m[0m publisher               = "Microsoft.Azure.AzureDefenderForSQL"
                                              [32m+[0m[0m type                    = "AdvancedThreatProtection.Windows"
                                              [32m+[0m[0m typeHandlerVersion      = "2.0"
                                            }
                                          [32m+[0m[0m tags       = {
                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                          [32m+[0m[0m name       = "[variables('dcraName')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m dataCollectionRuleId = "[variables('dcrId')]"
                                              [32m+[0m[0m description          = "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine."
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m actualLocation             = "[if(empty(parameters('workspaceRegion')), parameters('location'), parameters('workspaceRegion'))]"
                                      [32m+[0m[0m dcrId                      = "[parameters('dcrId')]"
                                      [32m+[0m[0m dcrName                    = "[parameters('dcrName')]"
                                      [32m+[0m[0m dcraName                   = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                      [32m+[0m[0m defaultRGName              = "[parameters('dcrResourceGroup')]"
                                      [32m+[0m[0m locationCode               = "[if(contains(variables('locationLongNameToShortMap'), variables('actualLocation')), variables('locationLongNameToShortMap')[variables('actualLocation')], variables('actualLocation'))]"
                                      [32m+[0m[0m locationLongNameToShortMap = {
                                          [32m+[0m[0m australiacentral   = "CAU"
                                          [32m+[0m[0m australiaeast      = "EAU"
                                          [32m+[0m[0m australiasoutheast = "SEAU"
                                          [32m+[0m[0m brazilsouth        = "CQ"
                                          [32m+[0m[0m canadacentral      = "CCA"
                                          [32m+[0m[0m canadaeast         = "CCA"
                                          [32m+[0m[0m centralindia       = "CIN"
                                          [32m+[0m[0m centralus          = "CUS"
                                          [32m+[0m[0m eastasia           = "EA"
                                          [32m+[0m[0m eastus             = "EUS"
                                          [32m+[0m[0m eastus2            = "EUS2"
                                          [32m+[0m[0m eastus2euap        = "eus2p"
                                          [32m+[0m[0m francecentral      = "PAR"
                                          [32m+[0m[0m germanywestcentral = "DEWC"
                                          [32m+[0m[0m japaneast          = "EJP"
                                          [32m+[0m[0m jioindiawest       = "CIN"
                                          [32m+[0m[0m koreacentral       = "SE"
                                          [32m+[0m[0m koreasouth         = "SE"
                                          [32m+[0m[0m northcentralus     = "NCUS"
                                          [32m+[0m[0m northeurope        = "NEU"
                                          [32m+[0m[0m norwayeast         = "NOE"
                                          [32m+[0m[0m southafricanorth   = "JNB"
                                          [32m+[0m[0m southcentralus     = "SCUS"
                                          [32m+[0m[0m southeastasia      = "SEA"
                                          [32m+[0m[0m southindia         = "CIN"
                                          [32m+[0m[0m swedencentral      = "SEC"
                                          [32m+[0m[0m switzerlandnorth   = "CHN"
                                          [32m+[0m[0m switzerlandwest    = "CHW"
                                          [32m+[0m[0m uaenorth           = "DXB"
                                          [32m+[0m[0m uksouth            = "SUK"
                                          [32m+[0m[0m ukwest             = "WUK"
                                          [32m+[0m[0m westcentralus      = "WCUS"
                                          [32m+[0m[0m westeurope         = "WEU"
                                          [32m+[0m[0m westindia          = "CIN"
                                          [32m+[0m[0m westus             = "WUS"
                                          [32m+[0m[0m westus2            = "WUS2"
                                        }
                                      [32m+[0m[0m subscriptionId             = "[subscription().subscriptionId]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "AdvancedThreatProtection.Windows"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Azure.AzureDefenderForSQL"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/extensions/provisioningState"
                                  [32m+[0m[0m in    = [
                                      [32m+[0m[0m "Succeeded",
                                      [32m+[0m[0m "Provisioning succeeded",
                                    ]
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[concat(field('fullName'), '/MicrosoftDefenderForSQL')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/04754ef9-9ae3-4477-bf17-86ef50026304.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure SQL Virtual Machines to auto install Microsoft Defender for SQL and DCR with a user-defined LAW"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "04754ef9-9ae3-4477-bf17-86ef50026304"
              [32m+[0m[0m version              = "1.0.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MDFC-SQL-DefenderSQL-DCR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dcrId                                           = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Id of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Id"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrName                                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrResourceGroup                                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect                                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m defaultValue  = false
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the collection of SQL queries for security research."
                      [32m+[0m[0m displayName = "Enable collection of SQL queries for security research"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m userWorkspaceResourceId                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace Resource Id"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m workspaceRegion                                 = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace region"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                          [32m+[0m[0m like  = "Windows*"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "microsoftsqlserver"
                          [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "eastus"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m dcrId                                           = {
                                      [32m+[0m[0m value = "[parameters('dcrId')]"
                                    }
                                  [32m+[0m[0m dcrName                                         = {
                                      [32m+[0m[0m value = "[parameters('dcrName')]"
                                    }
                                  [32m+[0m[0m dcrResourceGroup                                = {
                                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                    }
                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                    }
                                  [32m+[0m[0m location                                        = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m resourceGroup                                   = {
                                      [32m+[0m[0m value = "[resourceGroup().name]"
                                    }
                                  [32m+[0m[0m userWorkspaceResourceId                         = {
                                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                    }
                                  [32m+[0m[0m vmName                                          = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m workspaceRegion                                 = {
                                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m dcrId                                           = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrName                                         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m dcrResourceGroup                                = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                          [32m+[0m[0m type = "bool"
                                        }
                                      [32m+[0m[0m location                                        = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m resourceGroup                                   = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m userWorkspaceResourceId                         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName                                          = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m workspaceRegion                                 = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2022-09-01"
                                          [32m+[0m[0m condition  = "[empty(parameters('dcrResourceGroup'))]"
                                          [32m+[0m[0m location   = "[variables('defaultRGLocation')]"
                                          [32m+[0m[0m name       = "[variables('defaultRGName')]"
                                          [32m+[0m[0m tags       = {
                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2022-09-01"
                                          [32m+[0m[0m name          = "[variables('deployDefenderForSQL')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m location = {
                                                      [32m+[0m[0m value = "[parameters('location')]"
                                                    }
                                                  [32m+[0m[0m vmName   = {
                                                      [32m+[0m[0m value = "[parameters('vmName')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m vmName   = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2023-03-01"
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m autoUpgradeMinorVersion = true
                                                              [32m+[0m[0m enableAutomaticUpgrade  = true
                                                              [32m+[0m[0m publisher               = "Microsoft.Azure.AzureDefenderForSQL"
                                                              [32m+[0m[0m type                    = "AdvancedThreatProtection.Windows"
                                                              [32m+[0m[0m typeHandlerVersion      = "2.0"
                                                            }
                                                          [32m+[0m[0m tags       = {
                                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2022-09-01"
                                          [32m+[0m[0m condition     = "[empty(parameters('dcrId'))]"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[variables('defaultRGName')]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployDataCollectionRules')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m dcrId                                           = {
                                                      [32m+[0m[0m value = "[variables('dcrId')]"
                                                    }
                                                  [32m+[0m[0m dcrName                                         = {
                                                      [32m+[0m[0m value = "[variables('dcrName')]"
                                                    }
                                                  [32m+[0m[0m defaultRGLocation                               = {
                                                      [32m+[0m[0m value = "[variables('defaultRGLocation')]"
                                                    }
                                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                    }
                                                  [32m+[0m[0m workspaceResourceId                             = {
                                                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m dcrId                                           = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m dcrName                                         = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m defaultRGLocation                               = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                          [32m+[0m[0m type = "bool"
                                                        }
                                                      [32m+[0m[0m workspaceResourceId                             = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                                          [32m+[0m[0m location   = "[parameters('defaultRGLocation')]"
                                                          [32m+[0m[0m name       = "[parameters('dcrName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m dataFlows    = [
                                                                  [32m+[0m[0m {
                                                                      [32m+[0m[0m destinations = [
                                                                          [32m+[0m[0m "LogAnalyticsDest",
                                                                        ]
                                                                      [32m+[0m[0m streams      = [
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                          [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                        ]
                                                                    },
                                                                ]
                                                              [32m+[0m[0m dataSources  = {
                                                                  [32m+[0m[0m extensions = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m extensionName     = "MicrosoftDefenderForSQL"
                                                                          [32m+[0m[0m extensionSettings = {
                                                                              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                                            }
                                                                          [32m+[0m[0m name              = "MicrosoftDefenderForSQL"
                                                                          [32m+[0m[0m streams           = [
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                            ]
                                                                        },
                                                                    ]
                                                                }
                                                              [32m+[0m[0m description  = "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities."
                                                              [32m+[0m[0m destinations = {
                                                                  [32m+[0m[0m logAnalytics = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m name                = "LogAnalyticsDest"
                                                                          [32m+[0m[0m workspaceResourceId = "[parameters('workspaceResourceId')]"
                                                                        },
                                                                    ]
                                                                }
                                                            }
                                                          [32m+[0m[0m tags       = {
                                                              [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Insights/dataCollectionRules"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[variables('defaultRGName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2022-09-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[variables('deployDataCollectionRules')]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployDataCollectionRulesAssociation')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m dcrId    = {
                                                      [32m+[0m[0m value = "[variables('dcrId')]"
                                                    }
                                                  [32m+[0m[0m dcraName = {
                                                      [32m+[0m[0m value = "[variables('dcraName')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m dcrId    = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m dcraName = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                                          [32m+[0m[0m name       = "[parameters('dcraName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m dataCollectionRuleId = "[parameters('dcrId')]"
                                                              [32m+[0m[0m description          = "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine."
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m dcrId                                = "[parameters('dcrId')]"
                                      [32m+[0m[0m dcrName                              = "[parameters('dcrName')]"
                                      [32m+[0m[0m dcraName                             = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                      [32m+[0m[0m defaultRGLocation                    = "[parameters('workspaceRegion')]"
                                      [32m+[0m[0m defaultRGName                        = "[parameters('dcrResourceGroup')]"
                                      [32m+[0m[0m deployDataCollectionRules            = "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployDataCollectionRulesAssociation = "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployDefenderForSQL                 = "[concat('deployDefenderForSQL-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m locationCode                         = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                      [32m+[0m[0m locationLongNameToShortMap           = {
                                          [32m+[0m[0m australiacentral   = "CAU"
                                          [32m+[0m[0m australiaeast      = "EAU"
                                          [32m+[0m[0m australiasoutheast = "SEAU"
                                          [32m+[0m[0m brazilsouth        = "CQ"
                                          [32m+[0m[0m canadacentral      = "CCA"
                                          [32m+[0m[0m canadaeast         = "CCA"
                                          [32m+[0m[0m centralindia       = "CIN"
                                          [32m+[0m[0m centralus          = "CUS"
                                          [32m+[0m[0m eastasia           = "EA"
                                          [32m+[0m[0m eastus             = "EUS"
                                          [32m+[0m[0m eastus2            = "EUS2"
                                          [32m+[0m[0m eastus2euap        = "eus2p"
                                          [32m+[0m[0m francecentral      = "PAR"
                                          [32m+[0m[0m germanywestcentral = "DEWC"
                                          [32m+[0m[0m japaneast          = "EJP"
                                          [32m+[0m[0m jioindiawest       = "CIN"
                                          [32m+[0m[0m koreacentral       = "SE"
                                          [32m+[0m[0m koreasouth         = "SE"
                                          [32m+[0m[0m northcentralus     = "NCUS"
                                          [32m+[0m[0m northeurope        = "NEU"
                                          [32m+[0m[0m norwayeast         = "NOE"
                                          [32m+[0m[0m southafricanorth   = "JNB"
                                          [32m+[0m[0m southcentralus     = "SCUS"
                                          [32m+[0m[0m southeastasia      = "SEA"
                                          [32m+[0m[0m southindia         = "CIN"
                                          [32m+[0m[0m swedencentral      = "SEC"
                                          [32m+[0m[0m switzerlandnorth   = "CHN"
                                          [32m+[0m[0m switzerlandwest    = "CHW"
                                          [32m+[0m[0m uaenorth           = "DXB"
                                          [32m+[0m[0m uksouth            = "SUK"
                                          [32m+[0m[0m ukwest             = "WUK"
                                          [32m+[0m[0m westcentralus      = "WCUS"
                                          [32m+[0m[0m westeurope         = "WEU"
                                          [32m+[0m[0m westindia          = "CIN"
                                          [32m+[0m[0m westus             = "WUS"
                                          [32m+[0m[0m westus2            = "WUS2"
                                        }
                                      [32m+[0m[0m subscriptionId                       = "[subscription().subscriptionId]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('workspaceRegion')]"
                                  [32m+[0m[0m field  = "location"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('dcrName')]"
                                  [32m+[0m[0m field  = "name"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "subscription"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Insights/dataCollectionRules"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "Azure Database for MySQL server deploy a specific min TLS version and enforce SSL."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-MySQL-sslEnforcement"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Database for MySQL server"
                      [32m+[0m[0m displayName = "Effect minimum TLS version Azure Database for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                  [32m+[0m[0m notEquals = "Enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                  [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m minimalTlsVersion = {
                                      [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                    }
                                  [32m+[0m[0m resourceName      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-12-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                              [32m+[0m[0m sslEnforcement    = "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforMySQL/servers"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Enabled"
                                  [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                  [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.DBforMySQL/servers"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to a storageaccountid with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html"
      [32m+[0m[0m display_name        = "[Deprecated] Deploys NSG flow logs and traffic analytics"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "e920df7f-9a64-4066-9b58-52684c02a091"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Nsg-FlowLogs"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m flowAnalyticsEnabled     = {
                  [32m+[0m[0m defaultValue = false
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m displayName = "Enable Traffic Analytics"
                    }
                  [32m+[0m[0m type         = "Boolean"
                }
              [32m+[0m[0m logAnalytics             = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Resource ID of Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m retention                = {
                  [32m+[0m[0m defaultValue = 5
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m displayName = "Retention"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m storageAccountResourceId = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "Storage Account Resource Id"
                      [32m+[0m[0m strongType  = "Microsoft.Storage/storageAccounts"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m trafficAnalyticsInterval = {
                  [32m+[0m[0m defaultValue = 60
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m displayName = "Traffic Analytics processing interval mins (10/60)"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m flowAnalyticsEnabled     = {
                                      [32m+[0m[0m value = "[parameters('flowAnalyticsEnabled')]"
                                    }
                                  [32m+[0m[0m location                 = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m logAnalytics             = {
                                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                    }
                                  [32m+[0m[0m networkSecurityGroupName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m resourceGroupName        = {
                                      [32m+[0m[0m value = "[resourceGroup().name]"
                                    }
                                  [32m+[0m[0m retention                = {
                                      [32m+[0m[0m value = "[parameters('retention')]"
                                    }
                                  [32m+[0m[0m storageAccountResourceId = {
                                      [32m+[0m[0m value = "[parameters('storageAccountResourceId')]"
                                    }
                                  [32m+[0m[0m trafficAnalyticsInterval = {
                                      [32m+[0m[0m value = "[parameters('trafficAnalyticsInterval')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m flowAnalyticsEnabled     = {
                                          [32m+[0m[0m type = "bool"
                                        }
                                      [32m+[0m[0m location                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m logAnalytics             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m networkSecurityGroupName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceGroupName        = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m retention                = {
                                          [32m+[0m[0m type = "int"
                                        }
                                      [32m+[0m[0m storageAccountResourceId = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m trafficAnalyticsInterval = {
                                          [32m+[0m[0m type = "int"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2020-05-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[take(concat('NetworkWatcher_', toLower(parameters('location')),  '/', parameters('networkSecurityGroupName'), '-', parameters('resourceGroupName'), '-flowlog' ), 80)]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m enabled                    = true
                                              [32m+[0m[0m flowAnalyticsConfiguration = {
                                                  [32m+[0m[0m networkWatcherFlowAnalyticsConfiguration = {
                                                      [32m+[0m[0m enabled                  = "[bool(parameters('flowAnalyticsEnabled'))]"
                                                      [32m+[0m[0m trafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                      [32m+[0m[0m workspaceId              = "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').properties.customerId, json('null')) ]"
                                                      [32m+[0m[0m workspaceRegion          = "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').location, json('null')) ]"
                                                      [32m+[0m[0m workspaceResourceId      = "[if(not(empty(parameters('logAnalytics'))), parameters('logAnalytics'), json('null'))]"
                                                    }
                                                }
                                              [32m+[0m[0m format                     = {
                                                  [32m+[0m[0m type    = "JSON"
                                                  [32m+[0m[0m version = 2
                                                }
                                              [32m+[0m[0m retentionPolicy            = {
                                                  [32m+[0m[0m days    = "[parameters('retention')]"
                                                  [32m+[0m[0m enabled = true
                                                }
                                              [32m+[0m[0m storageId                  = "[parameters('storageAccountResourceId')]"
                                              [32m+[0m[0m targetResourceId           = "[resourceId(parameters('resourceGroupName'), 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/networkWatchers/flowLogs"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('flowAnalyticsEnabled')]"
                                  [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled"
                                },
                            ]
                        }
                      [32m+[0m[0m resourceGroupName  = "NetworkWatcherRG"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Network/networkWatchers/flowLogs"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs-to-LA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to Log Analytics with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html"
      [32m+[0m[0m display_name        = "[Deprecated] Deploys NSG flow logs and traffic analytics to Log Analytics"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "e920df7f-9a64-4066-9b58-52684c02a091"
              [32m+[0m[0m version              = "1.1.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Nsg-FlowLogs-to-LA"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m interval  = {
                  [32m+[0m[0m defaultValue = 60
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m displayName = "Traffic Analytics processing interval mins (10/60)"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m retention = {
                  [32m+[0m[0m defaultValue = 5
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m displayName = "Retention"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m workspace = {
                  [32m+[0m[0m defaultValue = "<workspace resource ID>"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Resource ID of Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m interval             = {
                                      [32m+[0m[0m value = "[parameters('interval')]"
                                    }
                                  [32m+[0m[0m location             = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m networkSecurityGroup = {
                                      [32m+[0m[0m value = "[field('id')]"
                                    }
                                  [32m+[0m[0m retention            = {
                                      [32m+[0m[0m value = "[parameters('retention')]"
                                    }
                                  [32m+[0m[0m workspace            = {
                                      [32m+[0m[0m value = "[parameters('workspace')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m interval             = {
                                          [32m+[0m[0m type = "int"
                                        }
                                      [32m+[0m[0m location             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m networkSecurityGroup = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m retention            = {
                                          [32m+[0m[0m type = "int"
                                        }
                                      [32m+[0m[0m time                 = {
                                          [32m+[0m[0m defaultValue = "[utcNow()]"
                                          [32m+[0m[0m type         = "String"
                                        }
                                      [32m+[0m[0m workspace            = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2019-10-01"
                                          [32m+[0m[0m name          = "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2019-06-01"
                                                          [32m+[0m[0m kind       = "StorageV2"
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[variables('storageAccountName')]"
                                                          [32m+[0m[0m properties = {}
                                                          [32m+[0m[0m sku        = {
                                                              [32m+[0m[0m name = "Standard_LRS"
                                                              [32m+[0m[0m tier = "Standard"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Storage/storageAccounts"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[variables('resourceGroupName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2019-10-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]",
                                            ]
                                          [32m+[0m[0m name          = "[concat('NetworkWatcherRG', '.', variables('securityGroupName'))]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2020-05-01"
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[concat('NetworkWatcher_', toLower(parameters('location')))]"
                                                          [32m+[0m[0m properties = {}
                                                          [32m+[0m[0m resources  = [
                                                              [32m+[0m[0m {
                                                                  [32m+[0m[0m apiVersion = "2019-11-01"
                                                                  [32m+[0m[0m dependsOn  = [
                                                                      [32m+[0m[0m "[concat('NetworkWatcher_', toLower(parameters('location')))]",
                                                                    ]
                                                                  [32m+[0m[0m location   = "[parameters('location')]"
                                                                  [32m+[0m[0m name       = "[concat(variables('securityGroupName'), '-Network-flowlog')]"
                                                                  [32m+[0m[0m properties = {
                                                                      [32m+[0m[0m enabled                    = true
                                                                      [32m+[0m[0m flowAnalyticsConfiguration = {
                                                                          [32m+[0m[0m networkWatcherFlowAnalyticsConfiguration = {
                                                                              [32m+[0m[0m enabled                  = true
                                                                              [32m+[0m[0m trafficAnalyticsInterval = "[parameters('interval')]"
                                                                              [32m+[0m[0m workspaceResourceId      = "[parameters('workspace')]"
                                                                            }
                                                                        }
                                                                      [32m+[0m[0m format                     = {
                                                                          [32m+[0m[0m type    = "JSON"
                                                                          [32m+[0m[0m version = 2
                                                                        }
                                                                      [32m+[0m[0m retentionPolicy            = {
                                                                          [32m+[0m[0m days    = "[parameters('retention')]"
                                                                          [32m+[0m[0m enabled = true
                                                                        }
                                                                      [32m+[0m[0m storageId                  = "[concat(subscription().id, '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
                                                                      [32m+[0m[0m targetResourceId           = "[parameters('networkSecurityGroup')]"
                                                                    }
                                                                  [32m+[0m[0m type       = "flowLogs"
                                                                },
                                                            ]
                                                          [32m+[0m[0m type       = "Microsoft.Network/networkWatchers"
                                                        },
                                                    ]
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "NetworkWatcherRG"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m resourceGroupName  = "[split(parameters('networkSecurityGroup'), '/')[4]]"
                                      [32m+[0m[0m securityGroupName  = "[split(parameters('networkSecurityGroup'), '/')[8]]"
                                      [32m+[0m[0m storageAccountName = "[concat('es', uniqueString(variables('securityGroupName'), parameters('time')))]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/enabled"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "resourceGroup"
                      [32m+[0m[0m name               = "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id'))), 'null/null', concat(split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[8], '/', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[10]))]"
                      [32m+[0m[0m resourceGroupName  = "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), 'NetworkWatcherRG', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[4])]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Network/networkWatchers/flowlogs"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "Azure Database for PostgreSQL server deploy a specific min TLS version requirement and enforce SSL "
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-PostgreSQL-sslEnforcement"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Database for PostgreSQL server"
                      [32m+[0m[0m displayName = "Effect Azure Database for PostgreSQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version Azure Database for PostgreSQL server to enforce"
                      [32m+[0m[0m displayName = "Select version for PostgreSQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                  [32m+[0m[0m notEquals = "Enabled"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                  [32m+[0m[0m notEquals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m minimalTlsVersion = {
                                      [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                    }
                                  [32m+[0m[0m resourceName      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-12-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                              [32m+[0m[0m sslEnforcement    = "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/servers"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Enabled"
                                  [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                  [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "current"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.DBforPostgreSQL/servers"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Private-DNS-Generic"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Configure private DNS zone group to override the DNS resolution for PaaS services private endpoint. See https://aka.ms/pepdnszones for information on values to provide to parameters in this policy."
      [32m+[0m[0m display_name        = "Deploy-Private-DNS-Generic"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Networking"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-Private-DNS-Generic"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m evaluationDelay  = {
                  [32m+[0m[0m defaultValue = "PT10M"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The delay in evaluation of the policy. Review delay options at https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effect-deploy-if-not-exists"
                      [32m+[0m[0m displayName = "Evaluation Delay"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m groupId          = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The group ID of the PaaS private endpoint. Also referred to as subresource."
                      [32m+[0m[0m displayName = "PaaS Private endpoint group ID (subresource)"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m privateDnsZoneId = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m assignPermissions = true
                      [32m+[0m[0m description       = "The private DNS zone name required for specific Paas Services to resolve a private DNS Zone."
                      [32m+[0m[0m displayName       = "Private DNS Zone ID for Paas services"
                      [32m+[0m[0m strongType        = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m resourceType     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The PaaS endpoint resource type."
                      [32m+[0m[0m displayName = "PaaS private endpoint resource type"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/privateEndpoints"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count           = {
                              [32m+[0m[0m field = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*]"
                              [32m+[0m[0m where = {
                                  [32m+[0m[0m allOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m contains = "[parameters('resourceType')]"
                                          [32m+[0m[0m field    = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "[parameters('groupId')]"
                                          [32m+[0m[0m field  = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]"
                                        },
                                    ]
                                }
                            }
                          [32m+[0m[0m greaterOrEquals = 1
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment        = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location            = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m privateDnsZoneId    = {
                                      [32m+[0m[0m value = "[parameters('privateDnsZoneId')]"
                                    }
                                  [32m+[0m[0m privateEndpointName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location            = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m privateDnsZoneId    = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m privateEndpointName = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2020-03-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('privateEndpointName'), '/deployedByPolicy')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m privateDnsZoneConfigs = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m name       = "PaaS-Service-Private-DNS-Zone-Config"
                                                      [32m+[0m[0m properties = {
                                                          [32m+[0m[0m privateDnsZoneId = "[parameters('privateDnsZoneId')]"
                                                        }
                                                    },
                                                ]
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                        },
                                    ]
                                }
                            }
                        }
                      [32m+[0m[0m evaluationDelay   = "[parameters('evaluationDelay')]"
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      [32m+[0m[0m type              = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "SQL servers deploys a specific min TLS version requirement."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-SQL-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version SQL servers"
                      [32m+[0m[0m displayName = "Effect SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                      [32m+[0m[0m displayName = "Select version for SQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Sql/servers"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Sql/servers/minimalTlsVersion"
                          [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m minimalTlsVersion = {
                                      [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                    }
                                  [32m+[0m[0m resourceName      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2019-06-01-preview"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/minimalTlsVersion"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "current"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy auditing settings to SQL Database when it not exist in the deployment"
      [32m+[0m[0m display_name        = "Deploy SQL database auditing settings"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Sql-AuditingSettings"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location              = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m sqlServerDataBaseName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m sqlServerName         = {
                                      [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                          [32m+[0m[0m name       = "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m auditActionsAndGroups       = [
                                                  [32m+[0m[0m "BATCH_COMPLETED_GROUP",
                                                  [32m+[0m[0m "DATABASE_OBJECT_CHANGE_GROUP",
                                                  [32m+[0m[0m "SCHEMA_OBJECT_CHANGE_GROUP",
                                                  [32m+[0m[0m "BACKUP_RESTORE_GROUP",
                                                  [32m+[0m[0m "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
                                                  [32m+[0m[0m "DATABASE_PRINCIPAL_CHANGE_GROUP",
                                                  [32m+[0m[0m "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
                                                  [32m+[0m[0m "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
                                                  [32m+[0m[0m "USER_CHANGE_PASSWORD_GROUP",
                                                  [32m+[0m[0m "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
                                                  [32m+[0m[0m "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
                                                  [32m+[0m[0m "DATABASE_PERMISSION_CHANGE_GROUP",
                                                  [32m+[0m[0m "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
                                                  [32m+[0m[0m "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                                                  [32m+[0m[0m "FAILED_DATABASE_AUTHENTICATION_GROUP",
                                                ]
                                              [32m+[0m[0m isAzureMonitorTargetEnabled = true
                                              [32m+[0m[0m state                       = "enabled"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/auditingSettings"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "enabled"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/auditingSettings/state"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/auditingSettings/isAzureMonitorTargetEnabled"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "default"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/auditingSettings"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
      [32m+[0m[0m display_name        = "Deploy SQL Database security Alert Policies configuration with email admin accounts"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.1"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Sql-SecurityAlertPolicies"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m emailAddresses = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "admin@contoso.com",
                      [32m+[0m[0m "admin@fabrikam.com",
                    ]
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m emailAddresses        = {
                                      [32m+[0m[0m value = "[parameters('emailAddresses')]"
                                    }
                                  [32m+[0m[0m location              = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m sqlServerDataBaseName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m sqlServerName         = {
                                      [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m emailAddresses        = {
                                          [32m+[0m[0m type = "Array"
                                        }
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2018-06-01-preview"
                                          [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m disabledAlerts          = [
                                                  [32m+[0m[0m "",
                                                ]
                                              [32m+[0m[0m emailAccountAdmins      = true
                                              [32m+[0m[0m emailAddresses          = "[parameters('emailAddresses')]"
                                              [32m+[0m[0m retentionDays           = 0
                                              [32m+[0m[0m state                   = "Enabled"
                                              [32m+[0m[0m storageAccountAccessKey = ""
                                              [32m+[0m[0m storageEndpoint         = [90mnull[0m[0m
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Enabled"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/securityAlertPolicies/state"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-Tde"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy the Transparent Data Encryption when it is not enabled in the deployment. Please use this policy instead https://www.azadvertizer.net/azpolicyadvertizer/86a912f6-9a06-4e26-b447-11b16ba8659f.html"
      [32m+[0m[0m display_name        = "[Deprecated] Deploy SQL Database Transparent Data Encryption"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "86a912f6-9a06-4e26-b447-11b16ba8659f"
              [32m+[0m[0m version              = "1.1.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Sql-Tde"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m excludedDatabases = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "master",
                      [32m+[0m[0m "model",
                      [32m+[0m[0m "tempdb",
                      [32m+[0m[0m "msdb",
                      [32m+[0m[0m "resource",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Array of databases that are excluded from this policy"
                      [32m+[0m[0m displayName = "Excluded Databases"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "name"
                          [32m+[0m[0m notIn = "[parameters('excludedDatabases')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location              = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m sqlServerDataBaseName = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m sqlServerName         = {
                                      [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2014-04-01"
                                          [32m+[0m[0m name       = "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/current')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m status = "Enabled"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/transparentDataEncryption"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Enabled"
                                  [32m+[0m[0m field  = "Microsoft.Sql/transparentDataEncryption.status"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/transparentDataEncryption"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deploy-Sql-vulnerabilityAssessments_20230706.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy SQL Database vulnerability Assessments"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "Deploy-Sql-vulnerabilityAssessments_20230706"
              [32m+[0m[0m version              = "1.0.1-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Sql-vulnerabilityAssessments"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'"
                      [32m+[0m[0m displayName = "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The storage account ID to store assessments"
                      [32m+[0m[0m displayName = "The storage account ID to store assessments"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location                          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m sqlServerDataBaseName             = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m sqlServerName                     = {
                                      [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                    }
                                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                                    }
                                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location                          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerName                     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                          [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m recurringScans          = {
                                                  [32m+[0m[0m emailSubscriptionAdmins = false
                                                  [32m+[0m[0m emails                  = [
                                                      [32m+[0m[0m "[parameters('vulnerabilityAssessmentsEmail')]",
                                                    ]
                                                  [32m+[0m[0m isEnabled               = true
                                                }
                                              [32m+[0m[0m storageAccountAccessKey = "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                                              [32m+[0m[0m storageContainerPath    = "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('vulnerabilityAssessmentsEmail')]"
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments_20230706"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy SQL Database Vulnerability Assessments when it does not exist in the deployment, and save results to the storage account specified in the parameters."
      [32m+[0m[0m display_name        = "Deploy SQL Database Vulnerability Assessments"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m replacesPolicy       = "Deploy-Sql-vulnerabilityAssessments"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Sql-vulnerabilityAssessments_20230706"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The email address(es) to send alerts."
                      [32m+[0m[0m displayName = "The email address(es) to send alerts."
                    }
                  [32m+[0m[0m type     = "Array"
                }
              [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The storage account ID to store assessments"
                      [32m+[0m[0m displayName = "The storage account ID to store assessments"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location                          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m sqlServerDataBaseName             = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m sqlServerName                     = {
                                      [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                    }
                                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                                    }
                                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location                          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m sqlServerName                     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                          [32m+[0m[0m type = "Array"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                          [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m recurringScans          = {
                                                  [32m+[0m[0m emailSubscriptionAdmins = false
                                                  [32m+[0m[0m emails                  = "[parameters('vulnerabilityAssessmentsEmail')]"
                                                  [32m+[0m[0m isEnabled               = true
                                                }
                                              [32m+[0m[0m storageAccountAccessKey = "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                                              [32m+[0m[0m storageContainerPath    = "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m count   = {
                                      [32m+[0m[0m field = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*]"
                                      [32m+[0m[0m where = {
                                          [32m+[0m[0m notIn = "[parameters('vulnerabilityAssessmentsEmail')]"
                                          [32m+[0m[0m value = "current(Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*])"
                                        }
                                    }
                                  [32m+[0m[0m greater = 0
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = true
                                  [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy a specific min TLS version requirement and enforce SSL on SQL managed instances. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      [32m+[0m[0m display_name        = "SQL managed instances deploy a specific min TLS version requirement."
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-SqlMi-minTLS"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version SQL servers"
                      [32m+[0m[0m displayName = "Effect SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimalTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.1",
                      [32m+[0m[0m "1.0",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                      [32m+[0m[0m displayName = "Select version for SQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field     = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                          [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m minimalTlsVersion = {
                                      [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                    }
                                  [32m+[0m[0m resourceName      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2020-02-02-preview"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Sql/managedInstances"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m evaluationDelay    = "AfterProvisioningSuccess"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                  [32m+[0m[0m field  = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "current"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Sql/managedInstances"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy a specific min TLS version requirement and enforce SSL on Azure Storage. Enables secure server to client by enforce minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your Azure Storage."
      [32m+[0m[0m display_name        = "Azure Storage deploy a specific min TLS version requirement and enforce SSL/HTTPS "
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.2.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Storage-sslEnforcement"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure STorage"
                      [32m+[0m[0m displayName = "Effect Azure Storage"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m minimumTlsVersion = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLS1_0",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version minimum TLS version Azure STorage to enforce"
                      [32m+[0m[0m displayName = "Select TLS version for Azure Storage server"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                  [32m+[0m[0m notEquals = "true"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                  [32m+[0m[0m notEquals = "[parameters('minimumTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m location          = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m minimumTlsVersion = {
                                      [32m+[0m[0m value = "[parameters('minimumTlsVersion')]"
                                    }
                                  [32m+[0m[0m resourceName      = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m minimumTlsVersion = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2019-06-01"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m minimumTlsVersion        = "[parameters('minimumTlsVersion')]"
                                              [32m+[0m[0m supportsHttpsTrafficOnly = true
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Storage/storageAccounts"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "true"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('minimumTlsVersion')]"
                                  [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "current"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Storage/storageAccounts"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-UserAssignedManagedIdentity-VMInsights"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Policy is deprecated as it's no longer required. User-Assigned Management Identity is now centralized and deployed by Azure Landing Zones to the Management Subscription."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy User Assigned Managed Identity for VM Insights"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Managed Identity"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-UserAssignedManagedIdentity-VMInsights"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable this to use your pre-created user-assigned managed identity. The pre-created identity MUST exist within the subscription otherwise the policy deployment will fail. If enabled, ensure that the User-Assigned Identity Name and Identity Resource Group Name parameters match the pre-created identity. If not enabled, the policy will create per subscription, per resource user-assigned managed identities in a new resource group named 'Built-In-Identity-RG'."
                      [32m+[0m[0m displayName = "Bring Your Own User-Assigned Identity"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                  [32m+[0m[0m defaultValue = "eastus"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The location of the resource group 'Built-In-Identity-RG' created by the policy. This parameter is only used when 'Bring Your Own User Assigned Identity' parameter is false."
                      [32m+[0m[0m displayName = "Built-In-Identity-RG Location"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m effect                                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match."
                      [32m+[0m[0m displayName = "Policy Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m identityResourceGroup                   = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The resource group in which the pre-created user-assigned managed identity resides."
                      [32m+[0m[0m displayName = "User-Assigned Managed Identity Resource Group Name"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m userAssignedIdentityName                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name of the pre-created user-assigned managed identity."
                      [32m+[0m[0m displayName = "User-Assigned Managed Identity Name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m greaterOrEquals = "2018-10-01"
                          [32m+[0m[0m value           = "[requestContext().apiVersion]"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "eastus"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                                      [32m+[0m[0m value = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                                    }
                                  [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                                      [32m+[0m[0m value = "[parameters('builtInIdentityResourceGroupLocation')]"
                                    }
                                  [32m+[0m[0m identityResourceGroup                   = {
                                      [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('identityResourceGroup'), 'Built-In-Identity-RG')]"
                                    }
                                  [32m+[0m[0m location                                = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m resourceId                              = {
                                      [32m+[0m[0m value = "[field('id')]"
                                    }
                                  [32m+[0m[0m uaName                                  = {
                                      [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('userAssignedIdentityName'), 'Built-In-Identity')]"
                                    }
                                  [32m+[0m[0m vmName                                  = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                  [32m+[0m[0m vmResourceGroup                         = {
                                      [32m+[0m[0m value = "[resourceGroup().name]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.1"
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                                          [32m+[0m[0m type = "bool"
                                        }
                                      [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m identityResourceGroup                   = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m location                                = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m resourceId                              = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m uaName                                  = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmName                                  = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m vmResourceGroup                         = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2020-06-01"
                                          [32m+[0m[0m location   = "[parameters('builtInIdentityResourceGroupLocation')]"
                                          [32m+[0m[0m name       = "[parameters('identityResourceGroup')]"
                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2020-06-01"
                                          [32m+[0m[0m condition     = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployUALockName')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m location = {
                                                      [32m+[0m[0m value = "[parameters('location')]"
                                                    }
                                                  [32m+[0m[0m uaName   = {
                                                      [32m+[0m[0m value = "[parameters('uaName')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m uaName   = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2018-11-30"
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[parameters('uaName')]"
                                                          [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('identityResourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2020-06-01"
                                          [32m+[0m[0m condition     = "[not(parameters('bringYourOwnUserAssignedManagedIdentity'))]"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                            ]
                                          [32m+[0m[0m name          = "[variables('deployUAName')]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m location = {
                                                      [32m+[0m[0m value = "[parameters('location')]"
                                                    }
                                                  [32m+[0m[0m uaName   = {
                                                      [32m+[0m[0m value = "[variables('uaNameWithLocation')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m uaName   = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2018-11-30"
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[parameters('uaName')]"
                                                          [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2016-09-01"
                                                          [32m+[0m[0m dependsOn  = [
                                                              [32m+[0m[0m "[parameters('uaName')]",
                                                            ]
                                                          [32m+[0m[0m name       = "[concat(parameters('uaName'), '/Microsoft.Authorization/', 'CanNotDeleteLock-', parameters('uaName'))]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m level = "CanNotDelete"
                                                              [32m+[0m[0m notes = "Please do not delete this User-Assigned Identity since extensions enabled by Azure Policy are relying on their existence."
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities/providers/locks"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('identityResourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2020-06-01"
                                          [32m+[0m[0m dependsOn  = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                              [32m+[0m[0m "[variables('deployUAName')]",
                                            ]
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[variables('deployGetResourceProperties')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m outputs        = {
                                                      [32m+[0m[0m resource = {
                                                          [32m+[0m[0m type  = "object"
                                                          [32m+[0m[0m value = "[reference(parameters('resourceId'), '2019-07-01', 'Full')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = []
                                                }
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2020-06-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                              [32m+[0m[0m "[variables('deployUAName')]",
                                              [32m+[0m[0m "[variables('deployGetResourceProperties')]",
                                            ]
                                          [32m+[0m[0m name          = "[concat(variables('deployAssignUAName'))]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                  [32m+[0m[0m scope = "inner"
                                                }
                                              [32m+[0m[0m mode                        = "Incremental"
                                              [32m+[0m[0m parameters                  = {
                                                  [32m+[0m[0m identityType           = {
                                                      [32m+[0m[0m value = "[if(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.type, '')]"
                                                    }
                                                  [32m+[0m[0m location               = {
                                                      [32m+[0m[0m value = "[parameters('location')]"
                                                    }
                                                  [32m+[0m[0m uaId                   = {
                                                      [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), variables('precreatedUaId'), variables('autocreatedUaId'))]"
                                                    }
                                                  [32m+[0m[0m userAssignedIdentities = {
                                                      [32m+[0m[0m value = "[if(and(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), contains(reference(variables('deployGetResourceProperties')).outputs.resource.value.identity, 'userAssignedIdentities')), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.userAssignedIdentities, createObject())]"
                                                    }
                                                  [32m+[0m[0m vmName                 = {
                                                      [32m+[0m[0m value = "[parameters('vmName')]"
                                                    }
                                                }
                                              [32m+[0m[0m template                    = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m parameters     = {
                                                      [32m+[0m[0m identityType           = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m location               = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m uaId                   = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                      [32m+[0m[0m userAssignedIdentities = {
                                                          [32m+[0m[0m type = "object"
                                                        }
                                                      [32m+[0m[0m vmName                 = {
                                                          [32m+[0m[0m type = "string"
                                                        }
                                                    }
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2019-07-01"
                                                          [32m+[0m[0m condition  = "[not(variables('resourceWithSingleUAI'))]"
                                                          [32m+[0m[0m identity   = {
                                                              [32m+[0m[0m type                   = "[variables('identityTypeValue')]"
                                                              [32m+[0m[0m userAssignedIdentities = "[variables('userAssignedIdentitiesValue')]"
                                                            }
                                                          [32m+[0m[0m location   = "[parameters('location')]"
                                                          [32m+[0m[0m name       = "[parameters('vmName')]"
                                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {
                                                      [32m+[0m[0m identityTypeValue           = "[if(contains(parameters('identityType'), 'SystemAssigned'), 'SystemAssigned,UserAssigned', 'UserAssigned')]"
                                                      [32m+[0m[0m resourceWithSingleUAI       = "[and(equals(parameters('identityType'), 'UserAssigned'), equals(string(length(parameters('userAssignedIdentities'))), '1'))]"
                                                      [32m+[0m[0m userAssignedIdentitiesValue = "[union(parameters('userAssignedIdentities'), createObject(parameters('uaId'), createObject()))]"
                                                    }
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('vmResourceGroup')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m autocreatedUaId             = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')), '-', parameters('location'))]"
                                      [32m+[0m[0m deployAssignUAName          = "[concat('deployAssignUA-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployGetResourceProperties = "[concat('deployGetResourceProperties-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployUALockName            = "[concat('deployUALock-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m deployUAName                = "[concat('deployUA-', uniqueString(deployment().name))]"
                                      [32m+[0m[0m precreatedUaId              = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')))]"
                                      [32m+[0m[0m uaNameWithLocation          = "[concat(parameters('uaName'),'-', parameters('location'))]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m anyOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m allOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m contains = "UserAssigned"
                                          [32m+[0m[0m field    = "identity.type"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m containsKey = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName'))), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/Built-In-Identity-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Built-In-Identity-', field('location')))]"
                                          [32m+[0m[0m field       = "identity.userAssignedIdentities"
                                        },
                                    ]
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m allOf = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "UserAssigned"
                                          [32m+[0m[0m field  = "identity.type"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m equals = "1"
                                          [32m+[0m[0m value  = "[string(length(field('identity.userAssignedIdentities')))]"
                                        },
                                    ]
                                },
                            ]
                        }
                      [32m+[0m[0m name               = "[field('name')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-VNET-HubSpoke"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy deploys virtual network and peer to the hub"
      [32m+[0m[0m display_name        = "Deploy Virtual Network with peering to the hub"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Deploy-VNET-HubSpoke"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dnsServers               = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Default domain servers for the vNET."
                      [32m+[0m[0m displayName = "DNSServers"
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m hubResourceId            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource ID for the HUB vNet"
                      [32m+[0m[0m displayName = "hubResourceId"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vNetCidrRange            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "CIDR Range for the vNet"
                      [32m+[0m[0m displayName = "vNetCidrRange"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vNetLocation             = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Location for the vNet"
                      [32m+[0m[0m displayName = "vNetLocation"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vNetName                 = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the landing zone vNet"
                      [32m+[0m[0m displayName = "vNetName"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vNetPeerUseRemoteGateway = {
                  [32m+[0m[0m defaultValue = false
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Enable gateway transit for the LZ network"
                      [32m+[0m[0m displayName = "vNetPeerUseRemoteGateway"
                    }
                  [32m+[0m[0m type         = "Boolean"
                }
              [32m+[0m[0m vNetRgName               = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the landing zone vNet RG"
                      [32m+[0m[0m displayName = "vNetRgName"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                          [32m+[0m[0m field  = "type"
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m ResourceGroupName  = "[parameters('vNetRgName')]"
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m location   = "northeurope"
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m dnsServers               = {
                                      [32m+[0m[0m value = "[parameters('dnsServers')]"
                                    }
                                  [32m+[0m[0m hubResourceId            = {
                                      [32m+[0m[0m value = "[parameters('hubResourceId')]"
                                    }
                                  [32m+[0m[0m vNetCidrRange            = {
                                      [32m+[0m[0m value = "[parameters('vNetCidrRange')]"
                                    }
                                  [32m+[0m[0m vNetLocation             = {
                                      [32m+[0m[0m value = "[parameters('vNetLocation')]"
                                    }
                                  [32m+[0m[0m vNetName                 = {
                                      [32m+[0m[0m value = "[parameters('vNetName')]"
                                    }
                                  [32m+[0m[0m vNetPeerUseRemoteGateway = {
                                      [32m+[0m[0m value = "[parameters('vNetPeerUseRemoteGateway')]"
                                    }
                                  [32m+[0m[0m vNetRgName               = {
                                      [32m+[0m[0m value = "[parameters('vNetRgName')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m dnsServers               = {
                                          [32m+[0m[0m defaultValue = []
                                          [32m+[0m[0m type         = "Array"
                                        }
                                      [32m+[0m[0m hubResourceId            = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vNetCidrRange            = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vNetLocation             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vNetName                 = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vNetPeerUseRemoteGateway = {
                                          [32m+[0m[0m defaultValue = false
                                          [32m+[0m[0m type         = "bool"
                                        }
                                      [32m+[0m[0m vNetRgName               = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                          [32m+[0m[0m dependsOn  = []
                                          [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                          [32m+[0m[0m name       = "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m outputs        = {}
                                                  [32m+[0m[0m parameters     = {}
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-04-01"
                                                          [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                                          [32m+[0m[0m name       = "[parameters('vNetRgName')]"
                                                          [32m+[0m[0m properties = {}
                                                          [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                        },
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion    = "2021-04-01"
                                          [32m+[0m[0m dependsOn     = [
                                              [32m+[0m[0m "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]",
                                            ]
                                          [32m+[0m[0m name          = "[concat('alz-vnet-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                          [32m+[0m[0m properties    = {
                                              [32m+[0m[0m mode     = "Incremental"
                                              [32m+[0m[0m template = {
                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                  [32m+[0m[0m outputs        = {}
                                                  [32m+[0m[0m parameters     = {}
                                                  [32m+[0m[0m resources      = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-02-01"
                                                          [32m+[0m[0m dependsOn  = []
                                                          [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                                          [32m+[0m[0m name       = "[parameters('vNetName')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m addressSpace = {
                                                                  [32m+[0m[0m addressPrefixes = [
                                                                      [32m+[0m[0m "[parameters('vNetCidrRange')]",
                                                                    ]
                                                                }
                                                              [32m+[0m[0m dhcpOptions  = {
                                                                  [32m+[0m[0m dnsServers = "[parameters('dnsServers')]"
                                                                }
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion = "2021-02-01"
                                                          [32m+[0m[0m dependsOn  = [
                                                              [32m+[0m[0m "[parameters('vNetName')]",
                                                            ]
                                                          [32m+[0m[0m name       = "[concat(parameters('vNetName'), '/peerToHub')]"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m allowForwardedTraffic     = true
                                                              [32m+[0m[0m allowGatewayTransit       = false
                                                              [32m+[0m[0m allowVirtualNetworkAccess = true
                                                              [32m+[0m[0m remoteVirtualNetwork      = {
                                                                  [32m+[0m[0m id = "[parameters('hubResourceId')]"
                                                                }
                                                              [32m+[0m[0m useRemoteGateways         = "[parameters('vNetPeerUseRemoteGateway')]"
                                                            }
                                                          [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m apiVersion     = "2021-04-01"
                                                          [32m+[0m[0m dependsOn      = [
                                                              [32m+[0m[0m "[parameters('vNetName')]",
                                                            ]
                                                          [32m+[0m[0m name           = "[concat('alz-hub-peering-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                                          [32m+[0m[0m properties     = {
                                                              [32m+[0m[0m expressionEvaluationOptions = {
                                                                  [32m+[0m[0m scope = "inner"
                                                                }
                                                              [32m+[0m[0m mode                        = "Incremental"
                                                              [32m+[0m[0m parameters                  = {
                                                                  [32m+[0m[0m hubName              = {
                                                                      [32m+[0m[0m value = "[split(parameters('hubResourceId'),'/')[8]]"
                                                                    }
                                                                  [32m+[0m[0m remoteVirtualNetwork = {
                                                                      [32m+[0m[0m value = "[concat(subscription().id,'/resourceGroups/',parameters('vNetRgName'), '/providers/','Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                                                                    }
                                                                }
                                                              [32m+[0m[0m template                    = {
                                                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                                                  [32m+[0m[0m outputs        = {}
                                                                  [32m+[0m[0m parameters     = {
                                                                      [32m+[0m[0m hubName              = {
                                                                          [32m+[0m[0m defaultValue = false
                                                                          [32m+[0m[0m type         = "String"
                                                                        }
                                                                      [32m+[0m[0m remoteVirtualNetwork = {
                                                                          [32m+[0m[0m defaultValue = false
                                                                          [32m+[0m[0m type         = "String"
                                                                        }
                                                                    }
                                                                  [32m+[0m[0m resources      = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m apiVersion = "2021-02-01"
                                                                          [32m+[0m[0m name       = "[[concat(parameters('hubName'),'/',last(split(parameters('remoteVirtualNetwork'),'/')))]"
                                                                          [32m+[0m[0m properties = {
                                                                              [32m+[0m[0m allowForwardedTraffic     = true
                                                                              [32m+[0m[0m allowGatewayTransit       = true
                                                                              [32m+[0m[0m allowVirtualNetworkAccess = true
                                                                              [32m+[0m[0m remoteVirtualNetwork      = {
                                                                                  [32m+[0m[0m id = "[[parameters('remoteVirtualNetwork')]"
                                                                                }
                                                                              [32m+[0m[0m useRemoteGateways         = false
                                                                            }
                                                                          [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                                                        },
                                                                    ]
                                                                  [32m+[0m[0m variables      = {}
                                                                }
                                                            }
                                                          [32m+[0m[0m resourceGroup  = "[split(parameters('hubResourceId'),'/')[4]]"
                                                          [32m+[0m[0m subscriptionId = "[split(parameters('hubResourceId'),'/')[2]]"
                                                          [32m+[0m[0m type           = "Microsoft.Resources/deployments"
                                                        },
                                                    ]
                                                  [32m+[0m[0m variables      = {}
                                                }
                                            }
                                          [32m+[0m[0m resourceGroup = "[parameters('vNetRgName')]"
                                          [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m deploymentScope    = "subscription"
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field = "name"
                                  [32m+[0m[0m like  = "[parameters('vNetName')]"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[parameters('vNetLocation')]"
                                  [32m+[0m[0m field  = "location"
                                },
                            ]
                        }
                      [32m+[0m[0m existenceScope     = "resourceGroup"
                      [32m+[0m[0m name               = "[parameters('vNetName')]"
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Network/virtualNetworks"
                    }
                  [32m+[0m[0m effect  = "deployIfNotExists"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploys an auto shutdown schedule to a virtual machine"
      [32m+[0m[0m display_name        = "Deploy Virtual Machine Auto Shutdown Schedule"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Compute"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Vm-autoShutdown"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m EnableNotification         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Enabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
                      [32m+[0m[0m displayName = "Send Notification before auto-shutdown"
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m NotificationEmailRecipient = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Email address to be used for notification"
                      [32m+[0m[0m displayName = "Email Address"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m NotificationWebhookUrl     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
                      [32m+[0m[0m displayName = "Webhook URL"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m time                       = {
                  [32m+[0m[0m defaultValue = "0000"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
                      [32m+[0m[0m displayName = "Scheduled Shutdown Time"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m timeZoneId                 = {
                  [32m+[0m[0m defaultValue = "UTC"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The time zone ID (e.g. Pacific Standard time)."
                      [32m+[0m[0m displayName = "Time zone"
                    }
                  [32m+[0m[0m type         = "string"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                  [32m+[0m[0m field  = "type"
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m EnableNotification         = {
                                      [32m+[0m[0m value = "[parameters('EnableNotification')]"
                                    }
                                  [32m+[0m[0m NotificationEmailRecipient = {
                                      [32m+[0m[0m value = "[parameters('NotificationEmailRecipient')]"
                                    }
                                  [32m+[0m[0m NotificationWebhookUrl     = {
                                      [32m+[0m[0m value = "[parameters('NotificationWebhookUrl')]"
                                    }
                                  [32m+[0m[0m location                   = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m time                       = {
                                      [32m+[0m[0m value = "[parameters('time')]"
                                    }
                                  [32m+[0m[0m timeZoneId                 = {
                                      [32m+[0m[0m value = "[parameters('timeZoneId')]"
                                    }
                                  [32m+[0m[0m vmName                     = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m EnableNotification         = {
                                          [32m+[0m[0m defaultValue = ""
                                          [32m+[0m[0m metadata     = {
                                              [32m+[0m[0m description = "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
                                            }
                                          [32m+[0m[0m type         = "string"
                                        }
                                      [32m+[0m[0m NotificationEmailRecipient = {
                                          [32m+[0m[0m defaultValue = ""
                                          [32m+[0m[0m metadata     = {
                                              [32m+[0m[0m description = "Email address to be used for notification"
                                            }
                                          [32m+[0m[0m type         = "string"
                                        }
                                      [32m+[0m[0m NotificationWebhookUrl     = {
                                          [32m+[0m[0m defaultValue = ""
                                          [32m+[0m[0m metadata     = {
                                              [32m+[0m[0m description = "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
                                            }
                                          [32m+[0m[0m type         = "string"
                                        }
                                      [32m+[0m[0m location                   = {
                                          [32m+[0m[0m type = "string"
                                        }
                                      [32m+[0m[0m time                       = {
                                          [32m+[0m[0m defaultValue = ""
                                          [32m+[0m[0m metadata     = {
                                              [32m+[0m[0m description = "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
                                            }
                                          [32m+[0m[0m type         = "string"
                                        }
                                      [32m+[0m[0m timeZoneId                 = {
                                          [32m+[0m[0m defaultValue = ""
                                          [32m+[0m[0m metadata     = {
                                              [32m+[0m[0m description = "The time zone ID (e.g. Pacific Standard time)."
                                            }
                                          [32m+[0m[0m type         = "string"
                                        }
                                      [32m+[0m[0m vmName                     = {
                                          [32m+[0m[0m type = "string"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2018-09-15"
                                          [32m+[0m[0m location   = "[parameters('location')]"
                                          [32m+[0m[0m name       = "[concat('shutdown-computevm-',parameters('vmName'))]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m dailyRecurrence      = {
                                                  [32m+[0m[0m time = "[parameters('time')]"
                                                }
                                              [32m+[0m[0m notificationSettings = {
                                                  [32m+[0m[0m emailRecipient     = "[parameters('NotificationEmailRecipient')]"
                                                  [32m+[0m[0m notificationLocale = "en"
                                                  [32m+[0m[0m status             = "[parameters('EnableNotification')]"
                                                  [32m+[0m[0m timeInMinutes      = 30
                                                  [32m+[0m[0m webhookUrl         = "[parameters('NotificationWebhookUrl')]"
                                                }
                                              [32m+[0m[0m status               = "Enabled"
                                              [32m+[0m[0m targetResourceId     = "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                                              [32m+[0m[0m taskType             = "ComputeVmShutdownTask"
                                              [32m+[0m[0m timeZoneId           = "[parameters('timeZoneId')]"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.DevTestLab/schedules"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {}
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "ComputeVmShutdownTask"
                                  [32m+[0m[0m field  = "Microsoft.DevTestLab/schedules/taskType"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "[concat(resourceGroup().id,'/providers/Microsoft.Compute/virtualMachines/',field('name'))]"
                                  [32m+[0m[0m field  = "Microsoft.DevTestLab/schedules/targetResourceId"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.DevTestLab/schedules"
                    }
                  [32m+[0m[0m effect  = "deployIfNotExists"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Windows-DomainJoin"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy Windows Domain Join Extension with keyvault configuration when the extension does not exist on a given windows Virtual Machine"
      [32m+[0m[0m display_name        = "Deploy Windows Domain Join Extension with keyvault configuration"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Guest Configuration"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "Indexed"
      [32m+[0m[0m name                = "Deploy-Windows-DomainJoin"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m domainFQDN         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "domainFQDN"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m domainOUPath       = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "domainOUPath"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m domainPassword     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "domainPassword"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m domainUsername     = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "domainUsername"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m keyVaultResourceId = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m displayName = "keyVaultResourceId"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "MicrosoftWindowsServer"
                          [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "WindowsServer"
                          [32m+[0m[0m field  = "Microsoft.Compute/imageOffer"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                          [32m+[0m[0m in    = [
                              [32m+[0m[0m "2008-R2-SP1",
                              [32m+[0m[0m "2008-R2-SP1-smalldisk",
                              [32m+[0m[0m "2008-R2-SP1-zhcn",
                              [32m+[0m[0m "2012-Datacenter",
                              [32m+[0m[0m "2012-datacenter-gensecond",
                              [32m+[0m[0m "2012-Datacenter-smalldisk",
                              [32m+[0m[0m "2012-datacenter-smalldisk-g2",
                              [32m+[0m[0m "2012-Datacenter-zhcn",
                              [32m+[0m[0m "2012-datacenter-zhcn-g2",
                              [32m+[0m[0m "2012-R2-Datacenter",
                              [32m+[0m[0m "2012-r2-datacenter-gensecond",
                              [32m+[0m[0m "2012-R2-Datacenter-smalldisk",
                              [32m+[0m[0m "2012-r2-datacenter-smalldisk-g2",
                              [32m+[0m[0m "2012-R2-Datacenter-zhcn",
                              [32m+[0m[0m "2012-r2-datacenter-zhcn-g2",
                              [32m+[0m[0m "2016-Datacenter",
                              [32m+[0m[0m "2016-datacenter-gensecond",
                              [32m+[0m[0m "2016-datacenter-gs",
                              [32m+[0m[0m "2016-Datacenter-Server-Core",
                              [32m+[0m[0m "2016-datacenter-server-core-g2",
                              [32m+[0m[0m "2016-Datacenter-Server-Core-smalldisk",
                              [32m+[0m[0m "2016-datacenter-server-core-smalldisk-g2",
                              [32m+[0m[0m "2016-Datacenter-smalldisk",
                              [32m+[0m[0m "2016-datacenter-smalldisk-g2",
                              [32m+[0m[0m "2016-Datacenter-with-Containers",
                              [32m+[0m[0m "2016-datacenter-with-containers-g2",
                              [32m+[0m[0m "2016-Datacenter-with-RDSH",
                              [32m+[0m[0m "2016-Datacenter-zhcn",
                              [32m+[0m[0m "2016-datacenter-zhcn-g2",
                              [32m+[0m[0m "2019-Datacenter",
                              [32m+[0m[0m "2019-Datacenter-Core",
                              [32m+[0m[0m "2019-datacenter-core-g2",
                              [32m+[0m[0m "2019-Datacenter-Core-smalldisk",
                              [32m+[0m[0m "2019-datacenter-core-smalldisk-g2",
                              [32m+[0m[0m "2019-Datacenter-Core-with-Containers",
                              [32m+[0m[0m "2019-datacenter-core-with-containers-g2",
                              [32m+[0m[0m "2019-Datacenter-Core-with-Containers-smalldisk",
                              [32m+[0m[0m "2019-datacenter-core-with-containers-smalldisk-g2",
                              [32m+[0m[0m "2019-datacenter-gensecond",
                              [32m+[0m[0m "2019-datacenter-gs",
                              [32m+[0m[0m "2019-Datacenter-smalldisk",
                              [32m+[0m[0m "2019-datacenter-smalldisk-g2",
                              [32m+[0m[0m "2019-Datacenter-with-Containers",
                              [32m+[0m[0m "2019-datacenter-with-containers-g2",
                              [32m+[0m[0m "2019-Datacenter-with-Containers-smalldisk",
                              [32m+[0m[0m "2019-datacenter-with-containers-smalldisk-g2",
                              [32m+[0m[0m "2019-Datacenter-zhcn",
                              [32m+[0m[0m "2019-datacenter-zhcn-g2",
                              [32m+[0m[0m "Datacenter-Core-1803-with-Containers-smalldisk",
                              [32m+[0m[0m "datacenter-core-1803-with-containers-smalldisk-g2",
                              [32m+[0m[0m "Datacenter-Core-1809-with-Containers-smalldisk",
                              [32m+[0m[0m "datacenter-core-1809-with-containers-smalldisk-g2",
                              [32m+[0m[0m "Datacenter-Core-1903-with-Containers-smalldisk",
                              [32m+[0m[0m "datacenter-core-1903-with-containers-smalldisk-g2",
                              [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk",
                              [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk-g1",
                              [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk-g2",
                            ]
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m deployment         = {
                          [32m+[0m[0m properties = {
                              [32m+[0m[0m mode       = "Incremental"
                              [32m+[0m[0m parameters = {
                                  [32m+[0m[0m domainFQDN         = {
                                      [32m+[0m[0m value = "[parameters('domainFQDN')]"
                                    }
                                  [32m+[0m[0m domainOUPath       = {
                                      [32m+[0m[0m value = "[parameters('domainOUPath')]"
                                    }
                                  [32m+[0m[0m domainPassword     = {
                                      [32m+[0m[0m reference = {
                                          [32m+[0m[0m keyVault   = {
                                              [32m+[0m[0m id = "[parameters('keyVaultResourceId')]"
                                            }
                                          [32m+[0m[0m secretName = "[parameters('domainPassword')]"
                                        }
                                    }
                                  [32m+[0m[0m domainUsername     = {
                                      [32m+[0m[0m reference = {
                                          [32m+[0m[0m keyVault   = {
                                              [32m+[0m[0m id = "[parameters('keyVaultResourceId')]"
                                            }
                                          [32m+[0m[0m secretName = "[parameters('domainUsername')]"
                                        }
                                    }
                                  [32m+[0m[0m keyVaultResourceId = {
                                      [32m+[0m[0m value = "[parameters('keyVaultResourceId')]"
                                    }
                                  [32m+[0m[0m location           = {
                                      [32m+[0m[0m value = "[field('location')]"
                                    }
                                  [32m+[0m[0m vmName             = {
                                      [32m+[0m[0m value = "[field('name')]"
                                    }
                                }
                              [32m+[0m[0m template   = {
                                  [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  [32m+[0m[0m contentVersion = "1.0.0.0"
                                  [32m+[0m[0m outputs        = {}
                                  [32m+[0m[0m parameters     = {
                                      [32m+[0m[0m domainFQDN         = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m domainOUPath       = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m domainPassword     = {
                                          [32m+[0m[0m type = "securestring"
                                        }
                                      [32m+[0m[0m domainUsername     = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m keyVaultResourceId = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m location           = {
                                          [32m+[0m[0m type = "String"
                                        }
                                      [32m+[0m[0m vmName             = {
                                          [32m+[0m[0m type = "String"
                                        }
                                    }
                                  [32m+[0m[0m resources      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m apiVersion = "2015-06-15"
                                          [32m+[0m[0m location   = "[resourceGroup().location]"
                                          [32m+[0m[0m name       = "[concat(variables('vmName'),'/joindomain')]"
                                          [32m+[0m[0m properties = {
                                              [32m+[0m[0m autoUpgradeMinorVersion = true
                                              [32m+[0m[0m protectedSettings       = {
                                                  [32m+[0m[0m Password = "[parameters('domainPassword')]"
                                                }
                                              [32m+[0m[0m publisher               = "Microsoft.Compute"
                                              [32m+[0m[0m settings                = {
                                                  [32m+[0m[0m Name    = "[parameters('domainFQDN')]"
                                                  [32m+[0m[0m OUPath  = "[parameters('domainOUPath')]"
                                                  [32m+[0m[0m Options = "[variables('domainJoinOptions')]"
                                                  [32m+[0m[0m Restart = "true"
                                                  [32m+[0m[0m User    = "[parameters('domainUserName')]"
                                                }
                                              [32m+[0m[0m type                    = "JsonADDomainExtension"
                                              [32m+[0m[0m typeHandlerVersion      = "1.3"
                                            }
                                          [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                        },
                                    ]
                                  [32m+[0m[0m variables      = {
                                      [32m+[0m[0m domainJoinOptions = 3
                                      [32m+[0m[0m vmName            = "[parameters('vmName')]"
                                    }
                                }
                            }
                        }
                      [32m+[0m[0m existenceCondition = {
                          [32m+[0m[0m allOf = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "JsonADDomainExtension"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                },
                              [32m+[0m[0m {
                                  [32m+[0m[0m equals = "Microsoft.Compute"
                                  [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                },
                            ]
                        }
                      [32m+[0m[0m roleDefinitionIds  = [
                          [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                        ]
                      [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-NSG"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enforces the configuration of Network Security Groups (NSG)."
      [32m+[0m[0m display_name        = "Enforce specific configuration of Network Security Groups (NSG)"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Modify-NSG"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m nsgRuleAccess                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Allow",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m nsgRuleDescription              = {
                  [32m+[0m[0m defaultValue = "Deny any outbound traffic to the Internet"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRuleDestinationAddressPrefix = {
                  [32m+[0m[0m defaultValue = "Internet"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRuleDestinationPortRange     = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRuleDirection                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Inbound",
                      [32m+[0m[0m "Outbound",
                    ]
                  [32m+[0m[0m defaultValue  = "Outbound"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m nsgRuleName                     = {
                  [32m+[0m[0m defaultValue = "DenyAnyInternetOutbound"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRulePriority                 = {
                  [32m+[0m[0m defaultValue = 1000
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m nsgRuleProtocol                 = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRuleSourceAddressPrefix      = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m nsgRuleSourcePortRange          = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count  = {
                              [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                            }
                          [32m+[0m[0m equals = 0
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m conflictEffect    = "audit"
                      [32m+[0m[0m operations        = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                              [32m+[0m[0m operation = "add"
                              [32m+[0m[0m value     = {
                                  [32m+[0m[0m name       = "[parameters('nsgRuleName')]"
                                  [32m+[0m[0m properties = {
                                      [32m+[0m[0m access                   = "[parameters('nsgRuleAccess')]"
                                      [32m+[0m[0m description              = "[parameters('nsgRuleDescription')]"
                                      [32m+[0m[0m destinationAddressPrefix = "[parameters('nsgRuleDestinationAddressPrefix')]"
                                      [32m+[0m[0m destinationPortRange     = "[parameters('nsgRuleDestinationPortRange')]"
                                      [32m+[0m[0m direction                = "[parameters('nsgRuleDirection')]"
                                      [32m+[0m[0m priority                 = "[parameters('nsgRulePriority')]"
                                      [32m+[0m[0m protocol                 = "[parameters('nsgRuleProtocol')]"
                                      [32m+[0m[0m sourceAddressPrefix      = "[parameters('nsgRuleSourceAddressPrefix')]"
                                      [32m+[0m[0m sourcePortRange          = "[parameters('nsgRuleSourcePortRange')]"
                                    }
                                }
                            },
                        ]
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-UDR"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy enforces the configuration of User-Defined Routes (UDR) within a subnet."
      [32m+[0m[0m display_name        = "Enforce specific configuration of User-Defined Routes (UDR)"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m mode                = "All"
      [32m+[0m[0m name                = "Modify-UDR"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m addressPrefix    = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The destination IP address range in CIDR notation that this Policy checks for within the UDR. Example: 0.0.0.0/0 to check for the presence of a default route."
                      [32m+[0m[0m displayName = "Address Prefix"
                    }
                  [32m+[0m[0m type     = "string"
                }
              [32m+[0m[0m effect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m nextHopIpAddress = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The IP address packets should be forwarded to."
                      [32m+[0m[0m displayName = "Next Hop IP Address"
                    }
                  [32m+[0m[0m type     = "string"
                }
              [32m+[0m[0m nextHopType      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "VnetLocal",
                      [32m+[0m[0m "VirtualNetworkGateway",
                      [32m+[0m[0m "Internet",
                      [32m+[0m[0m "VirtualAppliance",
                      [32m+[0m[0m "None",
                    ]
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "The next hope type that the policy checks for within the inspected route. The value can be Virtual Network, Virtual Network Gateway, Internet, Virtual Appliance, or None."
                      [32m+[0m[0m displayName = "Next Hop Type"
                    }
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_rule         = jsonencode(
            {
              [32m+[0m[0m if   = {
                  [32m+[0m[0m allOf = [
                      [32m+[0m[0m {
                          [32m+[0m[0m equals = "Microsoft.Network/routeTables"
                          [32m+[0m[0m field  = "type"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m count  = {
                              [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                            }
                          [32m+[0m[0m equals = 0
                        },
                    ]
                }
              [32m+[0m[0m then = {
                  [32m+[0m[0m details = {
                      [32m+[0m[0m conflictEffect    = "audit"
                      [32m+[0m[0m operations        = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Network/routeTables/routes[*]"
                              [32m+[0m[0m operation = "add"
                              [32m+[0m[0m value     = {
                                  [32m+[0m[0m name       = "default"
                                  [32m+[0m[0m properties = {
                                      [32m+[0m[0m addressPrefix    = "[parameters('addressPrefix')]"
                                      [32m+[0m[0m nextHopIpAddress = "[parameters('nextHopIpAddress')]"
                                      [32m+[0m[0m nextHopType      = "[parameters('nextHopType')]"
                                    }
                                }
                            },
                        ]
                      [32m+[0m[0m roleDefinitionIds = [
                          [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                    }
                  [32m+[0m[0m effect  = "[parameters('effect')]"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"
      [32m+[0m[0m role_definition_ids = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-TrustedLaunch"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Trusted Launch improves security of a Virtual Machine which requires VM SKU, OS Disk & OS Image to support it (Gen 2). To learn more about Trusted Launch, visit https://aka.ms/trustedlaunch."
      [32m+[0m[0m display_name        = "Audit virtual machines for Trusted Launch support"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Trusted Launch"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Audit-TrustedLaunch"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b03bb370-5249-4ea4-9fce-2552e87e45fa"
          [32m+[0m[0m reference_id         = "AuditDisksOsTrustedLaunch"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c95b54ad-0614-4633-ab29-104b01235cbf"
          [32m+[0m[0m reference_id         = "AuditTrustedLaunchEnabled"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Azure Policy Initiative as a cost control tool to reveal orphaned resources that are contributing cost."
      [32m+[0m[0m display_name        = "Unused resources driving cost should be avoided"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cost Optimization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.0.0"
            }
        )
      [32m+[0m[0m name                = "Audit-UnusedResourcesCostOptimization"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effectDisks             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy for Microsoft.Compute/disks"
                      [32m+[0m[0m displayName = "Disks Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectPublicIpAddresses = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy for Microsoft.Network/publicIpAddresses"
                      [32m+[0m[0m displayName = "PublicIpAddresses Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectServerFarms       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy for Microsoft.Web/serverfarms"
                      [32m+[0m[0m displayName = "ServerFarms Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectDisks')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization"
          [32m+[0m[0m reference_id         = "AuditDisksUnusedResourcesCostOptimization"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectPublicIpAddresses')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
          [32m+[0m[0m reference_id         = "AuditPublicIpAddressesUnusedResourcesCostOptimization"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectServerFarms')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization"
          [32m+[0m[0m reference_id         = "AuditServerFarmsUnusedResourcesCostOptimization"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit"
          [32m+[0m[0m reference_id         = "AuditAzureHybridBenefitUnusedResourcesCostOptimization"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that prevents creation of Azure PaaS services with exposed public endpoints"
      [32m+[0m[0m display_name        = "Public network access should be disabled for PaaS services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "5.1.0"
            }
        )
      [32m+[0m[0m name                = "Deny-PublicPaaSEndpoints"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ACRPublicIpDenyEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies the creation of Azure Container Registries with exposed public endpoints "
                      [32m+[0m[0m displayName = "Public network access on Azure Container Registry disabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AFSPublicIpDenyEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies the creation of Azure File Sync instances with exposed public endpoints "
                      [32m+[0m[0m displayName = "Public network access on Azure File Sync disabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AKSPublicIpDenyEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies  the creation of  Azure Kubernetes Service non-private clusters"
                      [32m+[0m[0m displayName = "Public network access on AKS API should be disabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ApiManPublicIpDenyEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of API Management services with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for API Management services"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppConfigPublicIpDenyEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of App Configuration with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for App Configuration"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AsPublicIpDenyEffect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of App Service apps with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for App Service apps"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AsePublicIpDenyEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of App Service Environment apps with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for App Service Environment apps"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AsrVaultDenyEffect                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Azure Recovery Services vaults with exposed public endpoints"
                      [32m+[0m[0m displayName = "Azure Recovery Services vaults should disable public network access"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AutomationPublicIpDenyEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Automation accounts with exposed public endpoints. Bots should be set to 'isolated only' mode"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Automation accounts"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m BatchPublicIpDenyEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Azure Batch Instances with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Azure Batch Instances"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m BotServicePublicIpDenyEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Bot Service with exposed public endpoints. Bots should be set to 'isolated only' mode"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Bot Service"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ContainerAppsEnvironmentDenyEffect     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Container Apps Environment with exposed public endpoints"
                      [32m+[0m[0m displayName = "Container Apps environment should disable public network access"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m CosmosPublicIpDenyEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies that Cosmos database accounts  are created with out public network access is disabled."
                      [32m+[0m[0m displayName = "Public network access should be disabled for CosmosDB"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionAppSlotPublicIpDenyEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Function apps with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Function apps"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionPublicIpDenyEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Function apps with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Function apps"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m KeyVaultPublicIpDenyEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Key Vaults with IP Firewall exposed to all public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for KeyVault"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MariaDbPublicIpDenyEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Azure MariaDB with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Azure MariaDB"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MlPublicIpDenyEffect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Azure Machine Learning with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Azure Machine Learning"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLFlexPublicIpDenyEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of MySql Flexible Server DB accounts with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for MySQL Flexible Server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLFlexPublicIpDenyEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of PostgreSQL Flexible DB accounts with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for PostgreSql Flexible Server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisCachePublicIpDenyEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Azure Cache for Redis with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlServerPublicIpDenyEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of Sql servers with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access on Azure SQL Database should be disabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StoragePublicIpDenyEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of storage accounts with IP Firewall exposed to all public endpoints"
                      [32m+[0m[0m displayName = "Public network access onStorage accounts should be disabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m adfPublicNetworkAccess                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adxPublicNetworkAccess                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appSlotsPublicNetworkAccess            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m avdHostPoolPublicNetworkAccess         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m avdWorkspacePublicNetworkAccess        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveSearchPublicNetworkAccess     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesNetworkAccess         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesPublicNetworkAccess   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerAppsPublicNetworkAccess       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridPublicNetworkAccess           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridTopicPublicNetworkAccess      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubNamespacesPublicNetworkAccess  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m grafanaPublicNetworkAccess             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultManagedHsmDisablePublicNetwork = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m logicAppPublicNetworkAccessEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m managedDiskPublicNetworkAccess         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mySqlPublicNetworkAccess               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m postgreSqlPublicNetworkAccess          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy denies creation of PostgreSQL DB accounts with exposed public endpoints"
                      [32m+[0m[0m displayName = "Public network access should be disabled for PostgreSQL servers"
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m serviceBusDisablePublicNetworkAccess   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlManagedPublicNetworkAccess          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsPublicAccess            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapsePublicNetworkAccess             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('CosmosPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/797b37f7-06b8-444c-b1ad-fc62867f335a"
          [32m+[0m[0m reference_id         = "CosmosDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('KeyVaultPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/405c5871-3e91-4644-8a63-58e19d68ff5b"
          [32m+[0m[0m reference_id         = "KeyVaultDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlServerPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b8ca024-1d5c-4dec-8995-b1a932b41780"
          [32m+[0m[0m reference_id         = "SqlServerDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('StoragePublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b2982f36-99f2-4db5-8eff-283140c09693"
          [32m+[0m[0m reference_id         = "StorageDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AKSPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/040732e8-d947-40b8-95d6-854c95024bf8"
          [32m+[0m[0m reference_id         = "AKSDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ACRPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0fdf0491-d080-4575-b627-ad0e843cba0f"
          [32m+[0m[0m reference_id         = "ACRDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AFSPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/21a8cd35-125e-4d13-b82d-2e19b7208bb7"
          [32m+[0m[0m reference_id         = "AFSDenyPaasPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLFlexPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e1de0e3-42cb-4ebc-a86d-61d0c619ca48"
          [32m+[0m[0m reference_id         = "PostgreSQLFlexDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('postgreSqlPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b52376f7-9612-48a1-81cd-1ffe4b61032c"
          [32m+[0m[0m reference_id         = "Deny-PostgreSql-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('MySQLFlexPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c9299215-ae47-4f50-9c54-8a392f68a052"
          [32m+[0m[0m reference_id         = "MySQLFlexDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('BatchPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/74c5a0ae-5e48-4738-b093-65e23a060488"
          [32m+[0m[0m reference_id         = "BatchDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('MariaDbPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fdccbe47-f3e3-4213-ad5d-ea459b2fa077"
          [32m+[0m[0m reference_id         = "MariaDbDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('MlPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/438c38d2-3772-465a-a9cc-7a6666a275ce"
          [32m+[0m[0m reference_id         = "MlDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('RedisCachePublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/470baccb-7e51-4549-8b1a-3e5be069f663"
          [32m+[0m[0m reference_id         = "RedisCacheDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('BotServicePublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e8168db-69e3-4beb-9822-57cb59202a9d"
          [32m+[0m[0m reference_id         = "BotServiceDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AutomationPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/955a914f-bf86-4f0e-acd5-e0766b0efcb6"
          [32m+[0m[0m reference_id         = "AutomationDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AppConfigPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3d9f5e4c-9947-4579-9539-2a7695fbc187"
          [32m+[0m[0m reference_id         = "AppConfigDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/969ac98b-88a8-449f-883c-2e9adb123127"
          [32m+[0m[0m reference_id         = "FunctionDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionAppSlotPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/11c82d0c-db9f-4d7b-97c5-f3f9aa957da2"
          [32m+[0m[0m reference_id         = "FunctionAppSlotsDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AsePublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2d048aca-6479-4923-88f5-e2ac295d9af3"
          [32m+[0m[0m reference_id         = "AseDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AsPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b5ef780-c53c-4a64-87f3-bb9c8c8094ba"
          [32m+[0m[0m reference_id         = "AsDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ApiManPublicIpDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/df73bd95-24da-4a4f-96b9-4e8b94b402bd"
          [32m+[0m[0m reference_id         = "ApiManDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ContainerAppsEnvironmentDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a"
          [32m+[0m[0m reference_id         = "ContainerAppsEnvironmentDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerAppsPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1"
          [32m+[0m[0m reference_id         = "Deny-ContainerApps-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AsrVaultDenyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9ebbbba3-4d65-4da9-bb67-b22cfaaff090"
          [32m+[0m[0m reference_id         = "AsrVaultDenyPublicIP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('logicAppPublicNetworkAccessEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApp-Public-Network"
          [32m+[0m[0m reference_id         = "Deny-LogicApp-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appSlotsPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/701a595d-38fb-4a66-ae6d-fb3735217622"
          [32m+[0m[0m reference_id         = "Deny-AppSlots-Public"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveSearchPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ee980b6d-0eca-4501-8d54-f6290fd512c3"
          [32m+[0m[0m reference_id         = "Deny-CognitiveSearch-PublicEndpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('managedDiskPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8405fdab-1faf-48aa-b702-999c9c172094"
          [32m+[0m[0m reference_id         = "Deny-ManagedDisk-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/43bc7be6-5e69-4b0d-a2bb-e815557ca673"
          [32m+[0m[0m reference_id         = "Deny-ADX-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1cf164be-6819-4a50-b8fa-4bcaa4f98fb6"
          [32m+[0m[0m reference_id         = "Deny-Adf-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f8f774be-6aee-492a-9e29-486ef81f3a68"
          [32m+[0m[0m reference_id         = "Deny-EventGrid-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridTopicPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1adadefe-5f21-44f7-b931-a59b54ccdb45"
          [32m+[0m[0m reference_id         = "Deny-EventGrid-Topic-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubNamespacesPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0602787f-9896-402a-a6e1-39ee63ee435e"
          [32m+[0m[0m reference_id         = "Deny-EH-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultManagedHsmDisablePublicNetwork')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/19ea9d63-adee-4431-a95e-1913c6c1c75f"
          [32m+[0m[0m reference_id         = "Deny-KV-Hms-PublicNetwork"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mySqlPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d9844e8a-1437-4aeb-a32c-0c992f056095"
          [32m+[0m[0m reference_id         = "Deny-MySql-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0725b4dd-7e76-479c-a735-68e7ee23d5ca"
          [32m+[0m[0m reference_id         = "Deny-Cognitive-Services-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/037eea7a-bd0a-46c5-9a66-03aea78705d3"
          [32m+[0m[0m reference_id         = "Deny-Cognitive-Services-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusDisablePublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cbd11fd3-3002-4907-b6c8-579f0e700e13"
          [32m+[0m[0m reference_id         = "Deny-Sb-PublicEndpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlManagedPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9dfea752-dd46-4766-aed1-c355fa93fb91"
          [32m+[0m[0m reference_id         = "Deny-Sql-Managed-Public-Endpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsPublicAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4fa4b6c0-31ca-4c0d-b10d-24b96f62a751"
          [32m+[0m[0m reference_id         = "Deny-Storage-Public-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapsePublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/38d8df46-cf4e-4073-8e03-48c24b29de0d"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('avdWorkspacePublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/87ac3038-c07a-4b92-860d-29e270a4f3cd"
          [32m+[0m[0m reference_id         = "Deny-Workspace-PublicNetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('avdHostPoolPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c25dcf31-878f-4eba-98eb-0818fdc6a334"
          [32m+[0m[0m reference_id         = "Deny-Hostpool-PublicNetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('grafanaPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e8775d5a-73b7-4977-a39b-833ef0114628"
          [32m+[0m[0m reference_id         = "Deny-Grafana-PublicNetworkAccess"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/DenyAction-DeleteProtection"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforces DenyAction - Delete on Activity Log Settings and Diagnostic Settings."
      [32m+[0m[0m display_name        = "DenyAction Delete - Activity Log Settings and Diagnostic Settings"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "DenyAction-DeleteProtection"
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs"
          [32m+[0m[0m reference_id         = "DenyActionDelete-DiagnosticSettings"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs"
          [32m+[0m[0m reference_id         = "DenyActionDelete-ActivityLogSettings"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Configure auto-assessment (every 24 hours) for OS updates. You can control the scope of assignment according to machine subscription, resource group, location or tag. Learn more about this for Windows: https://aka.ms/computevm-windowspatchassessmentmode, for Linux: https://aka.ms/computevm-linuxpatchassessmentmode."
      [32m+[0m[0m display_name        = "Configure periodic checking for missing system updates on azure virtual machines and Arc-enabled virtual machines"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Deploy-AUM-CheckUpdates"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m assessmentMode = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "ImageDefault",
                      [32m+[0m[0m "AutomaticByPlatform",
                    ]
                  [32m+[0m[0m defaultValue  = "AutomaticByPlatform"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Assessment mode for the machines."
                      [32m+[0m[0m displayName = "Assessment mode"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m locations      = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The list of locations from which machines need to be targeted."
                      [32m+[0m[0m displayName = "Machines locations"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m tagOperator    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "All",
                      [32m+[0m[0m "Any",
                    ]
                  [32m+[0m[0m defaultValue  = "Any"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Matching condition for resource tags"
                      [32m+[0m[0m displayName = "Tag operator"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m tagValues      = {
                  [32m+[0m[0m defaultValue = {}
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The list of tags that need to matched for getting target machines."
                      [32m+[0m[0m displayName = "Tags on machines"
                    }
                  [32m+[0m[0m type         = "Object"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m assessmentMode = {
                      [32m+[0m[0m value = "[parameters('assessmentMode')]"
                    }
                  [32m+[0m[0m locations      = {
                      [32m+[0m[0m value = "[parameters('locations')]"
                    }
                  [32m+[0m[0m osType         = {
                      [32m+[0m[0m value = "Windows"
                    }
                  [32m+[0m[0m tagOperator    = {
                      [32m+[0m[0m value = "[parameters('tagOperator')]"
                    }
                  [32m+[0m[0m tagValues      = {
                      [32m+[0m[0m value = "[parameters('tagValues')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
          [32m+[0m[0m reference_id         = "azureUpdateManagerVmCheckUpdateWindows"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m assessmentMode = {
                      [32m+[0m[0m value = "[parameters('assessmentMode')]"
                    }
                  [32m+[0m[0m locations      = {
                      [32m+[0m[0m value = "[parameters('locations')]"
                    }
                  [32m+[0m[0m osType         = {
                      [32m+[0m[0m value = "Linux"
                    }
                  [32m+[0m[0m tagOperator    = {
                      [32m+[0m[0m value = "[parameters('tagOperator')]"
                    }
                  [32m+[0m[0m tagValues      = {
                      [32m+[0m[0m value = "[parameters('tagValues')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
          [32m+[0m[0m reference_id         = "azureUpdateManagerVmCheckUpdateLinux"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m assessmentMode = {
                      [32m+[0m[0m value = "[parameters('assessmentMode')]"
                    }
                  [32m+[0m[0m locations      = {
                      [32m+[0m[0m value = "[parameters('locations')]"
                    }
                  [32m+[0m[0m osType         = {
                      [32m+[0m[0m value = "Windows"
                    }
                  [32m+[0m[0m tagOperator    = {
                      [32m+[0m[0m value = "[parameters('tagOperator')]"
                    }
                  [32m+[0m[0m tagValues      = {
                      [32m+[0m[0m value = "[parameters('tagValues')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
          [32m+[0m[0m reference_id         = "azureUpdateManagerVmArcCheckUpdateWindows"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m assessmentMode = {
                      [32m+[0m[0m value = "[parameters('assessmentMode')]"
                    }
                  [32m+[0m[0m locations      = {
                      [32m+[0m[0m value = "[parameters('locations')]"
                    }
                  [32m+[0m[0m osType         = {
                      [32m+[0m[0m value = "Linux"
                    }
                  [32m+[0m[0m tagOperator    = {
                      [32m+[0m[0m value = "[parameters('tagOperator')]"
                    }
                  [32m+[0m[0m tagValues      = {
                      [32m+[0m[0m value = "[parameters('tagValues')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
          [32m+[0m[0m reference_id         = "azureUpdateManagerVmArcCheckUpdateLinux"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diagnostics-LogAnalytics"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy set deploys the configurations of application Azure resources to forward diagnostic logs and metrics to an Azure Log Analytics workspace. This policy set is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Diagnostic Settings to Azure Services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Monitoring"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.2.0-deprecated"
            }
        )
      [32m+[0m[0m name                = "Deploy-Diagnostics-LogAnalytics"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ACILogAnalyticsEffect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Container Instances to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy willset the diagnostic with all metrics enabled."
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Container Instances to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ACRLogAnalyticsEffect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Container Registry to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics  enabled."
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Container Registry to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AKSLogAnalyticsEffect                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Kubernetes Service to stream to a Log Analytics workspace when any Kubernetes Service which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled."
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Kubernetes Service to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m APIMgmtLogAnalyticsDestinationType      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AzureDiagnostics",
                      [32m+[0m[0m "Dedicated",
                    ]
                  [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Destination table for the diagnostic setting for API Management to Log Analytics workspace, allowed values are 'Dedicated' (for resource-specific) and 'AzureDiagnostics'. Default value is 'AzureDiagnostics'"
                      [32m+[0m[0m displayName = "Destination table for the Diagnostic Setting for API Management to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m APIMgmtLogAnalyticsEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for API Management to stream to a Log Analytics workspace when any API Management which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for API Management to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m APIforFHIRLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure API for FHIR to stream to a Log Analytics workspace when any Azure API for FHIR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure API for FHIR to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AVDScalingPlansLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AnalysisServiceLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Analysis Services to stream to a Log Analytics workspace when any Analysis Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Analysis Services to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for App Service Plan to stream to a Log Analytics workspace when any App Service Plan which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceWebappLogAnalyticsEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for App Service to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ApplicationGatewayLogAnalyticsEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AutomationLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Automation to stream to a Log Analytics workspace when any Automation which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Automation to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m BastionLogAnalyticsEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Bastion to stream to a Log Analytics workspace when any Bastion which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m BatchLogAnalyticsEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Batch to stream to a Log Analytics workspace when any Batch which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Batch to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m CDNEndpointsLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for CDN Endpoint to stream to a Log Analytics workspace when any CDN Endpoint which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for CDN Endpoint to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m CognitiveServicesLogAnalyticsEffect     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Cognitive Services to stream to a Log Analytics workspace when any Cognitive Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Cognitive Services to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m CosmosLogAnalyticsEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DataExplorerClusterLogAnalyticsEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DataFactoryLogAnalyticsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Data Factory to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DataLakeAnalyticsLogAnalyticsEffect     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Data Lake Analytics to stream to a Log Analytics workspace when any Data Lake Analytics which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Data Lake Analytics to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DataLakeStoreLogAnalyticsEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Data Lake Store to stream to a Log Analytics workspace when anyAzure Data Lake Store which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure Data Lake Store to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DatabricksLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Databricks to stream to a Log Analytics workspace when any Databricks which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Databricks to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m EventGridSubLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid subscriptions to stream to a Log Analytics workspace when any Event Grid subscriptions which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Event Grid subscriptions to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m EventGridTopicLogAnalyticsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid Topic to stream to a Log Analytics workspace when any Event Grid Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Event Grid Topic to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m EventHubLogAnalyticsEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Event Hubs to stream to a Log Analytics workspace when any Event Hubs which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Event Hubs to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m EventSystemTopicLogAnalyticsEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid System Topic to stream to a Log Analytics workspace when any Event Grid System Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Event Grid System Topic to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ExpressRouteLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FirewallLogAnalyticsDestinationType     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AzureDiagnostics",
                      [32m+[0m[0m "Dedicated",
                    ]
                  [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Destination table for the diagnostic setting for Firewall to Log Analytics workspace, allowed values are 'Dedicated' (for resource-specific) and 'AzureDiagnostics'. Default value is 'AzureDiagnostics'"
                      [32m+[0m[0m displayName = "Destination table for the Diagnostic Setting for Firewall to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FirewallLogAnalyticsEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Firewall to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FrontDoorLogAnalyticsEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Front Door to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionAppLogAnalyticsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m HDInsightLogAnalyticsEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for HDInsight to stream to a Log Analytics workspace when any HDInsight which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for HDInsight to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m IotHubLogAnalyticsEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for IoT Hub to stream to a Log Analytics workspace when any IoT Hub which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for IoT Hub to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m KeyVaultLogAnalyticsEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Key Vault to stream to a Log Analytics workspace when any Key Vault which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Key Vault to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m LoadBalancerLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m LogAnalyticsLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Log Analytics to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category Audit enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m LogicAppsISELogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Logic Apps integration service environment to stream to a Log Analytics workspace when any Logic Apps integration service environment which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Logic Apps integration service environment to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m LogicAppsWFLogAnalyticsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Logic Apps Workflows to stream to a Log Analytics workspace when any Logic Apps Workflows which are missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Logic Apps Workflows to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MariaDBLogAnalyticsEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for MariaDB to stream to a Log Analytics workspace when any MariaDB  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for MariaDB to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MediaServiceLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Media Service to stream to a Log Analytics workspace when any Azure Media Service which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Azure Media Service to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MlWorkspaceLogAnalyticsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Machine Learning workspace to stream to a Log Analytics workspace when any Machine Learning workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Machine Learning workspace to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLLogAnalyticsEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Database for MySQL to stream to a Log Analytics workspace when any Database for MySQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Database for MySQL to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m NetworkNICLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m NetworkPublicIPNicLogAnalyticsEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Public IP addresses to stream to a Log Analytics workspace when any Public IP addresses which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Public IP addresses to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m NetworkSecurityGroupsLogAnalyticsEffect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Database for PostgreSQL to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Database for PostgreSQL to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PowerBIEmbeddedLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Power BI Embedded to stream to a Log Analytics workspace when any Power BI Embedded which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Power BI Embedded to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisCacheLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Redis Cache to stream to a Log Analytics workspace when any Redis Cache which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Redis Cache to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RelayLogAnalyticsEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Relay to stream to a Log Analytics workspace when any Relay which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Relay to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLDBsLogAnalyticsEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for SQL Databases to stream to a Log Analytics workspace when any SQL Databases  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for SQL Databases  to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLElasticPoolsLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for SQL Elastic Pools to stream to a Log Analytics workspace when any SQL Elastic Pools which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for SQL Elastic Pools to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLMLogAnalyticsEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for SQL Managed Instances to stream to a Log Analytics workspace when any SQL Managed Instances which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SearchServicesLogAnalyticsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Search Services to stream to a Log Analytics workspace when any Search Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Search Services to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ServiceBusLogAnalyticsEffect            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for ServiceBus to stream to a Log Analytics workspace when any ServiceBus which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Service Bus namespaces  to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SignalRLogAnalyticsEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for SignalR to stream to a Log Analytics workspace when any SignalR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for SignalR to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageAccountsLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Storage Accounts to stream to a Log Analytics workspace when any storage account which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Storage Accounts to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StreamAnalyticsLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Stream Analytics to stream to a Log Analytics workspace when any Stream Analytics which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Stream Analytics to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m TimeSeriesInsightsLogAnalyticsEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Time Series Insights to stream to a Log Analytics workspace when any Time Series Insights which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Time Series Insights to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m TrafficManagerLogAnalyticsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m VMSSLogAnalyticsEffect                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Machine Scale Sets  to stream to a Log Analytics workspace when any Virtual Machine Scale Sets  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Virtual Machine Scale Sets to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m VNetGWLogAnalyticsEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for VPN Gateway to stream to a Log Analytics workspace when any VPN Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled."
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for VPN Gateway to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m VWanS2SVPNGWLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for VWAN S2S VPN gateway to stream to a Log Analytics workspace when any storage account which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for VWAN S2S VPN gateway to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m VirtualMachinesLogAnalyticsEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m VirtualNetworkLogAnalyticsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WVDAppGroupsLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Application groups to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for AVD Application Groups to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WVDHostPoolsLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Host pools to stream to a Log Analytics workspace when any host pool which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for AVD Host pools to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WVDWorkspaceLogAnalyticsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
                      [32m+[0m[0m displayName = "Deploy Diagnostic Settings for AVD Workspace to Log Analytics workspace"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics                            = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m profileName                             = {
                  [32m+[0m[0m defaultValue = "setbypolicy"
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The diagnostic settings profile name"
                      [32m+[0m[0m displayName = "Profile name"
                    }
                  [32m+[0m[0m type         = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StorageAccountsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/59759c62-9a22-4cdf-ae64-074495983fef"
          [32m+[0m[0m reference_id         = "StorageAccountDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StorageAccountsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b4fe1a3b-0715-4c6c-a5ea-ffc33cf823cb"
          [32m+[0m[0m reference_id         = "StorageAccountBlobServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StorageAccountsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25a70cc8-2bd4-47f1-90b6-1478e4662c96"
          [32m+[0m[0m reference_id         = "StorageAccountFileServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StorageAccountsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7bd000e3-37c7-4928-9f31-86c4b77c5c45"
          [32m+[0m[0m reference_id         = "StorageAccountQueueServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StorageAccountsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2fb86bf3-d221-43d1-96d1-2434af34eaa0"
          [32m+[0m[0m reference_id         = "StorageAccountTableServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('AVDScalingPlansLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans"
          [32m+[0m[0m reference_id         = "AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('WVDAppGroupsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup"
          [32m+[0m[0m reference_id         = "WVDAppGroupDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('WVDWorkspaceLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace"
          [32m+[0m[0m reference_id         = "WVDWorkspaceDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('WVDHostPoolsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools"
          [32m+[0m[0m reference_id         = "WVDHostPoolsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('ACILogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI"
          [32m+[0m[0m reference_id         = "ACIDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('ACRLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR"
          [32m+[0m[0m reference_id         = "ACRDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m diagnosticsSettingNameToUse = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('AKSLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c66c325-74c8-42fd-a286-a74b0e2939d8"
          [32m+[0m[0m reference_id         = "AKSDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('AnalysisServiceLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService"
          [32m+[0m[0m reference_id         = "AnalysisServiceDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('APIforFHIRLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR"
          [32m+[0m[0m reference_id         = "APIforFHIRDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('APIMgmtLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m logAnalyticsDestinationType = {
                      [32m+[0m[0m value = "[parameters('APIMgmtLogAnalyticsDestinationType')]"
                    }
                  [32m+[0m[0m profileName                 = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt"
          [32m+[0m[0m reference_id         = "APIMgmtDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('ApplicationGatewayLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway"
          [32m+[0m[0m reference_id         = "ApplicationGatewayDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('AutomationLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA"
          [32m+[0m[0m reference_id         = "AutomationDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('BastionLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion"
          [32m+[0m[0m reference_id         = "BastionDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('BatchLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c84e5349-db6d-4769-805e-e14037dab9b5"
          [32m+[0m[0m reference_id         = "BatchDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('CDNEndpointsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints"
          [32m+[0m[0m reference_id         = "CDNEndpointsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('CognitiveServicesLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices"
          [32m+[0m[0m reference_id         = "CognitiveServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('CosmosLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB"
          [32m+[0m[0m reference_id         = "CosmosDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('DatabricksLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks"
          [32m+[0m[0m reference_id         = "DatabricksDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('DataExplorerClusterLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster"
          [32m+[0m[0m reference_id         = "DataExplorerClusterDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('DataFactoryLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory"
          [32m+[0m[0m reference_id         = "DataFactoryDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('DataLakeStoreLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d56a5a7c-72d7-42bc-8ceb-3baf4c0eae03"
          [32m+[0m[0m reference_id         = "DataLakeStoreDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('DataLakeAnalyticsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics"
          [32m+[0m[0m reference_id         = "DataLakeAnalyticsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('EventGridSubLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub"
          [32m+[0m[0m reference_id         = "EventGridSubDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('EventGridTopicLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic"
          [32m+[0m[0m reference_id         = "EventGridTopicDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('EventHubLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f6e93e8-6b31-41b1-83f6-36e449a42579"
          [32m+[0m[0m reference_id         = "EventHubDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('EventSystemTopicLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic"
          [32m+[0m[0m reference_id         = "EventSystemTopicDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('ExpressRouteLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute"
          [32m+[0m[0m reference_id         = "ExpressRouteDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('FirewallLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m logAnalyticsDestinationType = {
                      [32m+[0m[0m value = "[parameters('FirewallLogAnalyticsDestinationType')]"
                    }
                  [32m+[0m[0m profileName                 = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall"
          [32m+[0m[0m reference_id         = "FirewallDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('FrontDoorLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor"
          [32m+[0m[0m reference_id         = "FrontDoorDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('FunctionAppLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function"
          [32m+[0m[0m reference_id         = "FunctionAppDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('HDInsightLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight"
          [32m+[0m[0m reference_id         = "HDInsightDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('IotHubLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub"
          [32m+[0m[0m reference_id         = "IotHubDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('KeyVaultLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bef3f64c-5290-43b7-85b0-9b254eef4c47"
          [32m+[0m[0m reference_id         = "KeyVaultDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('LoadBalancerLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer"
          [32m+[0m[0m reference_id         = "LoadBalancerDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('LogAnalyticsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics"
          [32m+[0m[0m reference_id         = "LogAnalyticsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('LogicAppsISELogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE"
          [32m+[0m[0m reference_id         = "LogicAppsISEDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('LogicAppsWFLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b889a06c-ec72-4b03-910a-cb169ee18721"
          [32m+[0m[0m reference_id         = "LogicAppsWFDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('MariaDBLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB"
          [32m+[0m[0m reference_id         = "MariaDBDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('MediaServiceLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService"
          [32m+[0m[0m reference_id         = "MediaServiceDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('MlWorkspaceLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace"
          [32m+[0m[0m reference_id         = "MlWorkspaceDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('MySQLLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL"
          [32m+[0m[0m reference_id         = "MySQLDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('NetworkSecurityGroupsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups"
          [32m+[0m[0m reference_id         = "NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('NetworkNICLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC"
          [32m+[0m[0m reference_id         = "NetworkNICDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL"
          [32m+[0m[0m reference_id         = "PostgreSQLDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('PowerBIEmbeddedLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded"
          [32m+[0m[0m reference_id         = "PowerBIEmbeddedDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m value = "[parameters('NetworkPublicIPNicLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m value = "True"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/752154a7-1e0f-45c6-a880-ac75a7e4f648"
          [32m+[0m[0m reference_id         = "NetworkPublicIPNicDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c717fb0c-d118-4c43-ab3d-ece30ac81fb3"
          [32m+[0m[0m reference_id         = "RecoveryVaultDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('RedisCacheLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache"
          [32m+[0m[0m reference_id         = "RedisCacheDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('RelayLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay"
          [32m+[0m[0m reference_id         = "RelayDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('SearchServicesLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/08ba64b8-738f-4918-9686-730d2ed79c7d"
          [32m+[0m[0m reference_id         = "SearchServicesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('ServiceBusLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/04d53d87-841c-4f23-8a5b-21564380b55e"
          [32m+[0m[0m reference_id         = "ServiceBusDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('SignalRLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR"
          [32m+[0m[0m reference_id         = "SignalRDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m diagnosticsSettingNameToUse = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('SQLDBsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b79fa14e-238a-4c2d-b376-442ce508fc84"
          [32m+[0m[0m reference_id         = "SQLDatabaseDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('SQLElasticPoolsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools"
          [32m+[0m[0m reference_id         = "SQLElasticPoolsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('SQLMLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI"
          [32m+[0m[0m reference_id         = "SQLMDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('StreamAnalyticsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/237e0f7e-b0e8-4ec4-ad46-8c12cb66d673"
          [32m+[0m[0m reference_id         = "StreamAnalyticsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('TimeSeriesInsightsLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights"
          [32m+[0m[0m reference_id         = "TimeSeriesInsightsDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('TrafficManagerLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager"
          [32m+[0m[0m reference_id         = "TrafficManagerDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('VirtualNetworkLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork"
          [32m+[0m[0m reference_id         = "VirtualNetworkDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('VirtualMachinesLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM"
          [32m+[0m[0m reference_id         = "VirtualMachinesDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('VMSSLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS"
          [32m+[0m[0m reference_id         = "VMSSDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('VNetGWLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW"
          [32m+[0m[0m reference_id         = "VNetGWDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('AppServiceLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm"
          [32m+[0m[0m reference_id         = "AppServiceDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('AppServiceWebappLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website"
          [32m+[0m[0m reference_id         = "AppServiceWebappDeployDiagnosticLogDeployLogAnalytics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('VWanS2SVPNGWLogAnalyticsEffect')]"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m value = "[parameters('profileName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW"
          [32m+[0m[0m reference_id         = "VWanS2SVPNGWDeployDiagnosticLogDeployLogAnalytics"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy Microsoft Defender for Cloud configuration. Superseded by https://www.azadvertizer.net/azpolicyinitiativesadvertizer/Deploy-MDFC-Config_20240319.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy Microsoft Defender for Cloud configuration"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "Deploy-MDFC-Config_20240319"
              [32m+[0m[0m version              = "7.0.0-deprecated"
            }
        )
      [32m+[0m[0m name                = "Deploy-MDFC-Config"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ascExportResourceGroupLocation              = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The location where the resource group and the export to Log Analytics workspace configuration are created."
                      [32m+[0m[0m displayName = "Resource Group location for the export to Log Analytics workspace configuration"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m ascExportResourceGroupName                  = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The resource group name where the export to Log Analytics workspace configuration is created. If you enter a name for a resource group that doesn't exist, it'll be created in the subscription. Note that each resource group can only have one export to Log Analytics workspace configured."
                      [32m+[0m[0m displayName = "Resource Group name for the export to Log Analytics workspace configuration"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m emailSecurityContact                        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide email address for Microsoft Defender for Cloud contact details"
                      [32m+[0m[0m displayName = "Security contacts email address"
                    }
                  [32m+[0m[0m type     = "string"
                }
              [32m+[0m[0m enableAscForApis                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForAppServices                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForArm                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForContainers                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForCosmosDbs                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForCspm                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForDns                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForKeyVault                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForOssDb                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForServers                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForServersVulnerabilityAssessments = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForSql                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForSqlOnVm                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForStorage                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics                                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Primary Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m minimalSeverity                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "High",
                      [32m+[0m[0m "Medium",
                      [32m+[0m[0m "Low",
                    ]
                  [32m+[0m[0m defaultValue  = "High"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Defines the minimal alert severity which will be sent as email notifications"
                      [32m+[0m[0m displayName = "Minimal severity"
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m vulnerabilityAssessmentProvider             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "default",
                      [32m+[0m[0m "mdeTvm",
                    ]
                  [32m+[0m[0m defaultValue  = "default"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select the vulnerability assessment solution to provision to machines."
                      [32m+[0m[0m displayName = "Vulnerability assessment provider type"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForOssDb')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/44433aa3-7ec2-4002-93ea-65c65ff0310a"
          [32m+[0m[0m reference_id         = "defenderForOssDb"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForServers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e86a5b6-b9bd-49d1-8e21-4bb8a0862222"
          [32m+[0m[0m reference_id         = "defenderForVM"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForServersVulnerabilityAssessments')]"
                    }
                  [32m+[0m[0m vaType = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentProvider')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/13ce0167-8ca6-4048-8e6b-f996402e3c1b"
          [32m+[0m[0m reference_id         = "defenderForVMVulnerabilityAssessment"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForSqlOnVm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/50ea7265-7d8c-429e-9a7d-ca1f410191c3"
          [32m+[0m[0m reference_id         = "defenderForSqlServerVirtualMachines"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForAppServices')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b40e7bcd-a1e5-47fe-b9cf-2f534d0bfb7d"
          [32m+[0m[0m reference_id         = "defenderForAppServices"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForStorage')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cfdc5972-75b3-4418-8ae1-7f5c36839390"
          [32m+[0m[0m reference_id         = "defenderForStorageAccountsV2"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c9ddb292-b203-4738-aead-18e2716e858f"
          [32m+[0m[0m reference_id         = "defenderforContainers"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                          = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                  [32m+[0m[0m logAnalyticsWorkspaceResourceId = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
          [32m+[0m[0m reference_id         = "defenderforKubernetes"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          [32m+[0m[0m reference_id         = "azurePolicyForKubernetes"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForKeyVault')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f725891-01c0-420a-9059-4fa46cb770b7"
          [32m+[0m[0m reference_id         = "defenderForKeyVaults"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForDns')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2370a3c1-4a25-4283-a91a-c9c1a145fb2f"
          [32m+[0m[0m reference_id         = "defenderForDns"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForArm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b7021b2b-08fd-4dc0-9de7-3c6ece09faf9"
          [32m+[0m[0m reference_id         = "defenderForArm"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForSql')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b99b73e7-074b-4089-9395-b7236f094491"
          [32m+[0m[0m reference_id         = "defenderForSqlPaas"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForCosmosDbs')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/82bf5b87-728b-4a74-ba4d-6123845cf542"
          [32m+[0m[0m reference_id         = "defenderForCosmosDbs"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForApis')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e54d2be9-5f2e-4d65-98e4-4f0e670b23d6"
          [32m+[0m[0m reference_id         = "defenderForApis"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForCspm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/689f7782-ef2c-4270-a6d0-7664869076bd"
          [32m+[0m[0m reference_id         = "defenderForCspm"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m emailSecurityContact = {
                      [32m+[0m[0m value = "[parameters('emailSecurityContact')]"
                    }
                  [32m+[0m[0m minimalSeverity      = {
                      [32m+[0m[0m value = "[parameters('minimalSeverity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts"
          [32m+[0m[0m reference_id         = "securityEmailContact"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m resourceGroupLocation = {
                      [32m+[0m[0m value = "[parameters('ascExportResourceGroupLocation')]"
                    }
                  [32m+[0m[0m resourceGroupName     = {
                      [32m+[0m[0m value = "[parameters('ascExportResourceGroupName')]"
                    }
                  [32m+[0m[0m workspaceResourceId   = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ffb6f416-7bd2-4488-8828-56585fef2be9"
          [32m+[0m[0m reference_id         = "ascExport"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/766e621d-ba95-4e43-a6f2-e945db3d7888"
          [32m+[0m[0m reference_id         = "migrateToMdeTvm"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config_20240319"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy Microsoft Defender for Cloud configuration"
      [32m+[0m[0m display_name        = "Deploy Microsoft Defender for Cloud configuration"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m replacesPolicy       = "Deploy-MDFC-Config"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Deploy-MDFC-Config_20240319"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ascExportResourceGroupLocation              = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The location where the resource group and the export to Log Analytics workspace configuration are created."
                      [32m+[0m[0m displayName = "Resource Group location for the export to Log Analytics workspace configuration"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m ascExportResourceGroupName                  = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The resource group name where the export to Log Analytics workspace configuration is created. If you enter a name for a resource group that doesn't exist, it'll be created in the subscription. Note that each resource group can only have one export to Log Analytics workspace configured."
                      [32m+[0m[0m displayName = "Resource Group name for the export to Log Analytics workspace configuration"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m emailSecurityContact                        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Provide email address for Microsoft Defender for Cloud contact details"
                      [32m+[0m[0m displayName = "Security contacts email address"
                    }
                  [32m+[0m[0m type     = "string"
                }
              [32m+[0m[0m enableAscForAppServices                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForArm                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForContainers                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForCosmosDbs                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForCspm                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForKeyVault                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForOssDb                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForServers                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForServersVulnerabilityAssessments = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForSql                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForSqlOnVm                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableAscForStorage                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m logAnalytics                                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      [32m+[0m[0m displayName = "Primary Log Analytics workspace"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m minimalSeverity                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "High",
                      [32m+[0m[0m "Medium",
                      [32m+[0m[0m "Low",
                    ]
                  [32m+[0m[0m defaultValue  = "High"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Defines the minimal alert severity which will be sent as email notifications"
                      [32m+[0m[0m displayName = "Minimal severity"
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m vulnerabilityAssessmentProvider             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "default",
                      [32m+[0m[0m "mdeTvm",
                    ]
                  [32m+[0m[0m defaultValue  = "mdeTvm"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select the vulnerability assessment solution to provision to machines."
                      [32m+[0m[0m displayName = "Vulnerability assessment provider type"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForOssDb')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/44433aa3-7ec2-4002-93ea-65c65ff0310a"
          [32m+[0m[0m reference_id         = "defenderForOssDb"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForServers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e86a5b6-b9bd-49d1-8e21-4bb8a0862222"
          [32m+[0m[0m reference_id         = "defenderForVM"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForServersVulnerabilityAssessments')]"
                    }
                  [32m+[0m[0m vaType = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentProvider')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/13ce0167-8ca6-4048-8e6b-f996402e3c1b"
          [32m+[0m[0m reference_id         = "defenderForVMVulnerabilityAssessment"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForSqlOnVm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/50ea7265-7d8c-429e-9a7d-ca1f410191c3"
          [32m+[0m[0m reference_id         = "defenderForSqlServerVirtualMachines"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForAppServices')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b40e7bcd-a1e5-47fe-b9cf-2f534d0bfb7d"
          [32m+[0m[0m reference_id         = "defenderForAppServices"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForStorage')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cfdc5972-75b3-4418-8ae1-7f5c36839390"
          [32m+[0m[0m reference_id         = "defenderForStorageAccountsV2"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c9ddb292-b203-4738-aead-18e2716e858f"
          [32m+[0m[0m reference_id         = "defenderforContainers"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                          = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                  [32m+[0m[0m logAnalyticsWorkspaceResourceId = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
          [32m+[0m[0m reference_id         = "defenderforKubernetes"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          [32m+[0m[0m reference_id         = "azurePolicyForKubernetes"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForKeyVault')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f725891-01c0-420a-9059-4fa46cb770b7"
          [32m+[0m[0m reference_id         = "defenderForKeyVaults"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForArm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b7021b2b-08fd-4dc0-9de7-3c6ece09faf9"
          [32m+[0m[0m reference_id         = "defenderForArm"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForSql')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b99b73e7-074b-4089-9395-b7236f094491"
          [32m+[0m[0m reference_id         = "defenderForSqlPaas"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForCosmosDbs')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/82bf5b87-728b-4a74-ba4d-6123845cf542"
          [32m+[0m[0m reference_id         = "defenderForCosmosDbs"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('enableAscForCspm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/689f7782-ef2c-4270-a6d0-7664869076bd"
          [32m+[0m[0m reference_id         = "defenderForCspm"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m emailSecurityContact = {
                      [32m+[0m[0m value = "[parameters('emailSecurityContact')]"
                    }
                  [32m+[0m[0m minimalSeverity      = {
                      [32m+[0m[0m value = "[parameters('minimalSeverity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts"
          [32m+[0m[0m reference_id         = "securityEmailContact"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m resourceGroupLocation = {
                      [32m+[0m[0m value = "[parameters('ascExportResourceGroupLocation')]"
                    }
                  [32m+[0m[0m resourceGroupName     = {
                      [32m+[0m[0m value = "[parameters('ascExportResourceGroupName')]"
                    }
                  [32m+[0m[0m workspaceResourceId   = {
                      [32m+[0m[0m value = "[parameters('logAnalytics')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ffb6f416-7bd2-4488-8828-56585fef2be9"
          [32m+[0m[0m reference_id         = "ascExport"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/766e621d-ba95-4e43-a6f2-e945db3d7888"
          [32m+[0m[0m reference_id         = "migrateToMdeTvm"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-DefenderSQL-AMA"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Initiative is deprecated as the built-in initiative now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyinitiativesadvertizer/de01d381-bae9-4670-8870-786f89f49e26.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Configure SQL VM and Arc-enabled SQL Servers to install Microsoft Defender for SQL and AMA with a user-defined LAW"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Security Center"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "de01d381-bae9-4670-8870-786f89f49e26"
              [32m+[0m[0m version              = "1.0.1-deprecated"
            }
        )
      [32m+[0m[0m name                = "Deploy-MDFC-DefenderSQL-AMA"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m dcrId                                           = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Id of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Id"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrName                                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Name of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Name"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m dcrResourceGroup                                = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                      [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m effect                                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m defaultValue  = false
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the collection of SQL queries for security research."
                      [32m+[0m[0m displayName = "Enable collection of SQL queries for security research"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m identityResourceGroup                           = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name of the resource group created by the policy."
                      [32m+[0m[0m displayName = "Identity Resource Group"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m userAssignedIdentityName                        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The name of the user assigned managed identity."
                      [32m+[0m[0m displayName = "User Assigned Managed Identity Name"
                    }
                  [32m+[0m[0m type         = "String"
                }
              [32m+[0m[0m userWorkspaceResourceId                         = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace Resource Id"
                      [32m+[0m[0m strongType  = "omsWorkspace"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m workspaceRegion                                 = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      [32m+[0m[0m displayName = "Workspace region"
                      [32m+[0m[0m strongType  = "location"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3592ff98-9787-443a-af59-4505d0fe0786"
          [32m+[0m[0m reference_id         = "defenderForSqlArcAma"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/65503269-6a54-4553-8a28-0065a8e6d929"
          [32m+[0m[0m reference_id         = "defenderForSqlArcMdsql"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m dcrId                                           = {
                      [32m+[0m[0m value = "[parameters('dcrId')]"
                    }
                  [32m+[0m[0m dcrName                                         = {
                      [32m+[0m[0m value = "[parameters('dcrName')]"
                    }
                  [32m+[0m[0m dcrResourceGroup                                = {
                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                    }
                  [32m+[0m[0m effect                                          = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                  [32m+[0m[0m userWorkspaceResourceId                         = {
                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                    }
                  [32m+[0m[0m workspaceRegion                                 = {
                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"
          [32m+[0m[0m reference_id         = "defenderForSqlArcMdsqlDcr"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m dcrId            = {
                      [32m+[0m[0m value = "[parameters('dcrId')]"
                    }
                  [32m+[0m[0m dcrName          = {
                      [32m+[0m[0m value = "[parameters('dcrName')]"
                    }
                  [32m+[0m[0m dcrResourceGroup = {
                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m workspaceRegion  = {
                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association"
          [32m+[0m[0m reference_id         = "defenderForSqlArcDcrAssociation"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                   = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m identityResourceGroup    = {
                      [32m+[0m[0m value = "[parameters('identityResourceGroup')]"
                    }
                  [32m+[0m[0m userAssignedIdentityName = {
                      [32m+[0m[0m value = "[parameters('userAssignedIdentityName')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA"
          [32m+[0m[0m reference_id         = "defenderForSqlAma"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m dcrId            = {
                      [32m+[0m[0m value = "[parameters('dcrId')]"
                    }
                  [32m+[0m[0m dcrName          = {
                      [32m+[0m[0m value = "[parameters('dcrName')]"
                    }
                  [32m+[0m[0m dcrResourceGroup = {
                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m workspaceRegion  = {
                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL"
          [32m+[0m[0m reference_id         = "defenderForSqlMdsql"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m dcrId                                           = {
                      [32m+[0m[0m value = "[parameters('dcrId')]"
                    }
                  [32m+[0m[0m dcrName                                         = {
                      [32m+[0m[0m value = "[parameters('dcrName')]"
                    }
                  [32m+[0m[0m dcrResourceGroup                                = {
                      [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                    }
                  [32m+[0m[0m effect                                          = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                      [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                  [32m+[0m[0m userWorkspaceResourceId                         = {
                      [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                    }
                  [32m+[0m[0m workspaceRegion                                 = {
                      [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR"
          [32m+[0m[0m reference_id         = "defenderForSqlMdsqlDcr"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures private endpoints to Azure PaaS services are integrated with Azure Private DNS zones"
      [32m+[0m[0m display_name        = "Configure Azure PaaS services to use private DNS zones"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.2.0"
            }
        )
      [32m+[0m[0m name                = "Deploy-Private-DNS-Zones"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m azureAcrPrivateDnsZoneId                            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAcrPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureAppPrivateDnsZoneId                            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAppPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureAppServicesPrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAppServicesPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureArcGuestconfigurationPrivateDnsZoneId          = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureArcGuestconfigurationPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureArcHybridResourceProviderPrivateDnsZoneId      = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureArcHybridResourceProviderPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureArcKubernetesConfigurationPrivateDnsZoneId     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureArcKubernetesConfigurationPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureAsrPrivateDnsZoneId                            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAsrPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureAutomationDSCHybridPrivateDnsZoneId            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAutomationDSCHybridPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureAutomationWebhookPrivateDnsZoneId              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureAutomationWebhookPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureBatchPrivateDnsZoneId                          = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureBatchPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureBotServicePrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureBotServicePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCognitiveSearchPrivateDnsZoneId                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCognitiveSearchPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCognitiveServicesPrivateDnsZoneId              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCognitiveServicesPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCosmosCassandraPrivateDnsZoneId                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCosmosCassandraPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCosmosGremlinPrivateDnsZoneId                  = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCosmosGremlinPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCosmosMongoPrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCosmosMongoPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCosmosSQLPrivateDnsZoneId                      = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCosmosSQLPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureCosmosTablePrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureCosmosTablePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureDataFactoryPortalPrivateDnsZoneId              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureDataFactoryPortalPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureDataFactoryPrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureDataFactoryPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureDatabricksPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureDatabricksPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureDiskAccessPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureDiskAccessPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureEventGridDomainsPrivateDnsZoneId               = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureEventGridDomainsPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureEventGridTopicsPrivateDnsZoneId                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureEventGridTopicsPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureEventHubNamespacePrivateDnsZoneId              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureEventHubNamespacePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureFilePrivateDnsZoneId                           = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureFilePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureHDInsightPrivateDnsZoneId                      = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureHDInsightPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureIotCentralPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureIotCentralPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureIotDeviceupdatePrivateDnsZoneId                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureIotDeviceupdatePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureIotHubsPrivateDnsZoneId                        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureIotHubsPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureIotPrivateDnsZoneId                            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureIotPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureKeyVaultPrivateDnsZoneId                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureKeyVaultPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMachineLearningWorkspacePrivateDnsZoneId       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMachineLearningWorkspacePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMachineLearningWorkspaceSecondPrivateDnsZoneId = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMachineLearningWorkspaceSecondPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureManagedGrafanaWorkspacePrivateDnsZoneId        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureManagedGrafanaWorkspacePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMediaServicesKeyPrivateDnsZoneId               = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMediaServicesKeyPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMediaServicesLivePrivateDnsZoneId              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMediaServicesLivePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMediaServicesStreamPrivateDnsZoneId            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMediaServicesStreamPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMigratePrivateDnsZoneId                        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMigratePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId1                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMonitorPrivateDnsZoneId1"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId2                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMonitorPrivateDnsZoneId2"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId3                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMonitorPrivateDnsZoneId3"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId4                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMonitorPrivateDnsZoneId4"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureMonitorPrivateDnsZoneId5                       = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureMonitorPrivateDnsZoneId5"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureRedisCachePrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureRedisCachePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureServiceBusNamespacePrivateDnsZoneId            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureServiceBusNamespacePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSignalRPrivateDnsZoneId                        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSignalRPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSiteRecoveryBackupPrivateDnsZoneID             = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSiteRecoveryBackupPrivateDnsZoneID"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSiteRecoveryBlobPrivateDnsZoneID               = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSiteRecoveryBlobPrivateDnsZoneID"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSiteRecoveryQueuePrivateDnsZoneID              = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSiteRecoveryQueuePrivateDnsZoneID"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageBlobPrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageBlobPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageBlobSecPrivateDnsZoneId                 = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageBlobSecPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageDFSPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageDFSPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageDFSSecPrivateDnsZoneId                  = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageDFSSecPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageFilePrivateDnsZoneId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageFilePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageQueuePrivateDnsZoneId                   = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageQueuePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageQueueSecPrivateDnsZoneId                = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageQueueSecPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageStaticWebPrivateDnsZoneId               = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageStaticWebPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageStaticWebSecPrivateDnsZoneId            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageStaticWebSecPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageTablePrivateDnsZoneId                   = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageTablePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureStorageTableSecondaryPrivateDnsZoneId          = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureStorageTableSecondaryPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSynapseDevPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSynapseDevPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSynapseSQLODPrivateDnsZoneId                   = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSynapseSQLODPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureSynapseSQLPrivateDnsZoneId                     = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureSynapseSQLPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureVirtualDesktopHostpoolPrivateDnsZoneId         = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureVirtualDesktopHostpoolPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureVirtualDesktopWorkspacePrivateDnsZoneId        = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureVirtualDesktopWorkspacePrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m azureWebPrivateDnsZoneId                            = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Private DNS Zone Identifier"
                      [32m+[0m[0m displayName = "azureWebPrivateDnsZoneId"
                      [32m+[0m[0m strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m effect                                              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m effect1                                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "deployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "deployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureFilePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/06695360-db88-47f6-b976-7500d4297475"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-File-Sync"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureAutomationWebhookPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "Webhook"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6dd01e4f-1be1-4e80-9d0b-d109e04cb064"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Automation-Webhook"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureAutomationDSCHybridPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "DSCAndHybridWorker"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6dd01e4f-1be1-4e80-9d0b-d109e04cb064"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Automation-DSCHybrid"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureCosmosSQLPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "SQL"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Cosmos-SQL"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureCosmosMongoPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "MongoDB"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Cosmos-MongoDB"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureCosmosCassandraPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "Cassandra"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Cosmos-Cassandra"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureCosmosGremlinPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "Gremlin"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Cosmos-Gremlin"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureCosmosTablePrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "Table"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Cosmos-Table"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m listOfGroupIds   = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m "dataFactory",
                        ]
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureDataFactoryPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86cd96e1-1745-420d-94d4-d3f2fe415aa4"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-DataFactory"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m listOfGroupIds   = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m "portal",
                        ]
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureDataFactoryPortalPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86cd96e1-1745-420d-94d4-d3f2fe415aa4"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-DataFactory-Portal"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "databricks_ui_api"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureDatabricksPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0eddd7f3-3d9b-4927-a07a-806e8ac9486c"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Databricks-UI-Api"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "browser_authentication"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureDatabricksPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0eddd7f3-3d9b-4927-a07a-806e8ac9486c"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Databricks-Browser-AuthN"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "cluster"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureHDInsightPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/43d6e3bd-fc6a-4b44-8b4d-2151d8736a11"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-HDInsight"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureMigratePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7590a335-57cf-4c95-babd-ecbc8fafeb1f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Migrate"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageBlobPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75973700-529f-4de2-b794-fb9b6781b6b0"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Blob"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageBlobSecPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d847d34b-9337-4e2d-99a5-767e5ac9c582"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Blob-Sec"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageQueuePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bcff79fb-2b0d-47c9-97e5-3023479b00d1"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Queue"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageQueueSecPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/da9b4ae8-5ddc-48c5-b9c0-25f8abf7a3d6"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Queue-Sec"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageFilePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6df98d03-368a-4438-8730-a93c4d7693d6"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-File"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageStaticWebPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9adab2a5-05ba-4fbd-831a-5bf958d04218"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-StaticWeb"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageStaticWebSecPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d19ae5f1-b303-4b82-9ca8-7682749faf0c"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-StaticWeb-Sec"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageDFSPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83c6fe0f-2316-444a-99a1-1ecd8a7872ca"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-DFS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageDFSSecPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/90bd4cb3-9f59-45f7-a6ca-f69db2726671"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-DFS-Sec"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId  = {
                      [32m+[0m[0m value = "[parameters('azureSynapseSQLPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m targetSubResource = {
                      [32m+[0m[0m value = "Sql"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Synapse-SQL"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId  = {
                      [32m+[0m[0m value = "[parameters('azureSynapseSQLODPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m targetSubResource = {
                      [32m+[0m[0m value = "SqlOnDemand"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Synapse-SQL-OnDemand"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId  = {
                      [32m+[0m[0m value = "[parameters('azureSynapseDevPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m targetSubResource = {
                      [32m+[0m[0m value = "Dev"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Synapse-Dev"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "keydelivery"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureMediaServicesKeyPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-MediaServices-Key"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "liveevent"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureMediaServicesLivePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-MediaServices-Live"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m value = "streamingendpoint"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureMediaServicesStreamPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-MediaServices-Stream"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId1 = {
                      [32m+[0m[0m value = "[parameters('azureMonitorPrivateDnsZoneId1')]"
                    }
                  [32m+[0m[0m privateDnsZoneId2 = {
                      [32m+[0m[0m value = "[parameters('azureMonitorPrivateDnsZoneId2')]"
                    }
                  [32m+[0m[0m privateDnsZoneId3 = {
                      [32m+[0m[0m value = "[parameters('azureMonitorPrivateDnsZoneId3')]"
                    }
                  [32m+[0m[0m privateDnsZoneId4 = {
                      [32m+[0m[0m value = "[parameters('azureMonitorPrivateDnsZoneId4')]"
                    }
                  [32m+[0m[0m privateDnsZoneId5 = {
                      [32m+[0m[0m value = "[parameters('azureMonitorPrivateDnsZoneId5')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/437914ee-c176-4fff-8986-7e05eb971365"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Monitor"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureWebPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0b026355-49cb-467b-8ac4-f777874e175a"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Web"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureBatchPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4ec38ebc-381f-45ee-81a4-acbc4be878f8"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Batch"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureAppPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7a860e27-9ca2-4fc6-822d-c2d248c300df"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-App"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureAsrPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/942bd215-1a66-44be-af65-6a1c0318dbe2"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Site-Recovery"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureIotPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/aaa64d2d-2fa3-45e5-b332-0b031b9b30e8"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-IoT"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureKeyVaultPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ac673a9a-f77d-4846-b2d8-a57f8e1c01d4"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-KeyVault"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureSignalRPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b0e86710-7fb7-4a6c-a064-32e9b829509e"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-SignalR"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureAppServicesPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b318f84a-b872-429b-ac6d-a01b96814452"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-AppServices"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect1')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureEventGridTopicsPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/baf19753-7502-405f-8745-370519b20483"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-EventGridTopics"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureDiskAccessPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bc05b96c-0b36-4ca9-82f0-5c53f96ce05a"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-DiskAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureCognitiveServicesPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c4bc6f10-cb41-49eb-b000-d5ab82e2a091"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-CognitiveServices"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect1')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureIotHubsPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c99ce9c1-ced7-4c3e-aca0-10e69ce0cb02"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-IoTHubs"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect1')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureEventGridDomainsPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d389df0a-e0d7-4607-833c-75a6fdac2c2d"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-EventGridDomains"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureRedisCachePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e016b22b-e0eb-436d-8fd7-160c4eaed6e2"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-RedisCache"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureAcrPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e9585a95-5b8c-4d03-b193-dc7eb5ac4c32"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-ACR"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureEventHubNamespacePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ed66d4f5-8220-45dc-ab4a-20d1749c74e6"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-EventHubNamespace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureMachineLearningWorkspacePrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m secondPrivateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureMachineLearningWorkspaceSecondPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ee40564d-486e-4f68-a5ca-7a621edae0fb"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-MachineLearningWorkspace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureServiceBusNamespacePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f0fcf93c-c063-4071-9668-c47474bd3564"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-ServiceBusNamespace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureCognitiveSearchPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fbc14a67-53e4-4932-abcc-2049c6706009"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-CognitiveSearch"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureBotServicePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6a4e6f44-f2af-4082-9702-033c9e88b9f8"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-BotService"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureManagedGrafanaWorkspacePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4c8537f8-cd1b-49ec-b704-18e82a42fd58"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-ManagedGrafanaWorkspace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureVirtualDesktopHostpoolPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "connection"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9427df23-0f42-4e1e-bf99-a6133d841c4a"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-VirtualDesktopHostpool"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                 = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId       = {
                      [32m+[0m[0m value = "[parameters('azureVirtualDesktopWorkspacePrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateEndpointGroupId = {
                      [32m+[0m[0m value = "feed"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/34804460-d88b-4922-a7ca-537165e060ed"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-VirtualDesktopWorkspace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureIotDeviceupdatePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a222b93a-e6c2-4c01-817f-21e092455b2a"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-IoTDeviceupdate"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                                     = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneIDForGuestConfiguration      = {
                      [32m+[0m[0m value = "[parameters('azureArcGuestconfigurationPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateDnsZoneIDForHybridResourceProvider  = {
                      [32m+[0m[0m value = "[parameters('azureArcHybridResourceProviderPrivateDnsZoneId')]"
                    }
                  [32m+[0m[0m privateDnsZoneIDForKubernetesConfiguration = {
                      [32m+[0m[0m value = "[parameters('azureArcKubernetesConfigurationPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/55c4db33-97b0-437b-8469-c4f4498f5df9"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Arc"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureIotCentralPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d627d7c6-ded5-481a-8f2e-7e16b1e6faf6"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-IoTCentral"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageTablePrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/028bbd88-e9b5-461f-9424-a1b63a7bee1a"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Table"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m value = "[parameters('azureStorageTableSecondaryPrivateDnsZoneId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c1d634a5-f73d-4cdd-889f-2cc7006eb47f"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Storage-Table-Secondary"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                  [32m+[0m[0m privateDnsZone-Backup = {
                      [32m+[0m[0m value = "[parameters('azureSiteRecoveryBackupPrivateDnsZoneID')]"
                    }
                  [32m+[0m[0m privateDnsZone-Blob   = {
                      [32m+[0m[0m value = "[parameters('azureSiteRecoveryBlobPrivateDnsZoneID')]"
                    }
                  [32m+[0m[0m privateDnsZone-Queue  = {
                      [32m+[0m[0m value = "[parameters('azureSiteRecoveryQueuePrivateDnsZoneID')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/af783da1-4ad1-42be-800d-d19c70038820"
          [32m+[0m[0m reference_id         = "DINE-Private-DNS-Azure-Site-Recovery-Backup"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy auditing, Alert, TDE and SQL vulnerability to SQL Databases when it not exist in the deployment. Superseded by https://www.azadvertizer.net/azpolicyinitiativesadvertizer/Deploy-Sql-Security_20240529.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Deploy SQL Database built-in SQL security configuration"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "Deploy-Sql-Security_20240529"
              [32m+[0m[0m version              = "1.0.0-deprecated"
            }
        )
      [32m+[0m[0m name                = "Deploy-Sql-Security"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m SqlDbAuditingSettingsDeploySqlSecurityEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy auditing settings to SQL Database when it not exist in the deployment"
                      [32m+[0m[0m displayName = "Deploy SQL database auditing settings"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
                      [32m+[0m[0m displayName = "Deploy SQL Database security Alert Policies configuration with email admin accounts"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbTdeDeploySqlSecurityEffect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy the Transparent Data Encryption when it is not enabled in the deployment"
                      [32m+[0m[0m displayName = "Deploy SQL Database Transparent Data Encryption "
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. To the specific  storage account in the parameters"
                      [32m+[0m[0m displayName = "Deploy SQL Database vulnerability Assessments"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsEmail                        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The email address to send alerts"
                      [32m+[0m[0m displayName = "The email address to send alerts"
                    }
                  [32m+[0m[0m type     = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsStorageID                    = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The storage account ID to store assessments"
                      [32m+[0m[0m displayName = "The storage account ID to store assessments"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbTdeDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f"
          [32m+[0m[0m reference_id         = "SqlDbTdeDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies"
          [32m+[0m[0m reference_id         = "SqlDbSecurityAlertPoliciesDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbAuditingSettingsDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings"
          [32m+[0m[0m reference_id         = "SqlDbAuditingSettingsDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m value = "[parameters('SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect')]"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments"
          [32m+[0m[0m reference_id         = "SqlDbVulnerabilityAssessmentsDeploySqlSecurity"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security_20240529"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deploy auditing, Alert, TDE and SQL vulnerability to SQL Databases when it not exist in the deployment"
      [32m+[0m[0m display_name        = "Deploy SQL Database built-in SQL security configuration"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m replacesPolicy       = "Deploy-Sql-Security"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Deploy-Sql-Security_20240529"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m SqlDbAuditingSettingsDeploySqlSecurityEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy auditing settings to SQL Database when it not exist in the deployment"
                      [32m+[0m[0m displayName = "Deploy SQL database auditing settings"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
                      [32m+[0m[0m displayName = "Deploy SQL Database security Alert Policies configuration with email admin accounts"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbTdeDeploySqlSecurityEffect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy the Transparent Data Encryption when it is not enabled in the deployment"
                      [32m+[0m[0m displayName = "Deploy SQL Database Transparent Data Encryption "
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. To the specific  storage account in the parameters"
                      [32m+[0m[0m displayName = "Deploy SQL Database vulnerability Assessments"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m vulnerabilityAssessmentsEmail                        = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The email address to send alerts"
                      [32m+[0m[0m displayName = "The email address to send alerts"
                    }
                  [32m+[0m[0m type     = "Array"
                }
              [32m+[0m[0m vulnerabilityAssessmentsStorageID                    = {
                  [32m+[0m[0m metadata = {
                      [32m+[0m[0m description = "The storage account ID to store assessments"
                      [32m+[0m[0m displayName = "The storage account ID to store assessments"
                    }
                  [32m+[0m[0m type     = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbTdeDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f"
          [32m+[0m[0m reference_id         = "SqlDbTdeDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies"
          [32m+[0m[0m reference_id         = "SqlDbSecurityAlertPoliciesDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlDbAuditingSettingsDeploySqlSecurityEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings"
          [32m+[0m[0m reference_id         = "SqlDbAuditingSettingsDeploySqlSecurity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m value = "[parameters('SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect')]"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                      [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments_20230706"
          [32m+[0m[0m reference_id         = "SqlDbVulnerabilityAssessmentsDeploySqlSecurity"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce Azure Compute Security Benchmark compliance auditing for Windows and Linux virtual machines."
      [32m+[0m[0m display_name        = "Enforce Azure Compute Security Benchmark compliance auditing"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Guest Configuration"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-ACSB"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m includeArcMachines = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "true",
                      [32m+[0m[0m "false",
                    ]
                  [32m+[0m[0m defaultValue  = "true"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "By selecting this option, you agree to be charged monthly per Arc connected machine."
                      [32m+[0m[0m displayName = "Include Arc connected servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3cf2ab00-13f1-4d0c-8971-2ac904541a7e"
          [32m+[0m[0m reference_id         = "GcIdentity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/331e8ea8-378a-410f-a2e5-ae22f38bb0da"
          [32m+[0m[0m reference_id         = "GcLinux"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/385f5831-96d4-41db-9a3c-cd3af78aaae6"
          [32m+[0m[0m reference_id         = "GcWindows"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m IncludeArcMachines = {
                      [32m+[0m[0m value = "[parameters('includeArcMachines')]"
                    }
                  [32m+[0m[0m effect             = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/72650e9f-97bc-4b2a-ab5f-9781a9fcecbc"
          [32m+[0m[0m reference_id         = "WinAcsb"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m IncludeArcMachines = {
                      [32m+[0m[0m value = "[parameters('includeArcMachines')]"
                    }
                  [32m+[0m[0m effect             = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fc9b3da7-8347-4380-8e70-0a0361d8dedd"
          [32m+[0m[0m reference_id         = "LinAcsb"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce policies in the Decommissioned Landing Zone."
      [32m+[0m[0m display_name        = "Enforce policies in the Decommissioned Landing Zone"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Decommissioned"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-ALZ-Decomm"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m listOfResourceTypesAllowed = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Allowed resource types in the Decommissioned landing zone, default is none."
                      [32m+[0m[0m displayName = "Allowed resource types in the Decommissioned landing zone"
                      [32m+[0m[0m strongType  = "resourceTypes"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m listOfResourceTypesAllowed = {
                      [32m+[0m[0m value = "[parameters('listOfResourceTypesAllowed')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a08ec900-254a-4555-9bf5-e42af04b5c5c"
          [32m+[0m[0m reference_id         = "DecomDenyResources"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown"
          [32m+[0m[0m reference_id         = "DecomShutdownMachines"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce policies in the Sandbox Landing Zone."
      [32m+[0m[0m display_name        = "Enforce policies in the Sandbox Landing Zone"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Sandbox"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-ALZ-Sandbox"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effectDenyVnetPeering         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectNotAllowedResources     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m listOfResourceTypesNotAllowed = {
                  [32m+[0m[0m defaultValue = []
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Not allowed resource types in the Sandbox landing zone, default is none."
                      [32m+[0m[0m displayName = "Not allowed resource types in the Sandbox landing zone"
                      [32m+[0m[0m strongType  = "resourceTypes"
                    }
                  [32m+[0m[0m type         = "Array"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                        = {
                      [32m+[0m[0m value = "[parameters('effectNotAllowedResources')]"
                    }
                  [32m+[0m[0m listOfResourceTypesNotAllowed = {
                      [32m+[0m[0m value = "[parameters('listOfResourceTypesNotAllowed')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"
          [32m+[0m[0m reference_id         = "SandboxNotAllowed"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectDenyVnetPeering')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub"
          [32m+[0m[0m reference_id         = "SandboxDenyVnetPeering"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Backup"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce enhanced recovery and backup policies on assigned scopes."
      [32m+[0m[0m display_name        = "Enforce enhanced recovery and backup policies"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Backup"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Backup"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m checkAlwaysOnSoftDeleteOnly = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m defaultValue  = false
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This parameter checks if Soft Delete is 'Locked' for Backup Vaults in scope. Selecting 'true' will mark only vaults with Soft Delete 'AlwaysOn' as compliant. Selecting 'false' will mark vaults that have Soft Delete either 'On' or 'AlwaysOn' as compliant."
                      [32m+[0m[0m displayName = "CheckAlwaysOnSoftDeleteOnly"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m checkLockedImmutabilityOnly = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m true,
                      [32m+[0m[0m false,
                    ]
                  [32m+[0m[0m defaultValue  = false
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This parameter checks if Immutability is locked for Backup Vaults in scope. Selecting 'true' will mark only vaults with Immutability 'Locked' as compliant. Selecting 'false' will mark vaults that have Immutability either 'Enabled' or 'Locked' as compliant."
                      [32m+[0m[0m displayName = "checkLockedImmutabilityOnly"
                    }
                  [32m+[0m[0m type          = "Boolean"
                }
              [32m+[0m[0m effect                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy."
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m checkLockedImmutabiltyOnly = {
                      [32m+[0m[0m value = "[parameters('checkLockedImmutabilityOnly')]"
                    }
                  [32m+[0m[0m effect                     = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2514263b-bc0d-4b06-ac3e-f262c0979018"
          [32m+[0m[0m reference_id         = "BackupBVault-Immutability"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m checkLockedImmutabilityOnly = {
                      [32m+[0m[0m value = "[parameters('checkLockedImmutabilityOnly')]"
                    }
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d6f6f560-14b7-49a4-9fc8-d2c3a9807868"
          [32m+[0m[0m reference_id         = "BackupRVault-Immutability"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m checkAlwaysOnSoftDeleteOnly = {
                      [32m+[0m[0m value = "[parameters('checkAlwaysOnSoftDeleteOnly')]"
                    }
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9798d31d-6028-4dee-8643-46102185c016"
          [32m+[0m[0m reference_id         = "BackupBVault-SoftDelete"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m checkAlwaysOnSoftDeleteOnly = {
                      [32m+[0m[0m value = "[parameters('checkAlwaysOnSoftDeleteOnly')]"
                    }
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/31b8092a-36b8-434b-9af7-5ec844364148"
          [32m+[0m[0m reference_id         = "BackupRVault-SoftDelete"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c58e083e-7982-4e24-afdc-be14d312389e"
          [32m+[0m[0m reference_id         = "BackupBVault-MUA"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c7031eab-0fc0-4cd9-acd0-4497bd66d91a"
          [32m+[0m[0m reference_id         = "BackupRVault-MUA"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Choose either Deploy if not exist and append in combination with audit or Select Deny in the Policy effect. Superseded by https://www.azadvertizer.net/azpolicyinitiativesadvertizer/Enforce-EncryptTransit_20240509.html"
      [32m+[0m[0m display_name        = "[Deprecated]: Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Encryption"
              [32m+[0m[0m deprecated           = true
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m supersededBy         = "Enforce-EncryptTransit_20240509"
              [32m+[0m[0m version              = "2.1.0-deprecated"
            }
        )
      [32m+[0m[0m name                = "Enforce-EncryptTransit"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m AKSIngressHttpsOnlyEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy enforces HTTPS ingress in a Kubernetes cluster. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For instructions on using this policy, visit https://aka.ms/kubepolicydoc."
                      [32m+[0m[0m displayName = "AKS Service. Enforce HTTPS ingress in Kubernetes cluster"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m APIAppServiceHttpsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service API App. API App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceHttpEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Append the AppService sites object to ensure that min Tls version is set to required TLS version. Please note Append does not enforce compliance use then deny."
                      [32m+[0m[0m displayName = "App Service. Appends the AppService sites config WebApp, APIApp, Function App with TLS version selected below"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceTlsVersionEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service. Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny."
                      [32m+[0m[0m displayName = "App Service. Appends the AppService WebApp, APIApp, Function App to enable https only"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceminTlsVersion           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service. Select version  minimum TLS version for a  Web App config to enforce"
                      [32m+[0m[0m displayName = "App Service. Select version minimum TLS Web App config"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ContainerAppsHttpsOnlyEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling 'allowInsecure' will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps."
                      [32m+[0m[0m displayName = "Container Apps should only be accessible over HTTPS"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionLatestTlsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
                      [32m+[0m[0m displayName = "App Service Function App. Latest TLS version should be used in your Function App"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionServiceHttpsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service Function App. Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service Function App. Function App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLEnableSSLDeployEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "MySQL database servers. Deploy if not exist set minimum TLS version Azure Database for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLEnableSSLEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "MySQL database servers. Enforce SSL connection should be enabled for MySQL database servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLminimalTlsVersion            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "MySQL database servers. Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLEnableSSLDeployEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Deploy if not exist set minimum TLS version Azure Database for PostgreSQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLEnableSSLEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Enforce SSL connection should be enabled for PostgreSQL database servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLminimalTlsVersion       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "PostgreSQL database servers. Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisMinTlsVersion                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for a Azure Cache for Redis to enforce"
                      [32m+[0m[0m displayName = "Azure Cache for Redis.Select version minimum TLS for Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisTLSDeployEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure Cache for Redis. Deploy a specific min TLS version requirement and enforce SSL Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisTLSEffect                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Cache for Redis. Audit enabling of only connections via SSL to Azure Cache for Redis. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking."
                      [32m+[0m[0m displayName = "Azure Cache for Redis. Only secure connections to your Azure Cache for Redis should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceMinTlsVersion   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for Azure Managed Instanceto to  enforce"
                      [32m+[0m[0m displayName = "Azure Managed Instance.Select version minimum TLS for Azure Managed Instance"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceTLSDeployEffect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure Managed Instance. Deploy a specific min TLS version requirement and enforce SSL on SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceTLSEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
                      [32m+[0m[0m displayName = "SQL Managed Instance should have the minimal TLS version of 1.2"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerTLSDeployEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure SQL Database. Deploy a specific min TLS version requirement and enforce SSL on SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerTLSEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
                      [32m+[0m[0m displayName = "Azure SQL Database should have the minimal TLS version of 1.2"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerminTlsVersion            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for Azure SQL Database to enforce"
                      [32m+[0m[0m displayName = "Azure SQL Database.Select version minimum TLS for Azure SQL Database"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageDeployHttpsEnabledEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
                      [32m+[0m[0m displayName = "Azure Storage Account. Deploy Secure transfer to storage accounts should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageHttpsEnabledEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
                      [32m+[0m[0m displayName = "Azure Storage Account. Secure transfer to storage accounts should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageminimumTlsVersion          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLS1_0",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version on Azure Storage Account to enforce"
                      [32m+[0m[0m displayName = "Storage Account select minimum TLS version"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WebAppServiceHttpsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service Web App. Web Application should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WebAppServiceLatestTlsEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
                      [32m+[0m[0m displayName = "App Service Web App. Latest TLS version should be used in your Web App"
                    }
                  [32m+[0m[0m type          = "String"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AppServiceHttpEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly"
          [32m+[0m[0m reference_id         = "AppServiceHttpEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m value = "[parameters('AppServiceTlsVersionEffect')]"
                    }
                  [32m+[0m[0m minTlsVersion = {
                      [32m+[0m[0m value = "[parameters('AppServiceminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS"
          [32m+[0m[0m reference_id         = "AppServiceminTlsVersion"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionLatestTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f9d614c5-c173-4d56-95a7-b4437057d193"
          [32m+[0m[0m reference_id         = "FunctionLatestTlsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('WebAppServiceLatestTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b"
          [32m+[0m[0m reference_id         = "WebAppServiceLatestTlsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('APIAppServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http"
          [32m+[0m[0m reference_id         = "APIAppServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http"
          [32m+[0m[0m reference_id         = "FunctionServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('WebAppServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http"
          [32m+[0m[0m reference_id         = "WebAppServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AKSIngressHttpsOnlyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d"
          [32m+[0m[0m reference_id         = "AKSIngressHttpsOnlyEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('MySQLEnableSSLDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('MySQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement"
          [32m+[0m[0m reference_id         = "MySQLEnableSSLDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('MySQLEnableSSLEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('MySQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http"
          [32m+[0m[0m reference_id         = "MySQLEnableSSLEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLEnableSSLDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement"
          [32m+[0m[0m reference_id         = "PostgreSQLEnableSSLDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLEnableSSLEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http"
          [32m+[0m[0m reference_id         = "PostgreSQLEnableSSLEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('RedisTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('RedisMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement"
          [32m+[0m[0m reference_id         = "RedisTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('RedisTLSDeployEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort"
          [32m+[0m[0m reference_id         = "RedisdisableNonSslPort"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('RedisTLSEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('RedisMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http"
          [32m+[0m[0m reference_id         = "RedisDenyhttps"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS"
          [32m+[0m[0m reference_id         = "SQLManagedInstanceTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceTLSEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS"
          [32m+[0m[0m reference_id         = "SQLManagedInstanceTLSEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLServerTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLServerminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS"
          [32m+[0m[0m reference_id         = "SQLServerTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLServerTLSEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLServerminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS"
          [32m+[0m[0m reference_id         = "SQLServerTLSEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('StorageHttpsEnabledEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('StorageMinimumTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS"
          [32m+[0m[0m reference_id         = "StorageHttpsEnabledEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('StorageDeployHttpsEnabledEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('StorageMinimumTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement"
          [32m+[0m[0m reference_id         = "StorageDeployHttpsEnabledEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ContainerAppsHttpsOnlyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
          [32m+[0m[0m reference_id         = "ContainerAppsHttpsOnlyEffect"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit_20240509"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Choose either Deploy if not exist and append in combination with audit or Select Deny in the Policy effect. Deny polices shift left. Deploy if not exist and append enforce but can be changed, and because missing existence condition require then the combination of Audit. "
      [32m+[0m[0m display_name        = "Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Encryption"
              [32m+[0m[0m replacesPolicy       = "Enforce-EncryptTransit"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-EncryptTransit_20240509"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m AKSIngressHttpsOnlyEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "This policy enforces HTTPS ingress in a Kubernetes cluster. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For instructions on using this policy, visit https://aka.ms/kubepolicydoc."
                      [32m+[0m[0m displayName = "AKS Service. Enforce HTTPS ingress in Kubernetes cluster"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m APIAppServiceHttpsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service API App. API App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceHttpEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Append the AppService sites object to ensure that min Tls version is set to required TLS version. Please note Append does not enforce compliance use then deny."
                      [32m+[0m[0m displayName = "App Service. Appends the AppService sites config WebApp, APIApp, Function App with TLS version selected below"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceTlsVersionEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service. Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny."
                      [32m+[0m[0m displayName = "App Service. Appends the AppService WebApp, APIApp, Function App to enable https only"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AppServiceminTlsVersion           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service. Select version  minimum TLS version for a  Web App config to enforce"
                      [32m+[0m[0m displayName = "App Service. Select version minimum TLS Web App config"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m ContainerAppsHttpsOnlyEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling 'allowInsecure' will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps."
                      [32m+[0m[0m displayName = "Container Apps should only be accessible over HTTPS"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionAppTlsEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service Function App. Periodically, newer versions are released for TLS either due to security flaws, include additional functionality, and enhance speed. Upgrade to the latest TLS version for Function apps to take advantage of security fixes, if any, and/or new functionalities of the latest version."
                      [32m+[0m[0m displayName = "App Service Function App. Configure Function apps to use the latest TLS version."
                    }
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m FunctionLatestTlsEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
                      [32m+[0m[0m displayName = "App Service Function App. Latest TLS version should be used in your Function App"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m FunctionServiceHttpsEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "App Service Function App. Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service Function App. Function App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m LogicAppTlsEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m MySQLEnableSSLDeployEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "MySQL database servers. Deploy if not exist set minimum TLS version Azure Database for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLEnableSSLEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "MySQL database servers. Enforce SSL connection should be enabled for MySQL database servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLminimalTlsVersion            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "MySQL database servers. Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLEnableSSLDeployEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Deploy if not exist set minimum TLS version Azure Database for PostgreSQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLEnableSSLEffect         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Enforce SSL connection should be enabled for PostgreSQL database servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLminimalTlsVersion       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_0",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLSEnforcementDisabled",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "PostgreSQL database servers. Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      [32m+[0m[0m displayName = "PostgreSQL database servers. Select version minimum TLS for MySQL server"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisMinTlsVersion                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for a Azure Cache for Redis to enforce"
                      [32m+[0m[0m displayName = "Azure Cache for Redis.Select version minimum TLS for Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisTLSDeployEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Append",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Append"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure Cache for Redis. Deploy a specific min TLS version requirement and enforce SSL Azure Cache for Redis"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m RedisTLSEffect                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Azure Cache for Redis. Audit enabling of only connections via SSL to Azure Cache for Redis. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking."
                      [32m+[0m[0m displayName = "Azure Cache for Redis. Only secure connections to your Azure Cache for Redis should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceMinTlsVersion   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for Azure Managed Instanceto to  enforce"
                      [32m+[0m[0m displayName = "Azure Managed Instance.Select version minimum TLS for Azure Managed Instance"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceTLSDeployEffect = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure Managed Instance. Deploy a specific min TLS version requirement and enforce SSL on SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLManagedInstanceTLSEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
                      [32m+[0m[0m displayName = "SQL Managed Instance should have the minimal TLS version of 1.2"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerTLSDeployEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
                      [32m+[0m[0m displayName = "Azure SQL Database. Deploy a specific min TLS version requirement and enforce SSL on SQL servers"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerTLSEffect                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
                      [32m+[0m[0m displayName = "Azure SQL Database should have the minimal TLS version of 1.2"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SQLServerminTlsVersion            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "1.2",
                      [32m+[0m[0m "1.0",
                      [32m+[0m[0m "1.1",
                    ]
                  [32m+[0m[0m defaultValue  = "1.2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version for Azure SQL Database to enforce"
                      [32m+[0m[0m displayName = "Azure SQL Database.Select version minimum TLS for Azure SQL Database"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageDeployHttpsEnabledEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
                      [32m+[0m[0m displayName = "Azure Storage Account. Deploy Secure transfer to storage accounts should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageminimumTlsVersion          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "TLS1_2",
                      [32m+[0m[0m "TLS1_1",
                      [32m+[0m[0m "TLS1_0",
                    ]
                  [32m+[0m[0m defaultValue  = "TLS1_2"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Select version  minimum TLS version on Azure Storage Account to enforce"
                      [32m+[0m[0m displayName = "Storage Account select minimum TLS version"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WebAppServiceHttpsEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
                      [32m+[0m[0m displayName = "App Service Web App. Web Application should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy."
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WebAppServiceLatestTlsEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
                      [32m+[0m[0m displayName = "App Service Web App. Latest TLS version should be used in your Web App"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m appServiceAppSlotTls              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppSlotsHttps           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsHttps               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsTls                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceTls                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerAppsHttps                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubMinTls                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppHttps                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppSlotsHttps             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppSlotsTls               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m logicAppHttpsEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlDbTls                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlManagedTlsVersion              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsTls                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseTlsVersion                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AppServiceHttpEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly"
          [32m+[0m[0m reference_id         = "AppServiceHttpEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m value = "[parameters('AppServiceTlsVersionEffect')]"
                    }
                  [32m+[0m[0m minTlsVersion = {
                      [32m+[0m[0m value = "[parameters('AppServiceminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS"
          [32m+[0m[0m reference_id         = "AppServiceminTlsVersion"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionLatestTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f9d614c5-c173-4d56-95a7-b4437057d193"
          [32m+[0m[0m reference_id         = "FunctionLatestTlsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('WebAppServiceLatestTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b"
          [32m+[0m[0m reference_id         = "WebAppServiceLatestTlsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('APIAppServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http"
          [32m+[0m[0m reference_id         = "APIAppServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http"
          [32m+[0m[0m reference_id         = "FunctionServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('WebAppServiceHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http"
          [32m+[0m[0m reference_id         = "WebAppServiceHttpsEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AKSIngressHttpsOnlyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d"
          [32m+[0m[0m reference_id         = "AKSIngressHttpsOnlyEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('MySQLEnableSSLDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('MySQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement"
          [32m+[0m[0m reference_id         = "MySQLEnableSSLDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('MySQLEnableSSLEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('MySQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http"
          [32m+[0m[0m reference_id         = "MySQLEnableSSLEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLEnableSSLDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement"
          [32m+[0m[0m reference_id         = "PostgreSQLEnableSSLDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLEnableSSLEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLminimalTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http"
          [32m+[0m[0m reference_id         = "PostgreSQLEnableSSLEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('RedisTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('RedisMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement"
          [32m+[0m[0m reference_id         = "RedisTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('RedisTLSDeployEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort"
          [32m+[0m[0m reference_id         = "RedisdisableNonSslPort"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('RedisTLSEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('RedisMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http"
          [32m+[0m[0m reference_id         = "RedisDenyhttps"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS"
          [32m+[0m[0m reference_id         = "SQLManagedInstanceTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceTLSEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLManagedInstanceMinTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS"
          [32m+[0m[0m reference_id         = "SQLManagedInstanceTLSEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLServerTLSDeployEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLServerminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS"
          [32m+[0m[0m reference_id         = "SQLServerTLSDeployEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('SQLServerTLSEffect')]"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m value = "[parameters('SQLServerminTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS"
          [32m+[0m[0m reference_id         = "SQLServerTLSEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('StorageDeployHttpsEnabledEffect')]"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m value = "[parameters('StorageMinimumTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement"
          [32m+[0m[0m reference_id         = "StorageDeployHttpsEnabledEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ContainerAppsHttpsOnlyEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
          [32m+[0m[0m reference_id         = "ContainerAppsHttpsOnlyEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('FunctionAppTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f01f1c7-539c-49b5-9ef4-d4ffa37d22e0"
          [32m+[0m[0m reference_id         = "Dine-FunctionApp-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('LogicAppTlsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-LogicApp-TLS"
          [32m+[0m[0m reference_id         = "Deploy-LogicApp-TLS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('logicAppHttpsEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApps-Without-Https"
          [32m+[0m[0m reference_id         = "Deny-LogicApp-Without-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppSlotsTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fa3a6357-c6d6-4120-8429-855577ec0063"
          [32m+[0m[0m reference_id         = "Dine-Function-Apps-Slots-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae44c1d1-0df2-4ca9-98fa-a3d3ae5b409d"
          [32m+[0m[0m reference_id         = "Dine-AppService-Apps-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a4af4a39-4135-47fb-b175-47fbdf85311d"
          [32m+[0m[0m reference_id         = "Deny-AppService-Apps-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d6545c6b-dd9d-4265-91e6-0b451e2f1c50"
          [32m+[0m[0m reference_id         = "Deny-AppService-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppSlotTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/014664e7-e348-41a3-aeb9-566e4ff6a9df"
          [32m+[0m[0m reference_id         = "DINE-AppService-AppSlotTls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppSlotsHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e5dbe3f-2702-4ffc-8b1e-0cae008a5c71"
          [32m+[0m[0m reference_id         = "Deny-FuncAppSlots-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab"
          [32m+[0m[0m reference_id         = "Deny-FunctionApp-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppSlotsHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae1b9a8c-dfce-4605-bd91-69213b4a26fc"
          [32m+[0m[0m reference_id         = "Deny-AppService-Slots-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerAppsHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
          [32m+[0m[0m reference_id         = "Deny-ContainerApps-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubMinTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-minTLS"
          [32m+[0m[0m reference_id         = "Deny-EH-minTLS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlManagedTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8793640-60f7-487c-b5c3-1d37215905c4"
          [32m+[0m[0m reference_id         = "Deny-Sql-Managed-Tls-Version"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlDbTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/32e6bbec-16b6-44c2-be37-c5b672d103cf"
          [32m+[0m[0m reference_id         = "Deny-Sql-Db-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fe83a0eb-a853-422d-aac2-1bffd182c5d0"
          [32m+[0m[0m reference_id         = "Deny-Storage-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cb3738a6-82a2-4a18-b87b-15217b9deff4"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Tls-Version"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Encryption-CMK"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Deny or Audit resources without Encryption with a customer-managed key (CMK)"
      [32m+[0m[0m display_name        = "Deny or Audit resources without Encryption with a customer-managed key (CMK)"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                ]
              [32m+[0m[0m category             = "Encryption"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "3.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Encryption-CMK"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m ACRCmkEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys to manage the encryption at rest of the contents of your registries. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/acr/CMK."
                      [32m+[0m[0m displayName = "Container registries should be encrypted with a customer-managed key (CMK)"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AksCmkEffect                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Encrypting OS and data disks using customer-managed keys provides more control and greater flexibility in key management. This is a common requirement in many regulatory and industry compliance standards."
                      [32m+[0m[0m displayName = "Azure Kubernetes Service clusters both operating systems and data disks should be encrypted by customer-managed keys"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m AutomationAccountCmkEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m AzureBatchCMKEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys (CMKs) to manage the encryption at rest of your Batch account's data. By default, customer data is encrypted with service-managed keys, but CMKs are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/Batch-CMK."
                      [32m+[0m[0m displayName = "Azure Batch account should use customer-managed keys to encrypt data"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m BackupCmkEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m CognitiveServicesCMKEffect   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data stored in Cognitive Services to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/cosmosdb-cmk."
                      [32m+[0m[0m displayName = "Cognitive Services accounts should enable data encryption with a customer-managed key (CMK)"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m CosmosCMKEffect              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys to manage the encryption at rest of your Azure Cosmos DB. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/cosmosdb-cmk."
                      [32m+[0m[0m displayName = "Azure Cosmos DB accounts should use customer-managed keys to encrypt data at rest"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m DataBoxCMKEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use a customer-managed key to control the encryption of the device unlock password for Azure Data Box. Customer-managed keys also help manage access to the device unlock password by the Data Box service in order to prepare the device and copy data in an automated manner. The data on the device itself is already encrypted at rest with Advanced Encryption Standard 256-bit encryption, and the device unlock password is encrypted by default with a Microsoft managed key."
                      [32m+[0m[0m displayName = "Azure Data Box jobs should use a customer-managed key to encrypt the device unlock password"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m EncryptedVMDisksEffect       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Virtual machines without an enabled disk encryption will be monitored by Azure Security Center as recommendations."
                      [32m+[0m[0m displayName = "Disk encryption should be applied on virtual machines"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m HealthcareAPIsCMKEffect      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use a customer-managed key to control the encryption at rest of the data stored in Azure API for FHIR when this is a regulatory or compliance requirement. Customer-managed keys also deliver double encryption by adding a second layer of encryption on top of the default one done with service-managed keys."
                      [32m+[0m[0m displayName = "Azure API for FHIR should use a customer-managed key (CMK) to encrypt data at rest"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m MySQLCMKEffect               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys to manage the encryption at rest of your MySQL servers. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management."
                      [32m+[0m[0m displayName = "Azure MySQL servers bring your own key data protection should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m PostgreSQLCMKEffect          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "AuditIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "AuditIfNotExists"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys to manage the encryption at rest of your PostgreSQL servers. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management."
                      [32m+[0m[0m displayName = "Azure PostgreSQL servers bring your own key data protection should be enabled"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SqlServerTDECMKEffect        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Implementing Transparent Data Encryption (TDE) with your own key provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties. This recommendation applies to organizations with a related compliance requirement."
                      [32m+[0m[0m displayName = "SQL servers should use customer-managed keys to encrypt data at rest"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StorageCMKEffect             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Secure your storage account with greater flexibility using customer-managed keys (CMKs). When you specify a CMK, that key is used to protect and control access to the key that encrypts your data. Using CMKs provides additional capabilities to control rotation of the key encryption key or cryptographically erase data."
                      [32m+[0m[0m displayName = "Storage accounts should use customer-managed key (CMK) for encryption, no deny as this would result in not able to create storage account because the first need of MSI for encryption"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m StreamAnalyticsCMKEffect     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys when you want to securely store any metadata and private data assets of your Stream Analytics jobs in your storage account. This gives you total control over how your Stream Analytics data is encrypted."
                      [32m+[0m[0m displayName = "Azure Stream Analytics jobs should use customer-managed keys to encrypt data"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m SynapseWorkspaceCMKEffect    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Use customer-managed keys to control the encryption at rest of the data stored in Azure Synapse workspaces. Customer-managed keys deliver double encryption by adding a second layer of encryption on top of the default encryption with service-managed keys."
                      [32m+[0m[0m displayName = "Azure Synapse workspaces should use customer-managed keys to encrypt data at rest"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m WorkspaceCMKEffect           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Manage encryption at rest of your Azure Machine Learning workspace data with customer-managed keys (CMK). By default, customer data is encrypted with service-managed keys, but CMKs are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/azureml-workspaces-cmk."
                      [32m+[0m[0m displayName = "Azure Machine Learning workspaces should be encrypted with a customer-managed key (CMK)"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m adfCmk                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adxCmk                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveSearchCmk           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerInstanceCmk         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubNamespacesCmk        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubPremiumCmk           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m osAndDataDiskCmk             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m serviceBusDenyCmk            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlManagedCmk                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsEncryptionCmk = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageQueueCmk              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageTableCmk              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('ACRCmkEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580"
          [32m+[0m[0m reference_id         = "ACRCmkDeny"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AksCmkEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7d7be79c-23ba-4033-84dd-45e2a5ccdd67"
          [32m+[0m[0m reference_id         = "AksCmkDeny"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('WorkspaceCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ba769a63-b8cc-4b2d-abf6-ac33c7204be8"
          [32m+[0m[0m reference_id         = "WorkspaceCMK"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('CognitiveServicesCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/67121cc7-ff39-4ab8-b7e3-95b84dab487d"
          [32m+[0m[0m reference_id         = "CognitiveServicesCMK"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('CosmosCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f905d99-2ab7-462c-a6b0-f709acca6c8f"
          [32m+[0m[0m reference_id         = "CosmosCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('DataBoxCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86efb160-8de7-451d-bc08-5d475b0aadae"
          [32m+[0m[0m reference_id         = "DataBoxCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('StreamAnalyticsCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/87ba29ef-1ab3-4d82-b763-87fcd4f531f7"
          [32m+[0m[0m reference_id         = "StreamAnalyticsCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SynapseWorkspaceCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f7d52b2d-e161-4dfa-a82b-55e564167385"
          [32m+[0m[0m reference_id         = "SynapseWorkspaceCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('StorageCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6fac406b-40ca-413b-bf8e-0bf964659c25"
          [32m+[0m[0m reference_id         = "StorageCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('MySQLCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83cef61d-dbd1-4b20-a4fc-5fbc7da10833"
          [32m+[0m[0m reference_id         = "MySQLCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('PostgreSQLCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/18adea5e-f416-4d0f-8aa8-d24321e3e274"
          [32m+[0m[0m reference_id         = "PostgreSQLCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('SqlServerTDECMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0a370ff3-6cab-4e85-8995-295fd854c5b8"
          [32m+[0m[0m reference_id         = "SqlServerTDECMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('HealthcareAPIsCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/051cba44-2429-45b9-9649-46cec11c7119"
          [32m+[0m[0m reference_id         = "HealthcareAPIsCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AzureBatchCMKEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/99e9ccd8-3db9-4592-b0d1-14b1715a4d8a"
          [32m+[0m[0m reference_id         = "AzureBatchCMKEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('EncryptedVMDisksEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0961003e-5a0a-4549-abde-af6a37f2724d"
          [32m+[0m[0m reference_id         = "EncryptedVMDisksEffect"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('AutomationAccountCmkEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/56a5ee18-2ae6-4810-86f7-18e39ce5629b"
          [32m+[0m[0m reference_id         = "Deny-Aa-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('BackupCmkEffect')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2e94d99a-8a36-4563-bc77-810d8893b671"
          [32m+[0m[0m reference_id         = "Deny-Backup-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveSearchCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/76a56461-9dc0-40f0-82f5-2453283afa2f"
          [32m+[0m[0m reference_id         = "Deny-CognitiveSearch-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('osAndDataDiskCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/702dd420-7fcc-42c5-afe8-4026edd20fe0"
          [32m+[0m[0m reference_id         = "Deny-OsAndDataDisk-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerInstanceCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0aa61e00-0a01-4a3c-9945-e93cffedf0e6"
          [32m+[0m[0m reference_id         = "Deny-ContainerInstance-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/81e74cea-30fd-40d5-802f-d72103c2aaaa"
          [32m+[0m[0m reference_id         = "Deny-ADX-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4ec52d6d-beb7-40c4-9a9e-fe753254690e"
          [32m+[0m[0m reference_id         = "Deny-Adf-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubNamespacesCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a1ad735a-e96f-45d2-a7b2-9a4932cab7ec"
          [32m+[0m[0m reference_id         = "Deny-EH-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubPremiumCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-Premium-CMK"
          [32m+[0m[0m reference_id         = "Deny-EH-Premium-CMK"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusDenyCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/295fc8b1-dc9f-4f53-9c61-3f313ceab40a"
          [32m+[0m[0m reference_id         = "Deny-Sb-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlManagedCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ac01ad65-10e5-46df-bdd9-6b0cad13e1d2"
          [32m+[0m[0m reference_id         = "Deny-Sql-Managed-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageTableCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7c322315-e26d-4174-a99e-f49d351b4688"
          [32m+[0m[0m reference_id         = "Deny-Storage-Table-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsEncryptionCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b5ec538c-daa0-4006-8596-35468b9148e8"
          [32m+[0m[0m reference_id         = "Deny-Storage-Encryption-Cmk"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageQueueCmk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f0e5abd0-2554-4736-b7c0-4ffef23475ef"
          [32m+[0m[0m reference_id         = "Deny-Storage-Queue-Cmk"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-APIM"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures API Management is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for API Management"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "API Management"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-APIM"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m apiSubscriptionScope           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimApiBackendCertValidation   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimCallApiAuthn               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimDirectApiEndpoint          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimDisablePublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimEncryptedProtocols         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimSecrets                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimSkuVnet                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimTls                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m apimVnetUsage                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m minimumApiVersion              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimSecrets')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f1cc7827-022c-473e-836e-5a51cae0b249"
          [32m+[0m[0m reference_id         = "Deny-Apim-without-Kv"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimVnetUsage')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ef619a2c-cc4d-4d03-b2ba-8c94a834d85b"
          [32m+[0m[0m reference_id         = "Deny-Apim-without-Vnet"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimTls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-APIM-TLS"
          [32m+[0m[0m reference_id         = "Deny-APIM-TLS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimEncryptedProtocols')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ee7495e7-3ba7-40b6-bfee-c29e22cc75d4"
          [32m+[0m[0m reference_id         = "Deny-Apim-Protocols"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimCallApiAuthn')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c15dcc82-b93c-4dcb-9332-fbf121685b54"
          [32m+[0m[0m reference_id         = "Deny-Apim-Authn"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimDirectApiEndpoint')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b741306c-968e-4b67-b916-5675e5c709f4"
          [32m+[0m[0m reference_id         = "Deny-Apim-Direct-Endpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimApiBackendCertValidation')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/92bb331d-ac71-416a-8c91-02f2cb734ce4"
          [32m+[0m[0m reference_id         = "Deny-Apim-Cert-Validation"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimDisablePublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7ca8c8ac-3a6e-493d-99ba-c5fa35347ff2"
          [32m+[0m[0m reference_id         = "Dine-Apim-Public-NetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apimSkuVnet')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/73ef9241-5d81-4cd4-b483-8443d1730fe5"
          [32m+[0m[0m reference_id         = "Deny-Apim-Sku-Vnet"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('minimumApiVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/549814b6-3212-4203-bdc8-1548d342fb67"
          [32m+[0m[0m reference_id         = "Deny-Apim-Version"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('apiSubscriptionScope')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3aa03346-d8c5-4994-a5bc-7652c2a2aef1"
          [32m+[0m[0m reference_id         = "Deny-Api-subscription-scope"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-AppServices"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures App Service is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for App Service"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "App Service"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-AppServices"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m appServiceAppHttps                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppModifyPublicNetworkAccess    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppSlotsRemoteDebugging         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsModifyPublicNetworkAccess   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsRemoteDebugging             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsRfc                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceAppsVnetRouting                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceByoc                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceDisableLocalAuth                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceDisableLocalAuthFtp             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceEnvLatestVersion                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceRfc                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceRouting                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceScmAuth                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appServiceSkuPl                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppDebugging                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppSlotsModifyHttps               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m functionAppSlotsModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceByoc')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-without-BYOC"
          [32m+[0m[0m reference_id         = "Deny-AppService-Byoc"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsRemoteDebugging')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a5e3fe8f-f6cd-4f1d-bbf6-c749754a724b"
          [32m+[0m[0m reference_id         = "Dine-AppService-Apps-Remote-Debugging"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppSlotsRemoteDebugging')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cca5adfe-626b-4cc6-8522-f5b6ed2391bd"
          [32m+[0m[0m reference_id         = "Deny-AppService-Slots-Remote-Debugging"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceEnvLatestVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/eb4d34ab-0929-491c-bbf3-61e13da19f9a"
          [32m+[0m[0m reference_id         = "Deny-AppService-Latest-Version"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsVnetRouting')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/801543d1-1953-4a90-b8b0-8cf6d41473a5"
          [32m+[0m[0m reference_id         = "Deny-AppService-Vnet-Routing"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceRfc')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f5c0bfb3-acea-47b1-b477-b0edcdf6edc1"
          [32m+[0m[0m reference_id         = "Deny-AppService-Rfc"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsRfc')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a691eacb-474d-47e4-b287-b4813ca44222"
          [32m+[0m[0m reference_id         = "Deny-AppServiceApps-Rfc"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppDebugging')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/70adbb40-e092-42d5-a6f8-71c540a5efdb"
          [32m+[0m[0m reference_id         = "DINE-FuncApp-Debugging"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceScmAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e97b776-f380-4722-a9a3-e7f0be029e79"
          [32m+[0m[0m reference_id         = "DINE-AppService-ScmAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceRouting')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5747353b-1ca9-42c1-a4dd-b874b894f3d4"
          [32m+[0m[0m reference_id         = "Deny-AppServ-Routing"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceDisableLocalAuthFtp')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/572e342c-c920-4ef5-be2e-1ed3c6a51dc5"
          [32m+[0m[0m reference_id         = "Deny-AppServ-FtpAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceSkuPl')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/546fe8d2-368d-4029-a418-6af48a7f61e5"
          [32m+[0m[0m reference_id         = "Deny-AppServ-SkuPl"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceDisableLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2c034a29-2a5f-4857-b120-f800fe5549ae"
          [32m+[0m[0m reference_id         = "DINE-AppService-LocalAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppDebugging')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25a5046c-c423-4805-9235-e844ae9ef49b"
          [32m+[0m[0m reference_id         = "DINE-AppService-Debugging"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppSlotsModifyHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/08cf2974-d178-48a0-b26d-f6b8e555748b"
          [32m+[0m[0m reference_id         = "Modify-Function-Apps-Slots-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppHttps')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0f98368e-36bc-4716-8ac2-8f8067203b63"
          [32m+[0m[0m reference_id         = "Modify-AppService-Https"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('functionAppSlotsModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/242222f3-4985-4e99-b5ef-086d6a6cb01c"
          [32m+[0m[0m reference_id         = "Modify-Function-Apps-Slots-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppsModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2374605e-3e0b-492b-9046-229af202562c"
          [32m+[0m[0m reference_id         = "Modify-AppService-Apps-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appServiceAppModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c6c3e00e-d414-4ca4-914f-406699bb8eee"
          [32m+[0m[0m reference_id         = "Modify-AppService-App-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Automation"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Automation Account is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Automation Account"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Automation"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Automation"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m aaLocalAuth                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aaManagedIdentity           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aaModifyLocalAuth           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aaModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aaVariablesEncryption       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m autoHotPatch                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('autoHotPatch')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6d02d2f7-e38b-4bdc-96f3-adc0a8726abc"
          [32m+[0m[0m reference_id         = "Deny-Windows-Vm-HotPatch"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aaManagedIdentity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dea83a72-443c-4292-83d5-54a2f98749c0"
          [32m+[0m[0m reference_id         = "Deny-Aa-Managed-Identity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aaLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/48c5f1cb-14ad-4797-8e3b-f78ab3f8d700"
          [32m+[0m[0m reference_id         = "Deny-Aa-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aaVariablesEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3657f5a0-770e-44a3-b44e-9431ba1e9735"
          [32m+[0m[0m reference_id         = "Deny-Aa-Variables-Encrypt"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aaModifyLocalAUth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/30d1d58e-8f96-47a5-8564-499a3f3cca81"
          [32m+[0m[0m reference_id         = "Modify-Aa-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aaModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/23b36a7c-9d26-4288-a8fd-c1d2fa284d8c"
          [32m+[0m[0m reference_id         = "Modify-Aa-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-CognitiveServices"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Cognitive Services is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Cognitive Services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cognitive Services"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-CognitiveServices"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m cognitiveSearchLocalAuth                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveSearchSku                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m modifyCognitiveSearchLocalAuth             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m modifyCognitiveSearchPublicEndpoint        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveSearchSku')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a049bf77-880b-470f-ba6d-9f21c530cf83"
          [32m+[0m[0m reference_id         = "Deny-CognitiveSearch-SKU"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveSearchLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6300012e-e9a4-4649-b41f-a85f5c43be91"
          [32m+[0m[0m reference_id         = "Deny-CongitiveSearch-LocalAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('modifyCognitiveSearchLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4eb216f2-9dba-4979-86e6-5d7e63ce3b75"
          [32m+[0m[0m reference_id         = "Modify-CogntiveSearch-LocalAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('modifyCognitiveSearchPublicEndpoint')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9cee519f-d9c1-4fd9-9f79-24ec3449ed30"
          [32m+[0m[0m reference_id         = "Modify-CogntiveSearch-PublicEndpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/47ba1dd7-28d9-4b07-a8d5-9813bed64e0c"
          [32m+[0m[0m reference_id         = "Modify-Cognitive-Services-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Compute"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Compute is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Compute"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Compute"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Compute"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m diskDoubleEncryption    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m vmAndVmssEncryptionHost = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('vmAndVmssEncryptionHost')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fc4d8e41-e223-45ea-9bf5-eada37891d87"
          [32m+[0m[0m reference_id         = "Deny-VmAndVmss-Encryption-Host"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('diskDoubleEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ca91455f-eace-4f96-be59-e6e2c35b4816"
          [32m+[0m[0m reference_id         = "Deny-Disk-Double-Encryption"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerApps"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Container Apps"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Container Apps"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-ContainerApps"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m containerAppsManagedIdentity = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerAppsVnetInjection   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerAppsVnetInjection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb"
          [32m+[0m[0m reference_id         = "Deny-ContainerApp-Vnet-Injection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerAppsManagedIdentity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7"
          [32m+[0m[0m reference_id         = "Deny-ContainerApps-Managed-Identity"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerInstance"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Container Instance"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Container Instances"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-ContainerInstance"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m containerInstanceVnet = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerInstanceVnet')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8af8f826-edcb-4178-b35f-851ea6fea615"
          [32m+[0m[0m reference_id         = "Deny-ContainerInstance-Vnet"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerRegistry"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Container Registry"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Container Registry"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-ContainerRegistry"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m containerRegistryAnAuth                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryArmAudience               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryExports                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryLocalAuth                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryModifyAnAuth              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryModifyArmAudience         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryModifyLocalAuth           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryModifyRepositoryToken     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryRepositoryToken           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistrySkuPrivateLink            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m containerRegistryUnrestrictedNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/79fdfe03-ffcb-4e55-b4d0-b925b8241759"
          [32m+[0m[0m reference_id         = "Modify-ContainerRegistry-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryModifyRepositoryToken')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a9b426fe-8856-4945-8600-18c5dd1cca2a"
          [32m+[0m[0m reference_id         = "Modify-ContainerRegistry-Repo-Token"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryArmAudience')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/42781ec6-6127-4c30-bdfa-fb423a0047d3"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Arm-Audience"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryModifyArmAudience')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/785596ed-054f-41bc-aaec-7f3d0ba05725"
          [32m+[0m[0m reference_id         = "Modify-ContainerRegistry-Arm-Audience"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistrySkuPrivateLink')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bd560fc0-3c69-498a-ae9f-aa8eb7de0e13"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Sku-PrivateLink"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryModifyAnAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cced2946-b08a-44fe-9fd9-e4ed8a779897"
          [32m+[0m[0m reference_id         = "Modify-ContainerRegistry-Anonymous-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryAnAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9f2dea28-e834-476c-99c5-3507b4728395"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Anonymous-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryExports')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/524b0254-c285-4903-bee6-bb8126cde579"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Exports"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dc921057-6b28-4fbe-9b83-f7bec05db6c2"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryRepositoryToken')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ff05e24e-195c-447e-b322-5e90c9f9f366"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Repo-Token"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryUnrestrictedNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d0793b48-0edc-4296-a390-4c75d1bdfd71"
          [32m+[0m[0m reference_id         = "Deny-ContainerRegistry-Unrestricted-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('containerRegistryModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a3701552-92ea-433e-9d17-33b7f1208fc9"
          [32m+[0m[0m reference_id         = "Modify-ContainerRegistry-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-CosmosDb"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Cosmos DB is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Cosmos DB"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cosmos DB"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-CosmosDb"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m cosmosDbAtp                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cosmosDbFwRules            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cosmosDbLocalAuth          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cosmosDbModifyLocalAuth    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cosmosDbModifyPublicAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cosmosDbModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dc2d41d1-4ab1-4666-a3e1-3d51c43e0049"
          [32m+[0m[0m reference_id         = "Modify-CosmosDb-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cosmosDbAtp')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b5f04e03-92a3-4b09-9410-2cc5e5047656"
          [32m+[0m[0m reference_id         = "Dine-CosmosDb-Atp"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cosmosDbFwRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb"
          [32m+[0m[0m reference_id         = "Deny-CosmosDb-Fw-Rules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cosmosDbLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5450f5bd-9c72-4390-a9c4-a7aba4edfdd2"
          [32m+[0m[0m reference_id         = "Deny-CosmosDb-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4750c32b-89c0-46af-bfcb-2e4541a818d5"
          [32m+[0m[0m reference_id         = "Append-CosmosDb-Metadata"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cosmosDbModifyPublicAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/da69ba51-aaf1-41e5-8651-607cd0b37088"
          [32m+[0m[0m reference_id         = "Modify-CosmosDb-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-DataExplorer"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Data Explorer is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Data Explorer"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Azure Data Explorer"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-DataExplorer"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m adxDoubleEncryption          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adxEncryption                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adxModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adxSku                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxSku')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1fec9658-933f-4b3e-bc95-913ed22d012b"
          [32m+[0m[0m reference_id         = "Deny-ADX-Sku-without-PL-Support"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxDoubleEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ec068d99-e9c7-401f-8cef-5bdde4e6ccf1"
          [32m+[0m[0m reference_id         = "Deny-ADX-Double-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f4b53539-8df9-40e4-86c6-6b607703bd4e"
          [32m+[0m[0m reference_id         = "Deny-ADX-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adxModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7b32f193-cb28-4e15-9a98-b9556db0bafa"
          [32m+[0m[0m reference_id         = "Modify-ADX-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-DataFactory"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Data Factory is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Data Factory"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Data Factory"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-DataFactory"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m adfGit                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adfLinkedServiceKeyVault     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adfManagedIdentity           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adfModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m adfSqlIntegration            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfManagedIdentity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f78ccdb4-7bf4-4106-8647-270491d2978a"
          [32m+[0m[0m reference_id         = "Deny-Adf-Managed-Identity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfGit')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/77d40665-3120-4348-b539-3192ec808307"
          [32m+[0m[0m reference_id         = "Deny-Adf-Git"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfLinkedServiceKeyVault')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/127ef6d7-242f-43b3-9eef-947faf1725d0"
          [32m+[0m[0m reference_id         = "Deny-Adf-Linked-Service-Key-Vault"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfSqlIntegration')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0088bc63-6dee-4a9c-9d29-91cfdc848952"
          [32m+[0m[0m reference_id         = "Deny-Adf-Sql-Integration"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('adfModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/08b1442b-7789-4130-8506-4f99a97226a7"
          [32m+[0m[0m reference_id         = "Modify-Adf-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-EventGrid"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Event Grid is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Event Grid"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Event Grid"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-EventGrid"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m eventGridDomainModifyLocalAuth           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridDomainModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridLocalAuth                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridPartnerNamespaceLocalAuth       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridPartnerNamespaceModifyLocalAuth = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridTopicLocalAuth                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridTopicModifyLocalAuth            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventGridTopicModifyPublicNetworkAccess  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridPartnerNamespaceModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2dd0e8b9-4289-4bb0-b813-1883298e9924"
          [32m+[0m[0m reference_id         = "Modify-EventGrid-Partner-Namespace-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridDomainModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8ac2748f-3bf1-4c02-a3b6-92ae68cf75b1"
          [32m+[0m[0m reference_id         = "Modify-EventGrid-Domain-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridTopicLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae9fb87f-8a17-4428-94a4-8135d431055c"
          [32m+[0m[0m reference_id         = "Deny-EventGrid-Topic-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridTopicModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1c8144d9-746a-4501-b08c-093c8d29ad04"
          [32m+[0m[0m reference_id         = "Modify-EventGrid-Topic-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridPartnerNamespaceLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8632b003-3545-4b29-85e6-b2b96773df1e"
          [32m+[0m[0m reference_id         = "Deny-EventGrid-Partner-Namespace-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8bfadddb-ee1c-4639-8911-a38cb8e0b3bd"
          [32m+[0m[0m reference_id         = "Deny-EventGrid-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridDomainModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/898e9824-104c-4965-8e0e-5197588fa5d4"
          [32m+[0m[0m reference_id         = "Modify-EventGrid-Domain-Public-Network-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventGridTopicModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/36ea4b4b-0f7f-4a54-89fa-ab18f555a172"
          [32m+[0m[0m reference_id         = "Modify-EventGrid-Topic-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-EventHub"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Event Hub is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Event Hub"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Event Hub"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-EventHub"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m eventHubAuthRules                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubNamespacesDoubleEncryption = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubNamespacesLocalAuth        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m eventHubNamespacesModifyLocalAuth  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubNamespacesDoubleEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/836cd60e-87f3-4e6a-a27c-29d687f01a4c"
          [32m+[0m[0m reference_id         = "Deny-EH-Double-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubNamespacesModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/57f35901-8389-40bb-ac49-3ba4f86d889d"
          [32m+[0m[0m reference_id         = "Modify-EH-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubNamespacesLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5d4e3c65-4873-47be-94f3-6f8b953a3598"
          [32m+[0m[0m reference_id         = "Deny-EH-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('eventHubAuthRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b278e460-7cfc-4451-8294-cccc40a940d7"
          [32m+[0m[0m reference_id         = "Deny-EH-Auth-Rules"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "Enforce recommended guardrails for Azure Key Vault."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Azure Key Vault"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Key Vault"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "2.1.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-KeyVault"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m effectKvCertLifetime                                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvFirewallEnabled                                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvKeysExpire                                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvKeysLifetime                                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvPurgeProtection                                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvSecretsExpire                                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvSecretsLifetime                                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m effectKvSoftDelete                                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m metadata      = {
                      [32m+[0m[0m description = "Enable or disable the execution of the policy"
                      [32m+[0m[0m displayName = "Effect"
                    }
                  [32m+[0m[0m type          = "String"
                }
              [32m+[0m[0m keyVaultArmRbac                                              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCertKeyTypes                                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCertValidPeriod                                      = {
                  [32m+[0m[0m defaultValue = 12
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m keyVaultCertificateNotExpireWithinSpecifiedNumberOfDays      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCertificateNotExpireWithinSpecifiedNumberOfDaysValue = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m keyVaultCertificatesPeriod                                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCheckMinimumRSACertificateSize                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCheckMinimumRSAKeySize                               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultCryptographicType                                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultEllipticCurve                                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultHmsCurveNames                                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultHmsCurveNamesValue                                   = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "P-256",
                      [32m+[0m[0m "P-256K",
                      [32m+[0m[0m "P-384",
                      [32m+[0m[0m "P-521",
                    ]
                  [32m+[0m[0m type         = "array"
                }
              [32m+[0m[0m keyVaultHmsKeysExpiration                                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultHmsPurgeProtection                                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultHsmMinimumDaysBeforeExpiration                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultHsmMinimumDaysBeforeExpirationValue                  = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m keyVaultIntegratedCa                                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultIntegratedCaValue                                    = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "DigiCert",
                      [32m+[0m[0m "GlobalSign",
                    ]
                  [32m+[0m[0m type         = "array"
                }
              [32m+[0m[0m keyVaultManagedHsmCheckMinimumRSAKeySize                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultManagedHsmMinimumRSAKeySizeValue                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m 2048,
                      [32m+[0m[0m 3072,
                      [32m+[0m[0m 4096,
                    ]
                  [32m+[0m[0m defaultValue  = 2048
                  [32m+[0m[0m type          = "integer"
                }
              [32m+[0m[0m keyVaultMinimumRSACertificateSizeValue                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m 2048,
                      [32m+[0m[0m 3072,
                      [32m+[0m[0m 4096,
                    ]
                  [32m+[0m[0m defaultValue  = 2048
                  [32m+[0m[0m type          = "integer"
                }
              [32m+[0m[0m keyVaultMinimumRSAKeySizeValue                               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m 2048,
                      [32m+[0m[0m 3072,
                      [32m+[0m[0m 4096,
                    ]
                  [32m+[0m[0m defaultValue  = 2048
                  [32m+[0m[0m type          = "integer"
                }
              [32m+[0m[0m keyVaultNonIntegratedCa                                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultNonIntegratedCaValue                                 = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "The common name (CN) of the Certificate Authority (CA) provider. For example, for an issuer CN = Contoso, OU = .., DC = .., you can specify Contoso"
                      [32m+[0m[0m displayName = "The common name of the certificate authority"
                    }
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m keyVaultSecretContentType                                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keysActive                                                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keysActiveInDays                                             = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m keysCurveNames                                               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keysValidPeriod                                              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keysValidityInDays                                           = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m maximumCertLifePercentageLife                                = {
                  [32m+[0m[0m defaultValue = 80
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Enter the percentage of lifetime of the certificate when you want to trigger the policy action. For example, to trigger a policy action at 80% of the certificate's valid life, enter '80'."
                      [32m+[0m[0m displayName = "The maximum lifetime percentage"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m minimumCertLifeDaysBeforeExpiry                              = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
                      [32m+[0m[0m displayName = "The minimum days before expiry"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m minimumKeysLifeDaysBeforeExpiry                              = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
                      [32m+[0m[0m displayName = "The minimum days before expiry"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m minimumSecretsLifeDaysBeforeExpiry                           = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
                      [32m+[0m[0m displayName = "The minimum days before expiry"
                    }
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m secretsActive                                                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m secretsActiveInDays                                          = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m secretsValidPeriod                                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m secretsValidityInDays                                        = {
                  [32m+[0m[0m defaultValue = 90
                  [32m+[0m[0m type         = "integer"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectKvSoftDelete')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d"
          [32m+[0m[0m reference_id         = "KvSoftDelete"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectKvPurgeProtection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0b60c0b2-2dc2-4e1c-b5c9-abbed971de53"
          [32m+[0m[0m reference_id         = "KvPurgeProtection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectKvSecretsExpire')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/98728c90-32c7-4049-8429-847dc0f4fe37"
          [32m+[0m[0m reference_id         = "KvSecretsExpire"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectKvKeysExpire')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/152b15f7-8e1f-4c1f-ab71-8c010ba5dbc0"
          [32m+[0m[0m reference_id         = "KvKeysExpire"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('effectKvFirewallEnabled')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/55615ac9-af46-4a59-874e-391cc3dfb490"
          [32m+[0m[0m reference_id         = "KvFirewallEnabled"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                  = {
                      [32m+[0m[0m value = "[parameters('effectKvCertLifetime')]"
                    }
                  [32m+[0m[0m maximumPercentageLife   = {
                      [32m+[0m[0m value = "[parameters('maximumCertLifePercentageLife')]"
                    }
                  [32m+[0m[0m minimumDaysBeforeExpiry = {
                      [32m+[0m[0m value = "[parameters('minimumCertLifeDaysBeforeExpiry')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12ef42cb-9903-4e39-9c26-422d29570417"
          [32m+[0m[0m reference_id         = "KvCertLifetime"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('effectKvKeysLifetime')]"
                    }
                  [32m+[0m[0m minimumDaysBeforeExpiration = {
                      [32m+[0m[0m value = "[parameters('minimumKeysLifeDaysBeforeExpiry')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5ff38825-c5d8-47c5-b70e-069a21955146"
          [32m+[0m[0m reference_id         = "KvKeysLifetime"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('effectKvSecretsLifetime')]"
                    }
                  [32m+[0m[0m minimumDaysBeforeExpiration = {
                      [32m+[0m[0m value = "[parameters('minimumSecretsLifeDaysBeforeExpiry')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b0eb591a-5e70-4534-a8bf-04b9c489584a"
          [32m+[0m[0m reference_id         = "KvSecretsLifetime"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('keyVaultCheckMinimumRSACertificateSize')]"
                    }
                  [32m+[0m[0m minimumRSAKeySize = {
                      [32m+[0m[0m value = "[parameters('keyVaultMinimumRSACertificateSizeValue')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cee51871-e572-4576-855c-047c820360f0"
          [32m+[0m[0m reference_id         = "Deny-KV-RSA-Keys-without-MinCertSize"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('keyVaultManagedHsmCheckMinimumRSAKeySize')]"
                    }
                  [32m+[0m[0m minimumRSAKeySize = {
                      [32m+[0m[0m value = "[parameters('keyVaultManagedHsmMinimumRSAKeySizeValue')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86810a98-8e91-4a44-8386-ec66d0de5d57"
          [32m+[0m[0m reference_id         = "Deny-keyVaultManagedHsm-RSA-Keys-without-MinKeySize"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m value = "[parameters('keyVaultCheckMinimumRSAKeySize')]"
                    }
                  [32m+[0m[0m minimumRSAKeySize = {
                      [32m+[0m[0m value = "[parameters('keyVaultMinimumRSAKeySizeValue')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/82067dbb-e53b-4e06-b631-546d197452d9"
          [32m+[0m[0m reference_id         = "Deny-KV-RSA-Keys-without-MinKeySize"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultArmRbac')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12d4fa5e-1f9f-4c21-97a9-b99b3c6611b5"
          [32m+[0m[0m reference_id         = "Deny-KV-without-ArmRbac"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultHmsPurgeProtection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c39ba22d-4428-4149-b981-70acb31fc383"
          [32m+[0m[0m reference_id         = "Deny-KV-Hms-PurgeProtection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                  = {
                      [32m+[0m[0m value = "[parameters('keyVaultCertificatesPeriod')]"
                    }
                  [32m+[0m[0m maximumValidityInMonths = {
                      [32m+[0m[0m value = "[parameters('keyVaultCertValidPeriod')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0a075868-4c26-42ef-914c-5bc007359560"
          [32m+[0m[0m reference_id         = "Deny-KV-Cert-Period"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultHmsKeysExpiration')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1d478a74-21ba-4b9f-9d8f-8e6fced0eec5"
          [32m+[0m[0m reference_id         = "Deny-KV-Hms-Key-Expire"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m value = "[parameters('keysValidPeriod')]"
                    }
                  [32m+[0m[0m maximumValidityInDays = {
                      [32m+[0m[0m value = "[parameters('keysValidityInDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/49a22571-d204-4c91-a7b6-09b1a586fbc9"
          [32m+[0m[0m reference_id         = "Deny-KV-Keys-Expire"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m value = "[parameters('secretsValidPeriod')]"
                    }
                  [32m+[0m[0m maximumValidityInDays = {
                      [32m+[0m[0m value = "[parameters('secretsValidityInDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/342e8053-e12e-4c44-be01-c3c2f318400f"
          [32m+[0m[0m reference_id         = "Deny-KV-Secrets-ValidityDays"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultCertKeyTypes')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1151cede-290b-4ba0-8b38-0ad145ac888f"
          [32m+[0m[0m reference_id         = "Deny-KV-Key-Types"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultEllipticCurve')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bd78111f-4953-4367-9fd5-7e08808b54bf"
          [32m+[0m[0m reference_id         = "Deny-KV-Elliptic-Curve"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultCryptographicType')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75c4f823-d65c-4f29-a733-01d0077fdbcb"
          [32m+[0m[0m reference_id         = "Deny-KV-Cryptographic-Type"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m value = "[parameters('keysActive')]"
                    }
                  [32m+[0m[0m maximumValidityInDays = {
                      [32m+[0m[0m value = "[parameters('keysActiveInDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c26e4b24-cf98-4c67-b48b-5a25c4c69eb9"
          [32m+[0m[0m reference_id         = "Deny-KV-Key-Active"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keysCurveNames')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ff25f3c8-b739-4538-9d07-3d6d25cfb255"
          [32m+[0m[0m reference_id         = "Deny-KV-Curve-Names"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m value = "[parameters('secretsActive')]"
                    }
                  [32m+[0m[0m maximumValidityInDays = {
                      [32m+[0m[0m value = "[parameters('secretsActiveInDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e8d99835-8a06-45ae-a8e0-87a91941ccfe"
          [32m+[0m[0m reference_id         = "Deny-KV-Secret-ActiveDays"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultSecretContentType')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75262d3e-ba4a-4f43-85f8-9f72c090e5e3"
          [32m+[0m[0m reference_id         = "Deny-Kv-Secret-Content-Type"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m caCommonName = {
                      [32m+[0m[0m value = "[parameters('keyVaultNonIntegratedCaValue')]"
                    }
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('keyVaultNonIntegratedCa')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a22f4a40-01d3-4c7d-8071-da157eeff341"
          [32m+[0m[0m reference_id         = "Deny-Kv-Non-Integrated-Ca"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m allowedCAs = {
                      [32m+[0m[0m value = "[parameters('keyVaultIntegratedCaValue')]"
                    }
                  [32m+[0m[0m effect     = {
                      [32m+[0m[0m value = "[parameters('keyVaultIntegratedCa')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e826246-c976-48f6-b03e-619bb92b3d82"
          [32m+[0m[0m reference_id         = "Deny-Kv-Integrated-Ca"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m value = "[parameters('keyVaultHsmMinimumDaysBeforeExpiration')]"
                    }
                  [32m+[0m[0m minimumDaysBeforeExpiration = {
                      [32m+[0m[0m value = "[parameters('keyVaultHsmMinimumDaysBeforeExpirationValue')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ad27588c-0198-4c84-81ef-08efd0274653"
          [32m+[0m[0m reference_id         = "Deny-Kv-Hsm-MinimumDays-Before-Expiration"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m allowedECNames = {
                      [32m+[0m[0m value = "[parameters('keyVaultHmsCurveNamesValue')]"
                    }
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m value = "[parameters('keyVaultHmsCurveNames')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e58fd0c1-feac-4d12-92db-0a7e9421f53e"
          [32m+[0m[0m reference_id         = "Deny-Kv-Hsm-Curve-Names"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m daysToExpire = {
                      [32m+[0m[0m value = "[parameters('keyVaultCertificateNotExpireWithinSpecifiedNumberOfDaysValue')]"
                    }
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m value = "[parameters('keyVaultCertificateNotExpireWithinSpecifiedNumberOfDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f772fb64-8e40-40ad-87bc-7706e1949427"
          [32m+[0m[0m reference_id         = "Deny-Kv-Cert-Expiration-Within-Specific-Number-Days"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault-Sup"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Key Vault is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce additional recommended guardrails for Key Vault"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Key Vault"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-KeyVault-Sup"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m keyVaultManagedHsmDisablePublicNetworkModify = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m keyVaultModifyFw                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultManagedHsmDisablePublicNetworkModify')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/84d327c3-164a-4685-b453-900478614456"
          [32m+[0m[0m reference_id         = "Modify-KV-PublicNetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('keyVaultModifyFw')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ac673a9a-f77d-4846-b2d8-a57f8e1c01dc"
          [32m+[0m[0m reference_id         = "Modify-KV-Fw"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Kubernetes"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Kubernetes is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Kubernetes"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Kubernetes"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Kubernetes"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m aksAllowedCapabilities           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksCni                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksCommandInvoke                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksDefaultNamespace              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksInternalLb                    = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksKms                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksLocalAuth                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksNakedPods                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksPolicy                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksPrivContainers                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksPrivEscalation                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksPrivateCluster                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksReadinessOrLivenessProbes     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksShareHostProcessAndNamespace  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "audit",
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "deny",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "disabled",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksTempDisk                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m aksWindowsContainerAdministrator = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksWindowsContainerAdministrator')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5485eac0-7e8f-4964-998b-a44f4f0c1e75"
          [32m+[0m[0m reference_id         = "Deny-Aks-Windows-Container-Administrator"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksShareHostProcessAndNamespace')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8"
          [32m+[0m[0m reference_id         = "Deny-Aks-Shared-Host-Process-Namespace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksNakedPods')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/65280eef-c8b4-425e-9aec-af55e55bf581"
          [32m+[0m[0m reference_id         = "Deny-Aks-Naked-Pods"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksDefaultNamespace')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9f061a12-e40d-4183-a00e-171812443373"
          [32m+[0m[0m reference_id         = "Deny-Aks-Default-Namespace"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksInternalLb')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e"
          [32m+[0m[0m reference_id         = "Deny-Aks-Internal-Lb"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksTempDisk')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/41425d9f-d1a5-499a-9932-f8ed8453932c"
          [32m+[0m[0m reference_id         = "Deny-Aks-Temp-Disk-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksAllowedCapabilities')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c26596ff-4d70-4e6a-9a30-c2506bd2f80c"
          [32m+[0m[0m reference_id         = "Deny-Aks-Allowed-Capabilities"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksPrivEscalation')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99"
          [32m+[0m[0m reference_id         = "Deny-Aks-Priv-Escalation"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksPrivContainers')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/95edb821-ddaf-4404-9732-666045e056b4"
          [32m+[0m[0m reference_id         = "Deny-Aks-Priv-Containers"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksReadinessOrLivenessProbes')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b1a9997f-2883-4f12-bdff-2280f99b5915"
          [32m+[0m[0m reference_id         = "Deny-Aks-ReadinessOrLiveness-Probes"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksCommandInvoke')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b708b0a-3380-40e9-8b79-821f9fa224cc"
          [32m+[0m[0m reference_id         = "Dine-Aks-Command-Invoke"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksPolicy')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          [32m+[0m[0m reference_id         = "Dine-Aks-Policy"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksPrivateCluster')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/040732e8-d947-40b8-95d6-854c95024bf8"
          [32m+[0m[0m reference_id         = "Deny-Aks-Private-Cluster"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/993c2fcd-2b29-49d2-9eb0-df2c3a730c32"
          [32m+[0m[0m reference_id         = "Deny-Aks-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksKms')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dbbdc317-9734-4dd8-9074-993b29c69008"
          [32m+[0m[0m reference_id         = "Deny-Aks-Kms"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('aksCni')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/46238e2f-3f6f-4589-9f3f-77bed4116e67"
          [32m+[0m[0m reference_id         = "Deny-Aks-Cni"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-MachineLearning"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Machine Learning is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Machine Learning"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Machine Learning"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-MachineLearning"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m mlLocalAuth                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mlModifyLocalAuth           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mlModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mlOutdatedOS                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mlUserAssignedIdentity      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effects = {
                      [32m+[0m[0m value = "[parameters('mlOutdatedOS')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f110a506-2dcb-422e-bcea-d533fc8c35e2"
          [32m+[0m[0m reference_id         = "Deny-ML-Outdated-Os"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mlLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e96a9a5f-07ca-471b-9bc5-6a0f33cbd68f"
          [32m+[0m[0m reference_id         = "Deny-ML-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mlModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a6f9a2d0-cff7-4855-83ad-4cd750666512"
          [32m+[0m[0m reference_id         = "Modify-ML-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mlUserAssignedIdentity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5f0c7d88-c7de-45b8-ac49-db49e72eaa78"
          [32m+[0m[0m reference_id         = "Deny-ML-User-Assigned-Identity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mlModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a10ee784-7409-4941-b091-663697637c0f"
          [32m+[0m[0m reference_id         = "Modify-ML-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-MySQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures MySQL is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for MySQL"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "MySQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-MySQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m mySqlAdvThreatProtection = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m mySqlInfraEncryption     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mySqlAdvThreatProtection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/80ed5239-4122-41ed-b54a-6f1fa7552816"
          [32m+[0m[0m reference_id         = "Dine-MySql-Adv-Threat-Protection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('mySqlInfraEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3a58212a-c829-4f13-9872-6371df2fd0b4"
          [32m+[0m[0m reference_id         = "Deny-MySql-Infra-Encryption"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Network"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Network and Networking services are compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Network and Networking services"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Network"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Network"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m afwEmptyIDPSBypassList                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m afwEnableAllIDPSSignatureRules        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m afwEnableIDPS                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m afwEnableTlsInspection                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m afwEnbaleTlsForAllAppRules            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appGwTlsVersion                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m appGwWaf                              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m ddosPlanResourceId                    = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m denyMgmtFromInternet                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m denyMgmtFromInternetPorts             = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "22",
                      [32m+[0m[0m "3389",
                    ]
                  [32m+[0m[0m metadata     = {
                      [32m+[0m[0m description = "Ports to be blocked"
                      [32m+[0m[0m displayName = "Ports"
                    }
                  [32m+[0m[0m type         = "Array"
                }
              [32m+[0m[0m modifyNsg                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m modifyNsgRuleAccess                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Allow",
                      [32m+[0m[0m "Deny",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m modifyNsgRuleDescription              = {
                  [32m+[0m[0m defaultValue = "Deny any outbound traffic to the Internet"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleDestinationAddressPrefix = {
                  [32m+[0m[0m defaultValue = "Internet"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleDestinationPortRange     = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleDirection                = {
                  [32m+[0m[0m defaultValue = "Outbound"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleName                     = {
                  [32m+[0m[0m defaultValue = "DenyAnyInternetOutbound"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRulePriority                 = {
                  [32m+[0m[0m defaultValue = 1000
                  [32m+[0m[0m type         = "integer"
                }
              [32m+[0m[0m modifyNsgRuleProtocol                 = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleSourceAddressPrefix      = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyNsgRuleSourcePortRange          = {
                  [32m+[0m[0m defaultValue = "*"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyUdr                             = {
                  [32m+[0m[0m defaultValue = "Disabled"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyUdrAddressPrefix                = {
                  [32m+[0m[0m defaultValue = "0.0.0.0/0"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyUdrNextHopIpAddress             = {
                  [32m+[0m[0m defaultValue = ""
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m modifyUdrNextHopType                  = {
                  [32m+[0m[0m defaultValue = "None"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m subnetNsg                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m subnetServiceEndpoint                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m subnetUdr                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m vnetModifyDdos                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m vpnAzureAD                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m wafAfdEnabled                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m wafFwRules                            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m wafMode                               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m wafModeAppGw                          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m wafModeAppGwRequirement               = {
                  [32m+[0m[0m defaultValue = "Prevention"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m wafModeRequirement                    = {
                  [32m+[0m[0m defaultValue = "Prevention"
                  [32m+[0m[0m type         = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/35f9c03a-cc27-418e-9c0c-539ff999d010"
          [32m+[0m[0m reference_id         = "Deny-Nsg-GW-subnet"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('vpnAzureAD')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/21a6bc25-125e-4d13-b82d-2e19b7208ab7"
          [32m+[0m[0m reference_id         = "Deny-VPN-AzureAD"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('wafAfdEnabled')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/055aa869-bc98-4af8-bafc-23f1ab6ffe2c"
          [32m+[0m[0m reference_id         = "Deny-Waf-Afd-Enabled"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('afwEnableIDPS')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6484db87-a62d-4327-9f07-80a2cbdf333a"
          [32m+[0m[0m reference_id         = "Deny-Waf-IDPS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('afwEnableAllIDPSSignatureRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/610b6183-5f00-4d68-86d2-4ab4cb3a67a5"
          [32m+[0m[0m reference_id         = "Deny-FW-AllIDPSS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('afwEmptyIDPSBypassList')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f516dc7a-4543-4d40-aad6-98f76a706b50"
          [32m+[0m[0m reference_id         = "Deny-FW-EmpIDPSBypass"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('afwEnableTlsInspection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/711c24bb-7f18-4578-b192-81a6161e1f17"
          [32m+[0m[0m reference_id         = "Deny-FW-TLS-Inspection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('afwEnbaleTlsForAllAppRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a58ac66d-92cb-409c-94b8-8e48d7a96596"
          [32m+[0m[0m reference_id         = "Deny-FW-TLS-AllApp"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m value = "[parameters('wafModeAppGw')]"
                    }
                  [32m+[0m[0m modeRequirement = {
                      [32m+[0m[0m value = "[parameters('wafModeAppGwRequirement')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12430be1-6cc8-4527-a9a8-e3d38f250096"
          [32m+[0m[0m reference_id         = "Deny-Waf-AppGw-mode"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('wafFwRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/632d3993-e2c0-44ea-a7db-2eca131f356d"
          [32m+[0m[0m reference_id         = "Deny-Waf-Fw-rules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m value = "[parameters('wafMode')]"
                    }
                  [32m+[0m[0m modeRequirement = {
                      [32m+[0m[0m value = "[parameters('wafModeRequirement')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/425bea59-a659-4cbb-8d31-34499bd030b8"
          [32m+[0m[0m reference_id         = "Deny-Waf-mode"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m ddosPlan = {
                      [32m+[0m[0m value = "[parameters('ddosPlanResourceId')]"
                    }
                  [32m+[0m[0m effect   = {
                      [32m+[0m[0m value = "[parameters('vnetModifyDdos')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"
          [32m+[0m[0m reference_id         = "Modify-vNet-DDoS"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/88c0b9da-ce96-4b03-9635-f29a937e2900"
          [32m+[0m[0m reference_id         = "Deny-Ip-Forwarding"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83a86a26-fd1f-447c-b59d-e51f44264114"
          [32m+[0m[0m reference_id         = "Deny-vNic-Pip"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appGwWaf')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/564feb30-bf6a-4854-b4bb-0d2d2d1e6c66"
          [32m+[0m[0m reference_id         = "Deny-AppGw-Without-Waf"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('subnetUdr')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Udr"
          [32m+[0m[0m reference_id         = "Deny-Subnet-Without-Udr"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('subnetNsg')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg"
          [32m+[0m[0m reference_id         = "Deny-Subnet-Without-NSG"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('subnetServiceEndpoint')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Service-Endpoints"
          [32m+[0m[0m reference_id         = "Deny-Subnet-with-Service-Endpoints"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('denyMgmtFromInternet')]"
                    }
                  [32m+[0m[0m ports  = {
                      [32m+[0m[0m value = "[parameters('denyMgmtFromInternetPorts')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet"
          [32m+[0m[0m reference_id         = "Deny-Mgmt-From-Internet"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('appGwTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGw-Without-Tls"
          [32m+[0m[0m reference_id         = "Deny-AppGw-Without-Tls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m addressPrefix    = {
                      [32m+[0m[0m value = "[parameters('modifyUdrAddressPrefix')]"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('modifyUdr')]"
                    }
                  [32m+[0m[0m nextHopIpAddress = {
                      [32m+[0m[0m value = "[parameters('modifyUdrNextHopIpAddress')]"
                    }
                  [32m+[0m[0m nextHopType      = {
                      [32m+[0m[0m value = "[parameters('modifyUdrNextHopType')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-UDR"
          [32m+[0m[0m reference_id         = "Modify-Udr"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                          = {
                      [32m+[0m[0m value = "[parameters('modifyNsg')]"
                    }
                  [32m+[0m[0m nsgRuleAccess                   = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleAccess')]"
                    }
                  [32m+[0m[0m nsgRuleDescription              = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleDescription')]"
                    }
                  [32m+[0m[0m nsgRuleDestinationAddressPrefix = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleDestinationAddressPrefix')]"
                    }
                  [32m+[0m[0m nsgRuleDestinationPortRange     = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleDestinationPortRange')]"
                    }
                  [32m+[0m[0m nsgRuleDirection                = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleDirection')]"
                    }
                  [32m+[0m[0m nsgRuleName                     = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleName')]"
                    }
                  [32m+[0m[0m nsgRulePriority                 = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRulePriority')]"
                    }
                  [32m+[0m[0m nsgRuleProtocol                 = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleProtocol')]"
                    }
                  [32m+[0m[0m nsgRuleSourceAddressPrefix      = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleSourceAddressPrefix')]"
                    }
                  [32m+[0m[0m nsgRuleSourcePortRange          = {
                      [32m+[0m[0m value = "[parameters('modifyNsgRuleSourcePortRange')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-NSG"
          [32m+[0m[0m reference_id         = "Modify-Nsg"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-OpenAI"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Open AI (Cognitive Service) is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Open AI (Cognitive Service)"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Cognitive Services"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-OpenAI"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m cognitiveServicesCustomerStorage        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesDisableLocalAuth       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesManagedIdentity        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesModifyDisableLocalAuth = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesNetworkAcls            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m cognitiveServicesOutboundNetworkAccess  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesOutboundNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-RestrictOutboundNetworkAccess"
          [32m+[0m[0m reference_id         = "Deny-OpenAi-OutboundNetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesNetworkAcls')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-NetworkAcls"
          [32m+[0m[0m reference_id         = "Deny-OpenAi-NetworkAcls"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesManagedIdentity')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fe3fd216-4f83-4fc1-8984-2bbec80a3418"
          [32m+[0m[0m reference_id         = "Deny-Cognitive-Services-Managed-Identity"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesDisableLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/71ef260a-8f18-47b7-abcb-62d0673d94dc"
          [32m+[0m[0m reference_id         = "Deny-Cognitive-Services-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesCustomerStorage')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/46aa9b05-0e60-4eae-a88b-1e9d374fa515"
          [32m+[0m[0m reference_id         = "Deny-Cognitive-Services-Cust-Storage"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('cognitiveServicesModifyDisableLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/14de9e63-1b31-492e-a5a3-c3f7fd57f555"
          [32m+[0m[0m reference_id         = "Modify-Cognitive-Services-Local-Auth"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-PostgreSQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures PostgreSQL is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for PostgreSQL"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "PostgreSQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-PostgreSQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m postgreSqlAdvThreatProtection = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('postgreSqlAdvThreatProtection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/db048e65-913c-49f9-bb5f-1084184671d3"
          [32m+[0m[0m reference_id         = "Dine-PostgreSql-Adv-Threat-Protection"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-SQL"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures SQL and SQL Managed Instance is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for SQL and SQL Managed Instance"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "SQL"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-SQL"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m modifySqlPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlAadOnly                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlManagedAadOnly            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m sqlManagedDefender           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlManagedDefender')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c5a62eb0-c65a-4220-8a4d-f70dd4ca95dd"
          [32m+[0m[0m reference_id         = "Dine-Sql-Managed-Defender"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlAadOnly')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/abda6d70-9778-44e7-84a8-06713e6db027"
          [32m+[0m[0m reference_id         = "Deny-Sql-Aad-Only"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('sqlManagedAadOnly')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/78215662-041e-49ed-a9dd-5385911b3a1f"
          [32m+[0m[0m reference_id         = "Deny-Sql-Managed-Aad-Only"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode({})
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6134c3db-786f-471e-87bc-8f479dc890f6"
          [32m+[0m[0m reference_id         = "Dine-Sql-Adv-Data"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('modifySqlPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/28b0b1e5-17ba-4963-a7a4-5a1ab4400a0b"
          [32m+[0m[0m reference_id         = "Modify-Sql-PublicNetworkAccess"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ServiceBus"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Service Bus is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Service Bus"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Service Bus"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-ServiceBus"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m serviceBusAuthzRules             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m serviceBusDenyDisabledLocalAuth  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m serviceBusDoubleEncryption       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m serviceBusModifyDisableLocalAuth = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusAuthzRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a1817ec0-a368-432a-8057-8371e17ac6ee"
          [32m+[0m[0m reference_id         = "Deny-Sb-Authz-Rules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusDoubleEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ebaf4f25-a4e8-415f-86a8-42d9155bef0b"
          [32m+[0m[0m reference_id         = "Deny-Sb-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusDenyDisabledLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cfb11c26-f069-4c14-8e36-56c394dae5af"
          [32m+[0m[0m reference_id         = "Deny-Sb-LocalAuth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('serviceBusModifyDisableLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/910711a6-8aa2-4f15-ae62-1e5b2ed3ef9e"
          [32m+[0m[0m reference_id         = "Modify-Sb-LocalAuth"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Storage"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Storage is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Storage Account"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Storage"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Storage"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m modifyStorageAccountPublicEndpoint              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m modifyStorageFileSyncPublicEndpoint             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountNetworkRules                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountRestrictNetworkRules              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountSharedKey                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsAllowedCopyScope                 = {
                  [32m+[0m[0m defaultValue = "AAD"
                  [32m+[0m[0m type         = "string"
                }
              [32m+[0m[0m storageAccountsCopyScope                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsCrossTenant                      = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsDoubleEncryption                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsInfraEncryption                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAccountsModifyDisablePublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageAllowedNetworkAclsBypass                 = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "None",
                    ]
                  [32m+[0m[0m type         = "array"
                }
              [32m+[0m[0m storageClassicToArm                             = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageContainerDeleteRetentionPolicy           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageCorsRules                                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageKeysExpiration                           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageLocalUser                                = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Disabled"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageMinContainerDeleteRetentionInDays        = {
                  [32m+[0m[0m defaultValue = 7
                  [32m+[0m[0m type         = "Integer"
                }
              [32m+[0m[0m storageNetworkAclsBypass                        = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageNetworkAclsVirtualNetworkRules           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageResourceAccessRulesResourceId            = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageResourceAccessRulesTenantId              = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageServicesEncryption                       = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageSftp                                     = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m storageThreatProtection                         = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m allowedCopyScope = {
                      [32m+[0m[0m value = "[parameters('storageAccountsAllowedCopyScope')]"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('storageAccountsCopyScope')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CopyScope"
          [32m+[0m[0m reference_id         = "Deny-Storage-CopyScope"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageServicesEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ServicesEncryption"
          [32m+[0m[0m reference_id         = "Deny-Storage-ServicesEncryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageLocalUser')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-LocalUser"
          [32m+[0m[0m reference_id         = "Deny-Storage-LocalUser"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageSftp')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-SFTP"
          [32m+[0m[0m reference_id         = "Deny-Storage-SFTP"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m allowedBypassOptions = {
                      [32m+[0m[0m value = "[parameters('storageAllowedNetworkAclsBypass')]"
                    }
                  [32m+[0m[0m effect               = {
                      [32m+[0m[0m value = "[parameters('storageNetworkAclsBypass')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsBypass"
          [32m+[0m[0m reference_id         = "Deny-Storage-NetworkAclsBypass"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageResourceAccessRulesTenantId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesTenantId"
          [32m+[0m[0m reference_id         = "Deny-Storage-ResourceAccessRulesTenantId"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageResourceAccessRulesResourceId')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesResourceId"
          [32m+[0m[0m reference_id         = "Deny-Storage-ResourceAccessRulesResourceId"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageNetworkAclsVirtualNetworkRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsVirtualNetworkRules"
          [32m+[0m[0m reference_id         = "Deny-Storage-NetworkAclsVirtualNetworkRules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m value = "[parameters('storageContainerDeleteRetentionPolicy')]"
                    }
                  [32m+[0m[0m minContainerDeleteRetentionInDays = {
                      [32m+[0m[0m value = "[parameters('storageMinContainerDeleteRetentionInDays')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ContainerDeleteRetentionPolicy"
          [32m+[0m[0m reference_id         = "Deny-Storage-ContainerDeleteRetentionPolicy"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageCorsRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CorsRules"
          [32m+[0m[0m reference_id         = "Deny-Storage-CorsRules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsDoubleEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bfecdea6-31c4-4045-ad42-71b9dc87247d"
          [32m+[0m[0m reference_id         = "Deny-Storage-Account-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsCrossTenant')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/92a89a79-6c52-4a7e-a03f-61306fc49312"
          [32m+[0m[0m reference_id         = "Deny-Storage-Cross-Tenant"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountSharedKey')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8c6a50c6-9ffd-4ae7-986f-5fa6111f9a54"
          [32m+[0m[0m reference_id         = "Deny-Storage-Shared-Key"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsInfraEncryption')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4733ea7b-a883-42fe-8cac-97454c2a9e4a"
          [32m+[0m[0m reference_id         = "Deny-Storage-Infra-Encryption"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageClassicToArm')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/37e0d2fe-28a5-43d6-a273-67d37d1f5606"
          [32m+[0m[0m reference_id         = "Deny-Storage-Classic"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageThreatProtection')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/361c2074-3595-4e5d-8cab-4f21dffc835c"
          [32m+[0m[0m reference_id         = "Dine-Storage-Threat-Protection"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountRestrictNetworkRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/34c877ad-507e-4c82-993e-3452a6e0ad3c"
          [32m+[0m[0m reference_id         = "Deny-Storage-Restrict-NetworkRules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountNetworkRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2a1a9cdf-e04d-429a-8416-3bfb72a1b26f"
          [32m+[0m[0m reference_id         = "Deny-Storage-NetworkRules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageKeysExpiration')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/044985bb-afe1-42cd-8a36-9d5d42424537"
          [32m+[0m[0m reference_id         = "Deny-Storage-Account-Keys-Expire"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('modifyStorageFileSyncPublicEndpoint')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e07b2e9-6cd9-4c40-9ccb-52817b95133b"
          [32m+[0m[0m reference_id         = "Modify-Storage-FileSync-PublicEndpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('modifyStorageAccountPublicEndpoint')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/13502221-8df0-4414-9937-de9c5c4e396b"
          [32m+[0m[0m reference_id         = "Modify-Blob-Storage-Account-PublicEndpoint"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('storageAccountsModifyDisablePublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a06d0189-92e8-4dba-b0c4-08d7669fce7d"
          [32m+[0m[0m reference_id         = "Modify-Storage-Account-PublicEndpoint"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Synapse"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Synapse workspaces is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Synapse workspaces"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Synapse"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.1.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-Synapse"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m synapseAllowedTenantIds          = {
                  [32m+[0m[0m defaultValue = [
                      [32m+[0m[0m "[subscription().tenantId]",
                    ]
                  [32m+[0m[0m type         = "array"
                }
              [32m+[0m[0m synapseDataTraffic               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseDefender                  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "DeployIfNotExists",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseFwRules                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Audit"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseLocalAuth                 = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseManagedVnet               = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseModifyLocalAuth           = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseModifyTlsVersion          = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m synapseTenants                   = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Audit",
                      [32m+[0m[0m "Deny",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Deny"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseDefender')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/951c1558-50a5-4ca3-abb6-a93e3e2367a6"
          [32m+[0m[0m reference_id         = "Dine-Synapse-Defender"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseModifyLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c3624673-d2ff-48e0-b28c-5de1c6767c3c"
          [32m+[0m[0m reference_id         = "Modify-Synapse-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseFwRules')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/56fd377d-098c-4f02-8406-81eb055902b8"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Fw-Rules"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m allowedTenantIds = {
                      [32m+[0m[0m value = "[parameters('synapseAllowedTenantIds')]"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m value = "[parameters('synapseTenants')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3a003702-13d2-4679-941b-937e58c443f0"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Tenant-Access"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseDataTraffic')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3484ce98-c0c5-4c83-994b-c5ac24785218"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Data-Traffic"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseManagedVnet')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2d9dbfa3-927b-4cf0-9d0f-08747f971650"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Managed-Vnet"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseLocalAuth')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2158ddbe-fefa-408e-b43f-d4faef8ff3b8"
          [32m+[0m[0m reference_id         = "Deny-Synapse-Local-Auth"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseModifyTlsVersion')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8b5c654c-fb07-471b-aa8f-15fea733f140"
          [32m+[0m[0m reference_id         = "Modify-Synapse-Tls-Version"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('synapseModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5c8cad01-ef30-4891-b230-652dadb4876a"
          [32m+[0m[0m reference_id         = "Modify-Synapse-Public-Network-Access"
        }
    }

[1m  # module.management_groups[0].azurerm_policy_set_definition.enterprise_scale["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-VirtualDesktop"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_policy_set_definition" "enterprise_scale" {
      [32m+[0m[0m description         = "This policy initiative is a group of policies that ensures Virtual Desktop is compliant per regulated Landing Zones."
      [32m+[0m[0m display_name        = "Enforce recommended guardrails for Virtual Desktop"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m management_group_id = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m metadata            = jsonencode(
            {
              [32m+[0m[0m alzCloudEnvironments = [
                  [32m+[0m[0m "AzureCloud",
                  [32m+[0m[0m "AzureChinaCloud",
                  [32m+[0m[0m "AzureUSGovernment",
                ]
              [32m+[0m[0m category             = "Desktop Virtualization"
              [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
              [32m+[0m[0m version              = "1.0.0"
            }
        )
      [32m+[0m[0m name                = "Enforce-Guardrails-VirtualDesktop"
      [32m+[0m[0m parameters          = jsonencode(
            {
              [32m+[0m[0m avdHostPoolModifyPublicNetworkAccess  = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
              [32m+[0m[0m avdWorkspaceModifyPublicNetworkAccess = {
                  [32m+[0m[0m allowedValues = [
                      [32m+[0m[0m "Modify",
                      [32m+[0m[0m "Disabled",
                    ]
                  [32m+[0m[0m defaultValue  = "Modify"
                  [32m+[0m[0m type          = "string"
                }
            }
        )
      [32m+[0m[0m policy_type         = "Custom"

      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('avdWorkspaceModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ce6ebf1d-0b94-4df9-9257-d8cacc238b4f"
          [32m+[0m[0m reference_id         = "Modify-Workspace-PublicNetworkAccess"
        }
      [32m+[0m[0m policy_definition_reference {
          [32m+[0m[0m parameter_values     = jsonencode(
                {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "[parameters('avdHostPoolModifyPublicNetworkAccess')]"
                    }
                }
            )
          [32m+[0m[0m policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2a0913ff-51e7-47b8-97bb-ea17127f7c8d"
          [32m+[0m[0m reference_id         = "Modify-Hostpool-PublicNetworkAccess"
        }
    }

[1m  # module.management_groups[0].azurerm_resource_group.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "management" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "uksouth"
      [32m+[0m[0m name     = "rg-management-uksouth"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
    }

[1m  # module.management_groups[0].azurerm_role_assignment.ama_managed_identity_operator["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "ama_managed_identity_operator" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Managed Identity Operator"
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_role_assignment.ama_managed_identity_operator["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "ama_managed_identity_operator" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Managed Identity Operator"
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_role_assignment.ama_reader["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "ama_reader" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Reader"
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_role_assignment.ama_reader["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "ama_reader" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Reader"
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_role_assignment.private_dns_zone_contributor_connectivity["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "private_dns_zone_contributor_connectivity" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Private DNS Zone Contributor"
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].azurerm_role_definition.enterprise_scale["/providers/Microsoft.Authorization/roleDefinitions/0eba57f5-a37f-545e-bc9b-76818d5fb806"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_definition" "enterprise_scale" {
      [32m+[0m[0m assignable_scopes           = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
        ]
      [32m+[0m[0m description                 = "Platform-wide global connectivity management: virtual networks, UDRs, NSGs, NVAs, VPN, Azure ExpressRoute, and others"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "[ENTERPRISE-SCALE] Network-Management"
      [32m+[0m[0m role_definition_id          = "0eba57f5-a37f-545e-bc9b-76818d5fb806"
      [32m+[0m[0m role_definition_resource_id = (known after apply)
      [32m+[0m[0m scope                       = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"

      [32m+[0m[0m permissions {
          [32m+[0m[0m actions     = [
              [32m+[0m[0m "*/read",
              [32m+[0m[0m "Microsoft.Network/*",
              [32m+[0m[0m "Microsoft.Resources/deployments/*",
              [32m+[0m[0m "Microsoft.Support/*",
            ]
          [32m+[0m[0m not_actions = []
        }
    }

[1m  # module.management_groups[0].azurerm_role_definition.enterprise_scale["/providers/Microsoft.Authorization/roleDefinitions/55216297-950f-5c51-8b7e-2d01d6c3ed9e"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_definition" "enterprise_scale" {
      [32m+[0m[0m assignable_scopes           = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
        ]
      [32m+[0m[0m description                 = "Enterprise-scale custom Role Definition. Grants full access to manage Virtual Network subnets, but no other network resources."
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "[ENTERPRISE-SCALE] Network-Subnet-Contributor"
      [32m+[0m[0m role_definition_id          = "55216297-950f-5c51-8b7e-2d01d6c3ed9e"
      [32m+[0m[0m role_definition_resource_id = (known after apply)
      [32m+[0m[0m scope                       = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"

      [32m+[0m[0m permissions {
          [32m+[0m[0m actions     = [
              [32m+[0m[0m "Microsoft.Authorization/*/read",
              [32m+[0m[0m "Microsoft.Insights/alertRules/*",
              [32m+[0m[0m "Microsoft.ResourceHealth/availabilityStatuses/read",
              [32m+[0m[0m "Microsoft.Resources/deployments/*",
              [32m+[0m[0m "Microsoft.Resources/subscriptions/resourceGroups/read",
              [32m+[0m[0m "Microsoft.Support/*",
              [32m+[0m[0m "Microsoft.Network/*/read",
              [32m+[0m[0m "Microsoft.Network/virtualNetworks/subnets/*",
            ]
          [32m+[0m[0m not_actions = []
        }
    }

[1m  # module.management_groups[0].azurerm_role_definition.enterprise_scale["/providers/Microsoft.Authorization/roleDefinitions/8c534667-e973-5fae-9918-1c4cf9613038"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_definition" "enterprise_scale" {
      [32m+[0m[0m assignable_scopes           = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
        ]
      [32m+[0m[0m description                 = "Security Administrator role with a horizontal view across the entire Azure estate and the Azure Key Vault purge policy."
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "[ENTERPRISE-SCALE] Security-Operations"
      [32m+[0m[0m role_definition_id          = "8c534667-e973-5fae-9918-1c4cf9613038"
      [32m+[0m[0m role_definition_resource_id = (known after apply)
      [32m+[0m[0m scope                       = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"

      [32m+[0m[0m permissions {
          [32m+[0m[0m actions     = [
              [32m+[0m[0m "*/read",
              [32m+[0m[0m "*/register/action",
              [32m+[0m[0m "Microsoft.KeyVault/locations/deletedVaults/purge/action",
              [32m+[0m[0m "Microsoft.PolicyInsights/*",
              [32m+[0m[0m "Microsoft.Authorization/policyAssignments/*",
              [32m+[0m[0m "Microsoft.Authorization/policyDefinitions/*",
              [32m+[0m[0m "Microsoft.Authorization/policyExemptions/*",
              [32m+[0m[0m "Microsoft.Authorization/policySetDefinitions/*",
              [32m+[0m[0m "Microsoft.Insights/alertRules/*",
              [32m+[0m[0m "Microsoft.Resources/deployments/*",
              [32m+[0m[0m "Microsoft.Security/*",
              [32m+[0m[0m "Microsoft.Support/*",
            ]
          [32m+[0m[0m not_actions = []
        }
    }

[1m  # module.management_groups[0].azurerm_role_definition.enterprise_scale["/providers/Microsoft.Authorization/roleDefinitions/988d6c04-78fa-58c4-ac08-935847af6cba"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_definition" "enterprise_scale" {
      [32m+[0m[0m assignable_scopes           = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
        ]
      [32m+[0m[0m description                 = "Contributor role granted for application/operations team at resource group level"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "[ENTERPRISE-SCALE] Application-Owners"
      [32m+[0m[0m role_definition_id          = "988d6c04-78fa-58c4-ac08-935847af6cba"
      [32m+[0m[0m role_definition_resource_id = (known after apply)
      [32m+[0m[0m scope                       = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"

      [32m+[0m[0m permissions {
          [32m+[0m[0m actions     = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m not_actions = [
              [32m+[0m[0m "Microsoft.Authorization/*/write",
              [32m+[0m[0m "Microsoft.Network/publicIPAddresses/write",
              [32m+[0m[0m "Microsoft.Network/virtualNetworks/write",
              [32m+[0m[0m "Microsoft.KeyVault/locations/deletedVaults/purge/action",
            ]
        }
    }

[1m  # module.management_groups[0].azurerm_role_definition.enterprise_scale["/providers/Microsoft.Authorization/roleDefinitions/d8f8cbea-47b6-5004-bbf9-5bf4da213ebf"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_definition" "enterprise_scale" {
      [32m+[0m[0m assignable_scopes           = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
        ]
      [32m+[0m[0m description                 = "Delegated role for subscription owner generated from subscription Owner role"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "[ENTERPRISE-SCALE] Subscription-Owner"
      [32m+[0m[0m role_definition_id          = "d8f8cbea-47b6-5004-bbf9-5bf4da213ebf"
      [32m+[0m[0m role_definition_resource_id = (known after apply)
      [32m+[0m[0m scope                       = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"

      [32m+[0m[0m permissions {
          [32m+[0m[0m actions     = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m not_actions = [
              [32m+[0m[0m "Microsoft.Authorization/*/write",
              [32m+[0m[0m "Microsoft.Network/vpnGateways/*",
              [32m+[0m[0m "Microsoft.Network/expressRouteCircuits/*",
              [32m+[0m[0m "Microsoft.Network/routeTables/write",
              [32m+[0m[0m "Microsoft.Network/vpnSites/*",
            ]
        }
    }

[1m  # module.management_groups[0].azurerm_subscription_template_deployment.telemetry_core[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subscription_template_deployment" "telemetry_core" {
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m location           = "uksouth"
      [32m+[0m[0m name               = (known after apply)
      [32m+[0m[0m output_content     = (known after apply)
      [32m+[0m[0m parameters_content = (known after apply)
      [32m+[0m[0m template_content   = jsonencode(
            {
              [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
              [32m+[0m[0m contentVersion = "1.0.0.0"
              [32m+[0m[0m outputs        = {
                  [32m+[0m[0m telemetry = {
                      [32m+[0m[0m type  = "String"
                      [32m+[0m[0m value = "For more information, see https://aka.ms/alz/tf/telemetry"
                    }
                }
              [32m+[0m[0m parameters     = {}
              [32m+[0m[0m resources      = []
              [32m+[0m[0m variables      = {}
            }
        )
    }

[1m  # module.management_groups[0].azurerm_subscription_template_deployment.telemetry_management[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subscription_template_deployment" "telemetry_management" {
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m location           = "uksouth"
      [32m+[0m[0m name               = (known after apply)
      [32m+[0m[0m output_content     = (known after apply)
      [32m+[0m[0m parameters_content = (known after apply)
      [32m+[0m[0m template_content   = jsonencode(
            {
              [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
              [32m+[0m[0m contentVersion = "1.0.0.0"
              [32m+[0m[0m outputs        = {
                  [32m+[0m[0m telemetry = {
                      [32m+[0m[0m type  = "String"
                      [32m+[0m[0m value = "For more information, see https://aka.ms/alz/tf/telemetry"
                    }
                }
              [32m+[0m[0m parameters     = {}
              [32m+[0m[0m resources      = []
              [32m+[0m[0m variables      = {}
            }
        )
    }

[1m  # module.management_groups[0].azurerm_user_assigned_identity.management["/subscriptions/67a16f0f-e2c3-4cc4-a17d-c9e4e2a0e8c1/resourceGroups/rg-management-uksouth/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Enterprise-Scale-uami"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_user_assigned_identity" "management" {
      [32m+[0m[0m client_id           = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "uksouth"
      [32m+[0m[0m name                = "Enterprise-Scale-uami"
      [32m+[0m[0m principal_id        = (known after apply)
      [32m+[0m[0m resource_group_name = "rg-management-uksouth"
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "deployedBy" = "terraform/azure/caf-enterprise-scale"
        }
      [32m+[0m[0m tenant_id           = (known after apply)
    }

[1m  # module.management_groups[0].random_id.telem[0][0m will be created
[0m  [32m+[0m[0m resource "random_id" "telem" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 4
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_management_group[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_management_group" {
      [32m+[0m[0m create_duration  = "30s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_management_group_level_1" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale",
                ]
            )
          [32m+[0m[0m "azurerm_management_group_level_2" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-sandboxes",
                ]
            )
          [32m+[0m[0m "azurerm_management_group_level_3" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-online",
                ]
            )
          [32m+[0m[0m "azurerm_management_group_level_4" = jsonencode([])
          [32m+[0m[0m "azurerm_management_group_level_5" = jsonencode([])
          [32m+[0m[0m "azurerm_management_group_level_6" = jsonencode([])
        }
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_policy_assignment[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_policy_assignment" {
      [32m+[0m[0m create_duration  = "30s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_management_group_policy_assignment_enterprise_scale" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Audit-PeDnsZones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-HybridNetworking",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-Endpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP-On-NIC",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Audit-AppGW-WAF",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-IP-forwarding",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Priv-Esc-AKS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Privileged-AKS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Storage-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-AKS-HTTPS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-ASR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management/providers/Microsoft.Authorization/policyAssignments/Deploy-Log-Analytics",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/DenyAction-DeleteUAMIAMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-ASR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-sandboxes/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Sandbox",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-ResourceRGLocation",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-TrustedLaunch",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-UnusedResources",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Audit-ZoneResiliency",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deny-Classic-Resources",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deny-UnmanagedDisk",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-ASC-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-Diag-Logs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpointsAMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB",
                ]
            )
        }
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_policy_definition[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_policy_definition" {
      [32m+[0m[0m create_duration  = "30s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_policy_definition_enterprise_scale" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-KV-SoftDelete",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-MachineLearning-PrivateEndpointId",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-child-resources",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-APIM-TLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGW-Without-WAF",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGw-Without-Tls",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-without-BYOC",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-AzFw-Without-Policy",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-NetworkAcls",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-Resource-Kinds",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-RestrictOutboundNetworkAccess",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-NoPublicIp",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-Sku",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-VirtualNetwork",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-Premium-CMK",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureAuth",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureKerberos",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbChannel",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbVersions",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApp-Public-Network",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApps-Without-Https",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Aks",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-SubnetId",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-VmSize",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-Scale",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-HbiWorkspace",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicNetworkAccess",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Private-DNS-Zones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicEndpoint-MariaDB",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Service-Endpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ContainerDeleteRetentionPolicy",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CopyScope",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CorsRules",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-LocalUser",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsBypass",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsVirtualNetworkRules",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesResourceId",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesTenantId",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-SFTP",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ServicesEncryption",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageAccount-CustomDomain",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Penp",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Udr",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-UDR-With-Specific-NextHop",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peering-To-Non-Approved-VNETs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deny-VNet-Peering",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DeleteResources",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Budget",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Custom-Route-Table",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-DDoSProtection",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-FirewallPolicy",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-LogicApp-TLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs-to-LA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Private-DNS-Generic",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-Tde",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments_20230706",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-UserAssignedManagedIdentity-VMInsights",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-VNET-HubSpoke",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Deploy-Windows-DomainJoin",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-NSG",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyDefinitions/Modify-UDR",
                ]
            )
        }
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_policy_set_definition[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_policy_set_definition" {
      [32m+[0m[0m create_duration  = "30s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_policy_set_definition_enterprise_scale" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-TrustedLaunch",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/DenyAction-DeleteProtection",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diagnostics-LogAnalytics",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config_20240319",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-DefenderSQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security_20240529",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Backup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit_20240509",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Encryption-CMK",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-APIM",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-AppServices",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Automation",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-CognitiveServices",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Compute",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerApps",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerInstance",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ContainerRegistry",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-CosmosDb",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-DataExplorer",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-DataFactory",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-EventGrid",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-EventHub",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault-Sup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Kubernetes",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-MachineLearning",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-MySQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Network",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-OpenAI",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-PostgreSQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-SQL",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-ServiceBus",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Storage",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-Synapse",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-VirtualDesktop",
                ]
            )
        }
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_role_assignment[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_role_assignment" {
      [32m+[0m[0m create_duration  = "0s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_role_assignment_enterprise_scale" = jsonencode([])
          [32m+[0m[0m "module_role_assignments_for_policy"       = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management/providers/Microsoft.Authorization/policyAssignments/Deploy-Log-Analytics",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-ASC-Monitoring",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-Diag-Logs",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpointsAMA",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp",
                  [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB",
                ]
            )
        }
    }

[1m  # module.management_groups[0].time_sleep.after_azurerm_role_definition[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "after_azurerm_role_definition" {
      [32m+[0m[0m create_duration  = "60s"
      [32m+[0m[0m destroy_duration = "0s"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m triggers         = {
          [32m+[0m[0m "azurerm_role_definition_enterprise_scale" = jsonencode(
                [
                  [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/0eba57f5-a37f-545e-bc9b-76818d5fb806",
                  [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/55216297-950f-5c51-8b7e-2d01d6c3ed9e",
                  [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/8c534667-e973-5fae-9918-1c4cf9613038",
                  [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/988d6c04-78fa-58c4-ac08-935847af6cba",
                  [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/d8f8cbea-47b6-5004-bbf9-5bf4da213ebf",
                ]
            )
        }
    }

[1m  # module.virtual_network_gateway["primary"].azurerm_public_ip.vgw["001"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "vgw" {
      [32m+[0m[0m allocation_method       = "Static"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "uksouth"
      [32m+[0m[0m name                    = "pip-vgw-hub-uksouth-001"
      [32m+[0m[0m resource_group_name     = (known after apply)
      [32m+[0m[0m sku                     = "Standard"
      [32m+[0m[0m sku_tier                = "Regional"
      [32m+[0m[0m zones                   = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]
    }

[1m  # module.virtual_network_gateway["primary"].azurerm_subnet.vgw[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "vgw" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.2.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "GatewaySubnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = (known after apply)
      [32m+[0m[0m virtual_network_name                           = (known after apply)
    }

[1m  # module.virtual_network_gateway["primary"].azurerm_virtual_network_gateway.vgw[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network_gateway" "vgw" {
      [32m+[0m[0m active_active                         = false
      [32m+[0m[0m bgp_route_translation_for_nat_enabled = false
      [32m+[0m[0m enable_bgp                            = false
      [32m+[0m[0m generation                            = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m ip_sec_replay_protection_enabled      = true
      [32m+[0m[0m location                              = "uksouth"
      [32m+[0m[0m name                                  = "vgw-hub-uksouth"
      [32m+[0m[0m remote_vnet_traffic_enabled           = false
      [32m+[0m[0m resource_group_name                   = (known after apply)
      [32m+[0m[0m sku                                   = "ErGw1AZ"
      [32m+[0m[0m type                                  = "ExpressRoute"
      [32m+[0m[0m virtual_wan_traffic_enabled           = false
      [32m+[0m[0m vpn_type                              = "RouteBased"

      [32m+[0m[0m bgp_settings (known after apply)

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m name                          = "vnetGatewayConfig001"
          [32m+[0m[0m private_ip_address_allocation = "Dynamic"
          [32m+[0m[0m public_ip_address_id          = (known after apply)
          [32m+[0m[0m subnet_id                     = (known after apply)
        }
    }

[1m  # module.virtual_network_gateway["secondary"].azurerm_public_ip.vgw["001"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "vgw" {
      [32m+[0m[0m allocation_method       = "Static"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "ukwest"
      [32m+[0m[0m name                    = "pip-vgw-hub-ukwest-001"
      [32m+[0m[0m resource_group_name     = (known after apply)
      [32m+[0m[0m sku                     = "Standard"
      [32m+[0m[0m sku_tier                = "Regional"
      [32m+[0m[0m zones                   = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]
    }

[1m  # module.virtual_network_gateway["secondary"].azurerm_subnet.vgw[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "vgw" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.1.2.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "GatewaySubnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = (known after apply)
      [32m+[0m[0m virtual_network_name                           = (known after apply)
    }

[1m  # module.virtual_network_gateway["secondary"].azurerm_virtual_network_gateway.vgw[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network_gateway" "vgw" {
      [32m+[0m[0m active_active                         = false
      [32m+[0m[0m bgp_route_translation_for_nat_enabled = false
      [32m+[0m[0m enable_bgp                            = false
      [32m+[0m[0m generation                            = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m ip_sec_replay_protection_enabled      = true
      [32m+[0m[0m location                              = "ukwest"
      [32m+[0m[0m name                                  = "vgw-hub-ukwest"
      [32m+[0m[0m remote_vnet_traffic_enabled           = false
      [32m+[0m[0m resource_group_name                   = (known after apply)
      [32m+[0m[0m sku                                   = "ErGw1AZ"
      [32m+[0m[0m type                                  = "ExpressRoute"
      [32m+[0m[0m virtual_wan_traffic_enabled           = false
      [32m+[0m[0m vpn_type                              = "RouteBased"

      [32m+[0m[0m bgp_settings (known after apply)

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m name                          = "vnetGatewayConfig001"
          [32m+[0m[0m private_ip_address_allocation = "Dynamic"
          [32m+[0m[0m public_ip_address_id          = (known after apply)
          [32m+[0m[0m subnet_id                     = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["primary"].azurerm_public_ip.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "this" {
      [32m+[0m[0m allocation_method       = "Static"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "uksouth"
      [32m+[0m[0m name                    = "pip-hub-uksouth"
      [32m+[0m[0m resource_group_name     = "rg-connectivity-uksouth"
      [32m+[0m[0m sku                     = "Standard"
      [32m+[0m[0m sku_tier                = "Regional"
      [32m+[0m[0m zones                   = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["primary"].azurerm_resource_group_template_deployment.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group_template_deployment" "telemetry" {
      [32m+[0m[0m deployment_mode     = "Incremental"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = (known after apply)
      [32m+[0m[0m output_content      = (known after apply)
      [32m+[0m[0m parameters_content  = (known after apply)
      [32m+[0m[0m resource_group_name = "rg-connectivity-uksouth"
      [32m+[0m[0m template_content    = jsonencode(
            {
              [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
              [32m+[0m[0m contentVersion = "1.0.0.0"
              [32m+[0m[0m outputs        = {
                  [32m+[0m[0m telemetry = {
                      [32m+[0m[0m type  = "String"
                      [32m+[0m[0m value = "For more information, see https://aka.ms/avm/telemetry"
                    }
                }
              [32m+[0m[0m parameters     = {}
              [32m+[0m[0m resources      = []
              [32m+[0m[0m variables      = {}
            }
        )
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["primary"].random_id.telem[0][0m will be created
[0m  [32m+[0m[0m resource "random_id" "telem" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 4
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["secondary"].azurerm_public_ip.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "this" {
      [32m+[0m[0m allocation_method       = "Static"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "ukwest"
      [32m+[0m[0m name                    = "pip-hub-ukwest"
      [32m+[0m[0m resource_group_name     = "rg-connectivity-ukwest"
      [32m+[0m[0m sku                     = "Standard"
      [32m+[0m[0m sku_tier                = "Regional"
      [32m+[0m[0m zones                   = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["secondary"].azurerm_resource_group_template_deployment.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group_template_deployment" "telemetry" {
      [32m+[0m[0m deployment_mode     = "Incremental"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = (known after apply)
      [32m+[0m[0m output_content      = (known after apply)
      [32m+[0m[0m parameters_content  = (known after apply)
      [32m+[0m[0m resource_group_name = "rg-connectivity-ukwest"
      [32m+[0m[0m template_content    = jsonencode(
            {
              [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
              [32m+[0m[0m contentVersion = "1.0.0.0"
              [32m+[0m[0m outputs        = {
                  [32m+[0m[0m telemetry = {
                      [32m+[0m[0m type  = "String"
                      [32m+[0m[0m value = "For more information, see https://aka.ms/avm/telemetry"
                    }
                }
              [32m+[0m[0m parameters     = {}
              [32m+[0m[0m resources      = []
              [32m+[0m[0m variables      = {}
            }
        )
    }

[1m  # module.hub_and_spoke_vnet[0].module.fw_default_ips["secondary"].random_id.telem[0][0m will be created
[0m  [32m+[0m[0m resource "random_id" "telem" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 4
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["primary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["primary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_firewalls"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["primary"].azurerm_firewall.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall" "this" {
      [32m+[0m[0m dns_proxy_enabled   = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "uksouth"
      [32m+[0m[0m name                = "fw-hub-uksouth"
      [32m+[0m[0m resource_group_name = "rg-connectivity-uksouth"
      [32m+[0m[0m sku_name            = "AZFW_VNet"
      [32m+[0m[0m sku_tier            = "Standard"
      [32m+[0m[0m threat_intel_mode   = (known after apply)
      [32m+[0m[0m zones               = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m name                 = "default"
          [32m+[0m[0m private_ip_address   = (known after apply)
          [32m+[0m[0m public_ip_address_id = (known after apply)
          [32m+[0m[0m subnet_id            = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["primary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["primary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["secondary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["secondary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_firewalls"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["secondary"].azurerm_firewall.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall" "this" {
      [32m+[0m[0m dns_proxy_enabled   = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "ukwest"
      [32m+[0m[0m name                = "fw-hub-ukwest"
      [32m+[0m[0m resource_group_name = "rg-connectivity-ukwest"
      [32m+[0m[0m sku_name            = "AZFW_VNet"
      [32m+[0m[0m sku_tier            = "Standard"
      [32m+[0m[0m threat_intel_mode   = (known after apply)
      [32m+[0m[0m zones               = [
          [32m+[0m[0m "1",
          [32m+[0m[0m "2",
          [32m+[0m[0m "3",
        ]

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m name                 = "default"
          [32m+[0m[0m private_ip_address   = (known after apply)
          [32m+[0m[0m public_ip_address_id = (known after apply)
          [32m+[0m[0m subnet_id            = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["secondary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_firewalls["secondary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["primary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["primary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_routing"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["primary"].azurerm_route_table.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_route_table" "this" {
      [32m+[0m[0m bgp_route_propagation_enabled = (known after apply)
      [32m+[0m[0m disable_bgp_route_propagation = false
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "uksouth"
      [32m+[0m[0m name                          = "route-primary"
      [32m+[0m[0m resource_group_name           = "rg-connectivity-uksouth"
      [32m+[0m[0m route                         = (known after apply)
      [32m+[0m[0m subnets                       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["primary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["primary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["secondary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["secondary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_routing"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["secondary"].azurerm_route_table.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_route_table" "this" {
      [32m+[0m[0m bgp_route_propagation_enabled = (known after apply)
      [32m+[0m[0m disable_bgp_route_propagation = false
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "ukwest"
      [32m+[0m[0m name                          = "route-secondary"
      [32m+[0m[0m resource_group_name           = "rg-connectivity-ukwest"
      [32m+[0m[0m route                         = (known after apply)
      [32m+[0m[0m subnets                       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["secondary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_routing["secondary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_network_peering["secondary-primary"].azapi_resource.reverse[0][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "reverse" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m allowForwardedTraffic     = true
              [32m+[0m[0m allowGatewayTransit       = true
              [32m+[0m[0m allowVirtualNetworkAccess = true
              [32m+[0m[0m doNotVerifyRemoteGateways = false
              [32m+[0m[0m enableOnlyIPv6Peering     = false
              [32m+[0m[0m peerCompleteVnets         = true
              [32m+[0m[0m remoteVirtualNetwork      = {
                  [32m+[0m[0m id = (known after apply)
                }
              [32m+[0m[0m useRemoteGateways         = false
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = (known after apply)
      [32m+[0m[0m locks                     = [
          [32m+[0m[0m (known after apply),
        ]
      [32m+[0m[0m name                      = "vnet-hub-uksouth-vnet-hub-ukwest"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = (known after apply)
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m type                      = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-11-01"
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_network_peering["secondary-primary"].azapi_resource.this[0][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "this" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m allowForwardedTraffic     = true
              [32m+[0m[0m allowGatewayTransit       = true
              [32m+[0m[0m allowVirtualNetworkAccess = true
              [32m+[0m[0m doNotVerifyRemoteGateways = false
              [32m+[0m[0m enableOnlyIPv6Peering     = false
              [32m+[0m[0m peerCompleteVnets         = true
              [32m+[0m[0m remoteVirtualNetwork      = {
                  [32m+[0m[0m id = (known after apply)
                }
              [32m+[0m[0m useRemoteGateways         = false
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = (known after apply)
      [32m+[0m[0m locks                     = [
          [32m+[0m[0m (known after apply),
        ]
      [32m+[0m[0m name                      = "vnet-hub-ukwest-vnet-hub-uksouth"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = (known after apply)
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m type                      = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-11-01"
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].data.azurerm_client_config.this[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "this" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_virtual_networks"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].azapi_resource.vnet[0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "vnet" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m extendedLocation = [90mnull[0m[0m
          [32m+[0m[0m properties       = {
              [32m+[0m[0m addressSpace         = {
                  [32m+[0m[0m addressPrefixes = [
                      [32m+[0m[0m "10.0.0.0/16",
                    ]
                }
              [32m+[0m[0m bgpCommunities       = [90mnull[0m[0m
              [32m+[0m[0m ddosProtectionPlan   = [90mnull[0m[0m
              [32m+[0m[0m dhcpOptions          = [90mnull[0m[0m
              [32m+[0m[0m enableDdosProtection = false
              [32m+[0m[0m enableVmProtection   = false
              [32m+[0m[0m encryption           = [90mnull[0m[0m
              [32m+[0m[0m flowTimeoutInMinutes = 4
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = "uksouth"
      [32m+[0m[0m name                      = "vnet-hub-uksouth"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = (known after apply)
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = {}
      [32m+[0m[0m type                      = "Microsoft.Network/virtualNetworks@2023-11-01"
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["primary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].data.azurerm_client_config.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "telemetry" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].data.azurerm_client_config.this[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "azurerm_client_config" "this" {
      [32m+[0m[0m client_id       = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m object_id       = (known after apply)
      [32m+[0m[0m subscription_id = (known after apply)
      [32m+[0m[0m tenant_id       = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].data.modtm_module_source.telemetry[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "modtm_module_source" "telemetry" {
      [32m+[0m[0m module_path    = ".terraform/modules/hub_and_spoke_vnet.hub_virtual_networks"
      [32m+[0m[0m module_source  = (known after apply)
      [32m+[0m[0m module_version = (known after apply)
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].azapi_resource.vnet[0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "vnet" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m extendedLocation = [90mnull[0m[0m
          [32m+[0m[0m properties       = {
              [32m+[0m[0m addressSpace         = {
                  [32m+[0m[0m addressPrefixes = [
                      [32m+[0m[0m "10.1.0.0/16",
                    ]
                }
              [32m+[0m[0m bgpCommunities       = [90mnull[0m[0m
              [32m+[0m[0m ddosProtectionPlan   = [90mnull[0m[0m
              [32m+[0m[0m dhcpOptions          = [90mnull[0m[0m
              [32m+[0m[0m enableDdosProtection = false
              [32m+[0m[0m enableVmProtection   = false
              [32m+[0m[0m encryption           = [90mnull[0m[0m
              [32m+[0m[0m flowTimeoutInMinutes = 4
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m location                  = "ukwest"
      [32m+[0m[0m name                      = "vnet-hub-ukwest"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = (known after apply)
      [32m+[0m[0m removing_special_chars    = false
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m tags                      = {}
      [32m+[0m[0m type                      = "Microsoft.Network/virtualNetworks@2023-11-01"
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].modtm_telemetry.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "modtm_telemetry" "telemetry" {
      [32m+[0m[0m ephemeral_number = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m nonce            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_source"   = (known after apply)
          [32m+[0m[0m "module_version"  = (known after apply)
          [32m+[0m[0m "random_id"       = (known after apply)
          [32m+[0m[0m "subscription_id" = (known after apply)
          [32m+[0m[0m "tenant_id"       = (known after apply)
        }
    }

[1m  # module.hub_and_spoke_vnet[0].module.hub_virtual_networks["secondary"].random_uuid.telemetry[0][0m will be created
[0m  [32m+[0m[0m resource "random_uuid" "telemetry" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m result = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity/providers/Microsoft.Authorization/roleAssignments/980354c4-6916-543f-a99d-f32e3b554985"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "980354c4-6916-543f-a99d-f32e3b554985"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-connectivity"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/roleAssignments/3cc26950-4dab-5d8d-87be-74024b833add"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "3cc26950-4dab-5d8d-87be-74024b833add"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/roleAssignments/714be73e-9536-5a9e-acfa-13897f69b248"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "714be73e-9536-5a9e-acfa-13897f69b248"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp/providers/Microsoft.Authorization/roleAssignments/a7462072-139f-56e7-a8d3-fdca93715dd3"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a7462072-139f-56e7-a8d3-fdca93715dd3"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-corp"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned/providers/Microsoft.Authorization/roleAssignments/839a59d1-4051-5ba4-b0d2-e553914ac433"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "839a59d1-4051-5ba4-b0d2-e553914ac433"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-decommissioned"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/roleAssignments/5bf82cf2-8b94-5c53-ad16-fb6c2c4d6ef0"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "5bf82cf2-8b94-5c53-ad16-fb6c2c4d6ef0"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity/providers/Microsoft.Authorization/roleAssignments/de28ec33-fbbf-5109-bb54-e2a7b3f6f142"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "de28ec33-fbbf-5109-bb54-e2a7b3f6f142"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-identity"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/66fb4018-0fdb-577a-8d13-40a2eda94b45"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "66fb4018-0fdb-577a-8d13-40a2eda94b45"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/95e86167-de2e-5ff1-a456-044028b5c632"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "95e86167-de2e-5ff1-a456-044028b5c632"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18ed5180-3e48-46fd-8541-4ea054d57064"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/bdc29251-b0f9-54e0-a0ca-ea1fc1571f02"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "bdc29251-b0f9-54e0-a0ca-ea1fc1571f02"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/e9790149-5f95-5072-b701-414e7a63d5dc"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e9790149-5f95-5072-b701-414e7a63d5dc"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/040d0b3c-1f5e-5b5e-a937-969277eb9e5d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "040d0b3c-1f5e-5b5e-a937-969277eb9e5d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/16b75699-4384-5548-893b-d6e68976381f"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "16b75699-4384-5548-893b-d6e68976381f"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/319e80e8-6107-5131-b718-91b354448072"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "319e80e8-6107-5131-b718-91b354448072"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/c1aedc73-d972-539d-847f-3dac8b1bbf43"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "c1aedc73-d972-539d-847f-3dac8b1bbf43"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/fbdd6b43-80e4-51db-b737-37b33105f64d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "fbdd6b43-80e4-51db-b737-37b33105f64d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/bdf8c1eb-017a-54a4-879f-324499c93f6b"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "bdf8c1eb-017a-54a4-879f-324499c93f6b"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/6434792e-3e6f-5c0b-ba48-7011067159e4"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "6434792e-3e6f-5c0b-ba48-7011067159e4"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/3b26b1fc-cc0c-50a6-93e7-b5e4632e0a49"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "3b26b1fc-cc0c-50a6-93e7-b5e4632e0a49"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/9b34c1f6-824f-55b7-8d2c-48bcbc89db4b"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "9b34c1f6-824f-55b7-8d2c-48bcbc89db4b"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/417ce5f4-8f45-51e4-a886-78d42e3d01e6"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "417ce5f4-8f45-51e4-a886-78d42e3d01e6"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/76930c0c-fcb5-52fe-a33e-ad796f86d2b8"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "76930c0c-fcb5-52fe-a33e-ad796f86d2b8"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/90d6ee41-b364-58b4-a6f4-ec4cfbc9c15d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "90d6ee41-b364-58b4-a6f4-ec4cfbc9c15d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/fe599f41-1b88-5cf8-a293-a457b87ac9be"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "fe599f41-1b88-5cf8-a293-a457b87ac9be"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/fefab725-7bf6-5dd7-9728-832d2f008230"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "fefab725-7bf6-5dd7-9728-832d2f008230"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/1122356c-c08e-5aeb-b318-f518500b69aa"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "1122356c-c08e-5aeb-b318-f518500b69aa"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/3c57a070-95ee-5551-8060-5af94bc13587"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "3c57a070-95ee-5551-8060-5af94bc13587"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/a3467930-45ea-57a8-86c1-f33de76cd600"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a3467930-45ea-57a8-86c1-f33de76cd600"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/c35d9024-22e7-5dda-81cb-17f19b0f1832"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "c35d9024-22e7-5dda-81cb-17f19b0f1832"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/fb7db8a5-6df1-5d88-ade6-bbb46a975b12"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "fb7db8a5-6df1-5d88-ade6-bbb46a975b12"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/28afa922-d8a9-5a6e-ad76-a6211ef773d5"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "28afa922-d8a9-5a6e-ad76-a6211ef773d5"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/3a2d296b-2748-58f9-89d2-56b0ea6171fc"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "3a2d296b-2748-58f9-89d2-56b0ea6171fc"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/3e6fcde4-e27c-5305-8be8-e32b75886a10"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "3e6fcde4-e27c-5305-8be8-e32b75886a10"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/85aa8e1c-8260-59dd-9c32-e573397d62e0"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "85aa8e1c-8260-59dd-9c32-e573397d62e0"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/9ffcad0d-c6fe-5fa8-9af6-8f255060ba5f"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "9ffcad0d-c6fe-5fa8-9af6-8f255060ba5f"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/49159942-3de8-5661-8e51-dc9332918550"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "49159942-3de8-5661-8e51-dc9332918550"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/59218c6c-d5ab-5aa2-8d83-77fa9521663e"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "59218c6c-d5ab-5aa2-8d83-77fa9521663e"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/99514fc9-949d-51d8-a0d8-692eea73c22d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "99514fc9-949d-51d8-a0d8-692eea73c22d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/c93a61f7-83c4-542d-b49e-03cc584bf83a"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "c93a61f7-83c4-542d-b49e-03cc584bf83a"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/deb32018-2e26-5779-bac8-58b854829276"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "deb32018-2e26-5779-bac8-58b854829276"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/33679d78-8a07-59ee-8f2e-732f0defbcdb"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "33679d78-8a07-59ee-8f2e-732f0defbcdb"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/777a01ee-8175-599b-a081-e66283b8f190"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "777a01ee-8175-599b-a081-e66283b8f190"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/e87d48b4-62a8-509f-a4ef-bddb9585aed2"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e87d48b4-62a8-509f-a4ef-bddb9585aed2"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/68e283b0-f276-59d9-8348-5c3bfe1161f1"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "68e283b0-f276-59d9-8348-5c3bfe1161f1"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/8233baf9-f1e8-5b7a-8560-809a5047033f"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "8233baf9-f1e8-5b7a-8560-809a5047033f"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/e87297a1-03ac-5f7e-b54a-a6a9c4eb3360"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e87297a1-03ac-5f7e-b54a-a6a9c4eb3360"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/94ab0e39-65af-51d6-a4a0-d0e7ac2570da"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "94ab0e39-65af-51d6-a4a0-d0e7ac2570da"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/b0d8f47a-9c35-5976-a7f5-d905bac171e0"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "b0d8f47a-9c35-5976-a7f5-d905bac171e0"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/6af0eeed-5d6d-5735-b858-1ed21b4feff4"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "6af0eeed-5d6d-5735-b858-1ed21b4feff4"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/05c7479c-5b01-5ba9-9fa3-e09c91bca9ab"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "05c7479c-5b01-5ba9-9fa3-e09c91bca9ab"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/254caa7d-1f89-52d7-8c87-0c566044f2b8"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "254caa7d-1f89-52d7-8c87-0c566044f2b8"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/6e41094f-b75f-509c-b624-ddb791fcb822"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "6e41094f-b75f-509c-b624-ddb791fcb822"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/96150155-e0d9-5e01-aa27-fb99a477a22f"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "96150155-e0d9-5e01-aa27-fb99a477a22f"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones/providers/Microsoft.Authorization/roleAssignments/f48b5c11-3526-5ff0-82ed-864f72f4360d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f48b5c11-3526-5ff0-82ed-864f72f4360d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-landing-zones"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management/providers/Microsoft.Authorization/policyAssignments/Deploy-Log-Analytics"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management/providers/Microsoft.Authorization/roleAssignments/a9d3a181-2659-511e-bc62-bbc492e0cb4c"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a9d3a181-2659-511e-bc62-bbc492e0cb4c"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-management"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/1735a8c4-1ad9-57c0-af07-747bb01aaba6"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "1735a8c4-1ad9-57c0-af07-747bb01aaba6"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/2cab78b9-d604-5799-a439-67cca82f8d08"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "2cab78b9-d604-5799-a439-67cca82f8d08"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/624b596e-8356-5350-a003-413566b1f404"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "624b596e-8356-5350-a003-413566b1f404"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/84239765-d824-5c10-b48c-cdf0ce92fc9e"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "84239765-d824-5c10-b48c-cdf0ce92fc9e"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-DefSQL-AMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/a800f1c6-2396-587c-9d14-f8a305c96c8c"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a800f1c6-2396-587c-9d14-f8a305c96c8c"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/44d53159-6352-5c28-bb96-6cb791f4ef35"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "44d53159-6352-5c28-bb96-6cb791f4ef35"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/470f98a1-fbac-5219-9291-d49a1897fce2"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "470f98a1-fbac-5219-9291-d49a1897fce2"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/4ebedff3-5ee1-5032-918d-cc8af7efdc8d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "4ebedff3-5ee1-5032-918d-cc8af7efdc8d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/cebb73de-0509-5e74-b53d-adca05dcac1e"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "cebb73de-0509-5e74-b53d-adca05dcac1e"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/ee55d41b-2544-58d5-96ac-def3ac9f392d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "ee55d41b-2544-58d5-96ac-def3ac9f392d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/10147d3a-f389-53c5-b8f3-e1550745d5d0"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "10147d3a-f389-53c5-b8f3-e1550745d5d0"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/2a02678e-591d-50d2-a806-cda3597f61b1"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "2a02678e-591d-50d2-a806-cda3597f61b1"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/b26d104c-4f9c-5749-8ca5-8bc321d99f96"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "b26d104c-4f9c-5749-8ca5-8bc321d99f96"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/c6d3e751-0d6f-5984-8a9f-daac6643b4d1"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "c6d3e751-0d6f-5984-8a9f-daac6643b4d1"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/f575a057-6ec5-5db7-adab-c02ff963c062"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f575a057-6ec5-5db7-adab-c02ff963c062"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/83153f77-d690-5cd8-a3d4-5fb881c1abbb"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "83153f77-d690-5cd8-a3d4-5fb881c1abbb"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/88ae84d1-72a9-5e2b-905c-72bf63a34097"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "88ae84d1-72a9-5e2b-905c-72bf63a34097"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/b4c93f26-1fc7-5227-9dac-250076a3cdf8"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "b4c93f26-1fc7-5227-9dac-250076a3cdf8"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/e32b563f-b6fd-5b6e-b611-7a732be18796"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e32b563f-b6fd-5b6e-b611-7a732be18796"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/f6292f50-3cf2-59e7-b7b8-8e589669e550"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f6292f50-3cf2-59e7-b7b8-8e589669e550"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/ad7bb846-06fa-5d51-8e55-106512c995e6"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "ad7bb846-06fa-5d51-8e55-106512c995e6"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/be199a3b-7b28-51b6-af52-fdab9c2cf0d4"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "be199a3b-7b28-51b6-af52-fdab9c2cf0d4"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/cae9556f-6ed9-556c-b0dd-df270c404fca"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "cae9556f-6ed9-556c-b0dd-df270c404fca"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/d90993ea-be29-5f55-90f8-e280f1cdb62e"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "d90993ea-be29-5f55-90f8-e280f1cdb62e"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/f48c0f92-ba9e-546d-acfa-cc420fd98bf9"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f48c0f92-ba9e-546d-acfa-cc420fd98bf9"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/a7b19696-0402-59dd-80da-9c9a046fc43a"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a7b19696-0402-59dd-80da-9c9a046fc43a"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/e0df1604-a61c-570b-b2a8-b360247fe713"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e0df1604-a61c-570b-b2a8-b360247fe713"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmArc-ChangeTrack"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/f5f868db-7638-55ee-866f-f175e8c19dc4"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f5f868db-7638-55ee-866f-f175e8c19dc4"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/261d218b-ae8d-5a17-8a8d-2eb94adbe33d"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "261d218b-ae8d-5a17-8a8d-2eb94adbe33d"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/8484f30a-2448-58fc-b35b-9eee81695006"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "8484f30a-2448-58fc-b35b-9eee81695006"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Deploy-vmHybr-Monitoring"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/e39e2d36-c26e-590e-a458-7f3f6dde1602"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e39e2d36-c26e-590e-a458-7f3f6dde1602"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/e1637ecb-ac69-5ca3-9b85-3e3c65773862"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e1637ecb-ac69-5ca3-9b85-3e3c65773862"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/policyAssignments/Enable-AUM-CheckUpdates"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform/providers/Microsoft.Authorization/roleAssignments/f527c1f2-73ad-5519-a432-b6f813778380"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "f527c1f2-73ad-5519-a432-b6f813778380"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale-platform"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/5d17531c-87b2-5e9e-9827-68edf4eb8656"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "5d17531c-87b2-5e9e-9827-68edf4eb8656"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/e48aa313-1f8e-5fb9-b29f-5cb0b050563b"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e48aa313-1f8e-5fb9-b29f-5cb0b050563b"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-Diag-Logs"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/8431eb58-7f54-5b67-945e-113cbc2bc098"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "8431eb58-7f54-5b67-945e-113cbc2bc098"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/5e4320e8-38d1-5c70-adeb-d704fef3edb4"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "5e4320e8-38d1-5c70-adeb-d704fef3edb4"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpointsAMA"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/b61c9f34-fb10-5139-9d94-08f0e4af774f"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "b61c9f34-fb10-5139-9d94-08f0e4af774f"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/20faa426-955c-549a-8b84-b60c3b6bbc93"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "20faa426-955c-549a-8b84-b60c3b6bbc93"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/5e93ba01-8f92-4c7a-b12a-801e3df23824"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/4f6c4be2-62e2-557d-a861-564e68addc6b"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "4f6c4be2-62e2-557d-a861-564e68addc6b"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/80ad3a40-32a5-5a89-ad77-0e14695579cb"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "80ad3a40-32a5-5a89-ad77-0e14695579cb"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/8fe62af0-f841-5c2d-b2d8-8e63818f2abf"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "8fe62af0-f841-5c2d-b2d8-8e63818f2abf"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/8bb6f106-b146-4ee6-a3f9-b9c5a96e0ae5"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/ae76d977-c99e-5902-99f9-76b9afc965c8"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "ae76d977-c99e-5902-99f9-76b9afc965c8"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/18ed5180-3e48-46fd-8541-4ea054d57064"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/d5d9983f-b6e7-596f-8140-e9d7987e9fe6"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "d5d9983f-b6e7-596f-8140-e9d7987e9fe6"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config-H224"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/e27e6c2e-303f-5a06-8548-997e2b3d0929"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e27e6c2e-303f-5a06-8548-997e2b3d0929"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/e13179b7-713a-5d0f-87d6-0a13a975ee7a"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "e13179b7-713a-5d0f-87d6-0a13a975ee7a"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/a72f1a09-9f6e-54c3-809c-ca5198ab0e23"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "a72f1a09-9f6e-54c3-809c-ca5198ab0e23"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.management_groups[0].module.role_assignments_for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB"].azurerm_role_assignment.for_policy["/providers/Microsoft.Management/managementGroups/Enterprise-Scale/providers/Microsoft.Authorization/roleAssignments/8799f599-da63-556c-b58a-d9daf9badabe"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "for_policy" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = "8799f599-da63-556c-b58a-d9daf9badabe"
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      [32m+[0m[0m role_definition_name             = (known after apply)
      [32m+[0m[0m scope                            = "/providers/Microsoft.Management/managementGroups/Enterprise-Scale"
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1mPlan:[0m 455 to add, 0 to change, 0 to destroy.
[0m